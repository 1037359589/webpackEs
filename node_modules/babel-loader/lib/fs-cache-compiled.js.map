{"version":3,"sources":["fs-cache.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;AAAY,CAAC;AAWb,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC/B,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC/B,IAAI,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AACvB,IAAI,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AACvB,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC3B,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC;;;;;;;;;AAAC,AAS3B,IAAI,IAAI,GAAG,UAAS,QAAQ,EAAE,QAAQ,EAAE;AACtC,SAAO,EAAE,CAAC,QAAQ,CAAC,QAAQ,EAAE,UAAS,GAAG,EAAE,IAAI,EAAE;AAC/C,QAAI,GAAG,EAAE;AAAE,aAAO,QAAQ,CAAC,GAAG,CAAC,CAAC;KAAE;;AAElC,WAAO,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,UAAS,GAAG,EAAE,OAAO,EAAE;AAC9C,UAAI,MAAM,GAAG,EAAE,CAAC;;AAEhB,UAAI,GAAG,EAAE;AAAE,eAAO,QAAQ,CAAC,GAAG,CAAC,CAAC;OAAE;;AAElC,UAAI;AACF,cAAM,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;OAC9B,CAAC,OAAO,CAAC,EAAE;AACV,eAAO,QAAQ,CAAC,CAAC,CAAC,CAAC;OACpB;;AAED,aAAO,QAAQ,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;KAC/B,CAAC,CAAC;GACJ,CAAC,CAAC;CACJ;;;;;;;;;;AAAC,AAWF,IAAI,KAAK,GAAG,UAAS,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE;AAC/C,MAAI,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;;AAErC,SAAO,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,UAAS,GAAG,EAAE,IAAI,EAAE;AAC5C,QAAI,GAAG,EAAE;AAAE,aAAO,QAAQ,CAAC,GAAG,CAAC,CAAC;KAAE;;AAElC,WAAO,EAAE,CAAC,SAAS,CAAC,QAAQ,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;GAC/C,CAAC,CAAC;CACJ;;;;;;;;;;AAAC,AAWF,IAAI,QAAQ,GAAG,UAAS,MAAM,EAAE,UAAU,EAAE,OAAO,EAAE;AACnD,MAAI,IAAI,GAAG,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;AACrC,MAAI,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC;AAC5B,UAAM,EAAE,MAAM;AACd,WAAO,EAAE,OAAO;AAChB,cAAU,EAAE,UAAU;GACvB,CAAC,CAAC;;AAEH,MAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;;AAEnB,SAAO,IAAI,CAAC,IAAI,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,YAAY,CAAC;CACnD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAC,AAmCF,IAAI,KAAK,GAAG,MAAM,CAAC,OAAO,GAAG,UAAS,MAAM,EAAE,QAAQ,EAAE;;;AAGtD,MAAI,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;AAC3B,MAAI,OAAO,GAAG,MAAM,CAAC,OAAO,IAAI,EAAE,CAAC;AACnC,MAAI,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC;AACjC,MAAI,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;AACnC,MAAI,SAAS,GAAG,AAAC,OAAO,MAAM,CAAC,SAAS,KAAK,QAAQ,GAC/C,MAAM,CAAC,SAAS,GAChB,EAAE,CAAC,MAAM,EAAE,CAAC;AAClB,MAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,QAAQ,CAAC,MAAM,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;;;AAAC,AAGvE,SAAO,MAAM,CAAC,SAAS,EAAE,UAAS,GAAG,EAAE;AACrC,QAAI,GAAG,EAAE;AAAE,aAAO,QAAQ,CAAC,GAAG,CAAC,CAAC;KAAE;;AAElC,WAAO,IAAI,CAAC,IAAI,EAAE,UAAS,GAAG,EAAE,OAAO,EAAE;AACvC,UAAI,MAAM,GAAG,EAAE;;;AAAC,AAGhB,UAAI,CAAC,GAAG,EAAE;AAAE,eAAO,QAAQ,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;OAAE;;;;AAAA,AAI7C,UAAI;AACF,cAAM,GAAG,SAAS,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;OACrC,CAAC,OAAO,KAAK,EAAE;AACd,eAAO,QAAQ,CAAC,KAAK,CAAC,CAAC;OACxB;;AAED,aAAO,KAAK,CAAC,IAAI,EAAE,MAAM,EAAE,UAAS,GAAG,EAAE;AACvC,eAAO,QAAQ,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;OAC9B,CAAC,CAAC;KACJ,CAAC,CAAC;GACJ,CAAC,CAAC;CACJ,CAAC","file":"fs-cache-compiled.js","sourcesContent":["'use strict';\n\n/**\n * Filesystem cache\n *\n * Given a file and a transform function, cache the result into files\n * or retrieve the previously cached files if the given file is already known.\n *\n * @see https://github.com/babel/babel-loader/issues/34\n * @see https://github.com/babel/babel-loader/pull/41\n */\nvar crypto = require('crypto');\nvar mkdirp = require('mkdirp');\nvar fs = require('fs');\nvar os = require('os');\nvar path = require('path');\nvar zlib = require('zlib');\n\n/**\n * Read the contents from the compressed file.\n *\n * @async\n * @params {String} filename\n * @params {Function} callback\n */\nvar read = function(filename, callback) {\n  return fs.readFile(filename, function(err, data) {\n    if (err) { return callback(err); }\n\n    return zlib.gunzip(data, function(err, content) {\n      var result = {};\n\n      if (err) { return callback(err); }\n\n      try {\n        result = JSON.parse(content);\n      } catch (e) {\n        return callback(e);\n      }\n\n      return callback(null, result);\n    });\n  });\n};\n\n\n/**\n * Write contents into a compressed file.\n *\n * @async\n * @params {String} filename\n * @params {String} result\n * @params {Function} callback\n */\nvar write = function(filename, result, callback) {\n  var content = JSON.stringify(result);\n\n  return zlib.gzip(content, function(err, data) {\n    if (err) { return callback(err); }\n\n    return fs.writeFile(filename, data, callback);\n  });\n};\n\n\n/**\n * Build the filename for the cached file\n *\n * @params {String} source  File source code\n * @params {Object} options Options used\n *\n * @return {String}\n */\nvar filename = function(source, identifier, options) {\n  var hash = crypto.createHash('SHA1');\n  var contents = JSON.stringify({\n    source: source,\n    options: options,\n    identifier: identifier,\n  });\n\n  hash.end(contents);\n\n  return hash.read().toString('hex') + '.json.gzip';\n};\n\n/**\n * Retrieve file from cache, or create a new one for future reads\n *\n * @async\n * @param  {Object}   params\n * @param  {String}   params.directory  Directory to store cached files\n * @param  {String}   params.identifier Unique identifier to bust cache\n * @param  {String}   params.source   Original contents of the file to be cached\n * @param  {Object}   params.options  Options to be given to the transform fn\n * @param  {Function} params.transform  Function that will transform the\n *                                      original file and whose result will be\n *                                      cached\n *\n * @param  {Function<err, result>} callback\n *\n * @example\n *\n *   cache({\n *     directory: '.tmp/cache',\n *     identifier: 'babel-loader-cachefile',\n *     source: *source code from file*,\n *     options: {\n *       experimental: true,\n *       runtime: true\n *     },\n *     transform: function(source, options) {\n *       var content = *do what you need with the source*\n *       return content;\n *     }\n *   }, function(err, result) {\n *\n *   });\n */\nvar cache = module.exports = function(params, callback) {\n  // Spread params into named variables\n  // Forgive user whenever possible\n  var source = params.source;\n  var options = params.options || {};\n  var transform = params.transform;\n  var identifier = params.identifier;\n  var directory = (typeof params.directory === 'string') ?\n        params.directory :\n        os.tmpdir();\n  var file = path.join(directory, filename(source, identifier, options));\n\n  // Make sure the directory exists.\n  return mkdirp(directory, function(err) {\n    if (err) { return callback(err); }\n\n    return read(file, function(err, content) {\n      var result = {};\n      // No errors mean that the file was previously cached\n      // we just need to return it\n      if (!err) { return callback(null, content); }\n\n      // Otherwise just transform the file\n      // return it to the user asap and write it in cache\n      try {\n        result = transform(source, options);\n      } catch (error) {\n        return callback(error);\n      }\n\n      return write(file, result, function(err) {\n        return callback(err, result);\n      });\n    });\n  });\n};\n"]}