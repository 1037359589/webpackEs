{"version":3,"sources":["big.js"],"names":[],"mappings":"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","file":"big-compiled.js","sourcesContent":["/* big.js v3.1.3 https://github.com/MikeMcl/big.js/LICENCE */\r\n;(function (global) {\r\n    'use strict';\r\n\r\n/*\r\n  big.js v3.1.3\r\n  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.\r\n  https://github.com/MikeMcl/big.js/\r\n  Copyright (c) 2014 Michael Mclaughlin <M8ch88l@gmail.com>\r\n  MIT Expat Licence\r\n*/\r\n\r\n/***************************** EDITABLE DEFAULTS ******************************/\r\n\r\n    // The default values below must be integers within the stated ranges.\r\n\r\n    /*\r\n     * The maximum number of decimal places of the results of operations\r\n     * involving division: div and sqrt, and pow with negative exponents.\r\n     */\r\n    var DP = 20,                           // 0 to MAX_DP\r\n\r\n        /*\r\n         * The rounding mode used when rounding to the above decimal places.\r\n         *\r\n         * 0 Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)\r\n         * 1 To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)\r\n         * 2 To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)\r\n         * 3 Away from zero.                                  (ROUND_UP)\r\n         */\r\n        RM = 1,                            // 0, 1, 2 or 3\r\n\r\n        // The maximum value of DP and Big.DP.\r\n        MAX_DP = 1E6,                      // 0 to 1000000\r\n\r\n        // The maximum magnitude of the exponent argument to the pow method.\r\n        MAX_POWER = 1E6,                   // 1 to 1000000\r\n\r\n        /*\r\n         * The exponent value at and beneath which toString returns exponential\r\n         * notation.\r\n         * JavaScript's Number type: -7\r\n         * -1000000 is the minimum recommended exponent value of a Big.\r\n         */\r\n        E_NEG = -7,                   // 0 to -1000000\r\n\r\n        /*\r\n         * The exponent value at and above which toString returns exponential\r\n         * notation.\r\n         * JavaScript's Number type: 21\r\n         * 1000000 is the maximum recommended exponent value of a Big.\r\n         * (This limit is not enforced or checked.)\r\n         */\r\n        E_POS = 21,                   // 0 to 1000000\r\n\r\n/******************************************************************************/\r\n\r\n        // The shared prototype object.\r\n        P = {},\r\n        isValid = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\r\n        Big;\r\n\r\n\r\n    /*\r\n     * Create and return a Big constructor.\r\n     *\r\n     */\r\n    function bigFactory() {\r\n\r\n        /*\r\n         * The Big constructor and exported function.\r\n         * Create and return a new instance of a Big number object.\r\n         *\r\n         * n {number|string|Big} A numeric value.\r\n         */\r\n        function Big(n) {\r\n            var x = this;\r\n\r\n            // Enable constructor usage without new.\r\n            if (!(x instanceof Big)) {\r\n                return n === void 0 ? bigFactory() : new Big(n);\r\n            }\r\n\r\n            // Duplicate.\r\n            if (n instanceof Big) {\r\n                x.s = n.s;\r\n                x.e = n.e;\r\n                x.c = n.c.slice();\r\n            } else {\r\n                parse(x, n);\r\n            }\r\n\r\n            /*\r\n             * Retain a reference to this Big constructor, and shadow\r\n             * Big.prototype.constructor which points to Object.\r\n             */\r\n            x.constructor = Big;\r\n        }\r\n\r\n        Big.prototype = P;\r\n        Big.DP = DP;\r\n        Big.RM = RM;\r\n        Big.E_NEG = E_NEG;\r\n        Big.E_POS = E_POS;\r\n\r\n        return Big;\r\n    }\r\n\r\n\r\n    // Private functions\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of Big x in normal or exponential\r\n     * notation to dp fixed decimal places or significant digits.\r\n     *\r\n     * x {Big} The Big to format.\r\n     * dp {number} Integer, 0 to MAX_DP inclusive.\r\n     * toE {number} 1 (toExponential), 2 (toPrecision) or undefined (toFixed).\r\n     */\r\n    function format(x, dp, toE) {\r\n        var Big = x.constructor,\r\n\r\n            // The index (normal notation) of the digit that may be rounded up.\r\n            i = dp - (x = new Big(x)).e,\r\n            c = x.c;\r\n\r\n        // Round?\r\n        if (c.length > ++dp) {\r\n            rnd(x, i, Big.RM);\r\n        }\r\n\r\n        if (!c[0]) {\r\n            ++i;\r\n        } else if (toE) {\r\n            i = dp;\r\n\r\n        // toFixed\r\n        } else {\r\n            c = x.c;\r\n\r\n            // Recalculate i as x.e may have changed if value rounded up.\r\n            i = x.e + i + 1;\r\n        }\r\n\r\n        // Append zeros?\r\n        for (; c.length < i; c.push(0)) {\r\n        }\r\n        i = x.e;\r\n\r\n        /*\r\n         * toPrecision returns exponential notation if the number of\r\n         * significant digits specified is less than the number of digits\r\n         * necessary to represent the integer part of the value in normal\r\n         * notation.\r\n         */\r\n        return toE === 1 || toE && (dp <= i || i <= Big.E_NEG) ?\r\n\r\n          // Exponential notation.\r\n          (x.s < 0 && c[0] ? '-' : '') +\r\n            (c.length > 1 ? c[0] + '.' + c.join('').slice(1) : c[0]) +\r\n              (i < 0 ? 'e' : 'e+') + i\r\n\r\n          // Normal notation.\r\n          : x.toString();\r\n    }\r\n\r\n\r\n    /*\r\n     * Parse the number or string value passed to a Big constructor.\r\n     *\r\n     * x {Big} A Big number instance.\r\n     * n {number|string} A numeric value.\r\n     */\r\n    function parse(x, n) {\r\n        var e, i, nL;\r\n\r\n        // Minus zero?\r\n        if (n === 0 && 1 / n < 0) {\r\n            n = '-0';\r\n\r\n        // Ensure n is string and check validity.\r\n        } else if (!isValid.test(n += '')) {\r\n            throwErr(NaN);\r\n        }\r\n\r\n        // Determine sign.\r\n        x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1;\r\n\r\n        // Decimal point?\r\n        if ((e = n.indexOf('.')) > -1) {\r\n            n = n.replace('.', '');\r\n        }\r\n\r\n        // Exponential form?\r\n        if ((i = n.search(/e/i)) > 0) {\r\n\r\n            // Determine exponent.\r\n            if (e < 0) {\r\n                e = i;\r\n            }\r\n            e += +n.slice(i + 1);\r\n            n = n.substring(0, i);\r\n\r\n        } else if (e < 0) {\r\n\r\n            // Integer.\r\n            e = n.length;\r\n        }\r\n\r\n        // Determine leading zeros.\r\n        for (i = 0; n.charAt(i) == '0'; i++) {\r\n        }\r\n\r\n        if (i == (nL = n.length)) {\r\n\r\n            // Zero.\r\n            x.c = [ x.e = 0 ];\r\n        } else {\r\n\r\n            // Determine trailing zeros.\r\n            for (; n.charAt(--nL) == '0';) {\r\n            }\r\n\r\n            x.e = e - i - 1;\r\n            x.c = [];\r\n\r\n            // Convert string to array of digits without leading/trailing zeros.\r\n            for (e = 0; i <= nL; x.c[e++] = +n.charAt(i++)) {\r\n            }\r\n        }\r\n\r\n        return x;\r\n    }\r\n\r\n\r\n    /*\r\n     * Round Big x to a maximum of dp decimal places using rounding mode rm.\r\n     * Called by div, sqrt and round.\r\n     *\r\n     * x {Big} The Big to round.\r\n     * dp {number} Integer, 0 to MAX_DP inclusive.\r\n     * rm {number} 0, 1, 2 or 3 (DOWN, HALF_UP, HALF_EVEN, UP)\r\n     * [more] {boolean} Whether the result of division was truncated.\r\n     */\r\n    function rnd(x, dp, rm, more) {\r\n        var u,\r\n            xc = x.c,\r\n            i = x.e + dp + 1;\r\n\r\n        if (rm === 1) {\r\n\r\n            // xc[i] is the digit after the digit that may be rounded up.\r\n            more = xc[i] >= 5;\r\n        } else if (rm === 2) {\r\n            more = xc[i] > 5 || xc[i] == 5 &&\r\n              (more || i < 0 || xc[i + 1] !== u || xc[i - 1] & 1);\r\n        } else if (rm === 3) {\r\n            more = more || xc[i] !== u || i < 0;\r\n        } else {\r\n            more = false;\r\n\r\n            if (rm !== 0) {\r\n                throwErr('!Big.RM!');\r\n            }\r\n        }\r\n\r\n        if (i < 1 || !xc[0]) {\r\n\r\n            if (more) {\r\n\r\n                // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n                x.e = -dp;\r\n                x.c = [1];\r\n            } else {\r\n\r\n                // Zero.\r\n                x.c = [x.e = 0];\r\n            }\r\n        } else {\r\n\r\n            // Remove any digits after the required decimal places.\r\n            xc.length = i--;\r\n\r\n            // Round up?\r\n            if (more) {\r\n\r\n                // Rounding up may mean the previous digit has to be rounded up.\r\n                for (; ++xc[i] > 9;) {\r\n                    xc[i] = 0;\r\n\r\n                    if (!i--) {\r\n                        ++x.e;\r\n                        xc.unshift(1);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Remove trailing zeros.\r\n            for (i = xc.length; !xc[--i]; xc.pop()) {\r\n            }\r\n        }\r\n\r\n        return x;\r\n    }\r\n\r\n\r\n    /*\r\n     * Throw a BigError.\r\n     *\r\n     * message {string} The error message.\r\n     */\r\n    function throwErr(message) {\r\n        var err = new Error(message);\r\n        err.name = 'BigError';\r\n\r\n        throw err;\r\n    }\r\n\r\n\r\n    // Prototype/instance methods\r\n\r\n\r\n    /*\r\n     * Return a new Big whose value is the absolute value of this Big.\r\n     */\r\n    P.abs = function () {\r\n        var x = new this.constructor(this);\r\n        x.s = 1;\r\n\r\n        return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     * 1 if the value of this Big is greater than the value of Big y,\r\n     * -1 if the value of this Big is less than the value of Big y, or\r\n     * 0 if they have the same value.\r\n    */\r\n    P.cmp = function (y) {\r\n        var xNeg,\r\n            x = this,\r\n            xc = x.c,\r\n            yc = (y = new x.constructor(y)).c,\r\n            i = x.s,\r\n            j = y.s,\r\n            k = x.e,\r\n            l = y.e;\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n            return !xc[0] ? !yc[0] ? 0 : -j : i;\r\n        }\r\n\r\n        // Signs differ?\r\n        if (i != j) {\r\n            return i;\r\n        }\r\n        xNeg = i < 0;\r\n\r\n        // Compare exponents.\r\n        if (k != l) {\r\n            return k > l ^ xNeg ? 1 : -1;\r\n        }\r\n\r\n        i = -1;\r\n        j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n        // Compare digit by digit.\r\n        for (; ++i < j;) {\r\n\r\n            if (xc[i] != yc[i]) {\r\n                return xc[i] > yc[i] ^ xNeg ? 1 : -1;\r\n            }\r\n        }\r\n\r\n        // Compare lengths.\r\n        return k == l ? 0 : k > l ^ xNeg ? 1 : -1;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new Big whose value is the value of this Big divided by the\r\n     * value of Big y, rounded, if necessary, to a maximum of Big.DP decimal\r\n     * places using rounding mode Big.RM.\r\n     */\r\n    P.div = function (y) {\r\n        var x = this,\r\n            Big = x.constructor,\r\n            // dividend\r\n            dvd = x.c,\r\n            //divisor\r\n            dvs = (y = new Big(y)).c,\r\n            s = x.s == y.s ? 1 : -1,\r\n            dp = Big.DP;\r\n\r\n        if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\r\n            throwErr('!Big.DP!');\r\n        }\r\n\r\n        // Either 0?\r\n        if (!dvd[0] || !dvs[0]) {\r\n\r\n            // If both are 0, throw NaN\r\n            if (dvd[0] == dvs[0]) {\r\n                throwErr(NaN);\r\n            }\r\n\r\n            // If dvs is 0, throw +-Infinity.\r\n            if (!dvs[0]) {\r\n                throwErr(s / 0);\r\n            }\r\n\r\n            // dvd is 0, return +-0.\r\n            return new Big(s * 0);\r\n        }\r\n\r\n        var dvsL, dvsT, next, cmp, remI, u,\r\n            dvsZ = dvs.slice(),\r\n            dvdI = dvsL = dvs.length,\r\n            dvdL = dvd.length,\r\n            // remainder\r\n            rem = dvd.slice(0, dvsL),\r\n            remL = rem.length,\r\n            // quotient\r\n            q = y,\r\n            qc = q.c = [],\r\n            qi = 0,\r\n            digits = dp + (q.e = x.e - y.e) + 1;\r\n\r\n        q.s = s;\r\n        s = digits < 0 ? 0 : digits;\r\n\r\n        // Create version of divisor with leading zero.\r\n        dvsZ.unshift(0);\r\n\r\n        // Add zeros to make remainder as long as divisor.\r\n        for (; remL++ < dvsL; rem.push(0)) {\r\n        }\r\n\r\n        do {\r\n\r\n            // 'next' is how many times the divisor goes into current remainder.\r\n            for (next = 0; next < 10; next++) {\r\n\r\n                // Compare divisor and remainder.\r\n                if (dvsL != (remL = rem.length)) {\r\n                    cmp = dvsL > remL ? 1 : -1;\r\n                } else {\r\n\r\n                    for (remI = -1, cmp = 0; ++remI < dvsL;) {\r\n\r\n                        if (dvs[remI] != rem[remI]) {\r\n                            cmp = dvs[remI] > rem[remI] ? 1 : -1;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // If divisor < remainder, subtract divisor from remainder.\r\n                if (cmp < 0) {\r\n\r\n                    // Remainder can't be more than 1 digit longer than divisor.\r\n                    // Equalise lengths using divisor with extra leading zero?\r\n                    for (dvsT = remL == dvsL ? dvs : dvsZ; remL;) {\r\n\r\n                        if (rem[--remL] < dvsT[remL]) {\r\n                            remI = remL;\r\n\r\n                            for (; remI && !rem[--remI]; rem[remI] = 9) {\r\n                            }\r\n                            --rem[remI];\r\n                            rem[remL] += 10;\r\n                        }\r\n                        rem[remL] -= dvsT[remL];\r\n                    }\r\n                    for (; !rem[0]; rem.shift()) {\r\n                    }\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n\r\n            // Add the 'next' digit to the result array.\r\n            qc[qi++] = cmp ? next : ++next;\r\n\r\n            // Update the remainder.\r\n            if (rem[0] && cmp) {\r\n                rem[remL] = dvd[dvdI] || 0;\r\n            } else {\r\n                rem = [ dvd[dvdI] ];\r\n            }\r\n\r\n        } while ((dvdI++ < dvdL || rem[0] !== u) && s--);\r\n\r\n        // Leading zero? Do not remove if result is simply zero (qi == 1).\r\n        if (!qc[0] && qi != 1) {\r\n\r\n            // There can't be more than one zero.\r\n            qc.shift();\r\n            q.e--;\r\n        }\r\n\r\n        // Round?\r\n        if (qi > digits) {\r\n            rnd(q, dp, Big.RM, rem[0] !== u);\r\n        }\r\n\r\n        return q;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this Big is equal to the value of Big y,\r\n     * otherwise returns false.\r\n     */\r\n    P.eq = function (y) {\r\n        return !this.cmp(y);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this Big is greater than the value of Big y,\r\n     * otherwise returns false.\r\n     */\r\n    P.gt = function (y) {\r\n        return this.cmp(y) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this Big is greater than or equal to the\r\n     * value of Big y, otherwise returns false.\r\n     */\r\n    P.gte = function (y) {\r\n        return this.cmp(y) > -1;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this Big is less than the value of Big y,\r\n     * otherwise returns false.\r\n     */\r\n    P.lt = function (y) {\r\n        return this.cmp(y) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this Big is less than or equal to the value\r\n     * of Big y, otherwise returns false.\r\n     */\r\n    P.lte = function (y) {\r\n         return this.cmp(y) < 1;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new Big whose value is the value of this Big minus the value\r\n     * of Big y.\r\n     */\r\n    P.sub = P.minus = function (y) {\r\n        var i, j, t, xLTy,\r\n            x = this,\r\n            Big = x.constructor,\r\n            a = x.s,\r\n            b = (y = new Big(y)).s;\r\n\r\n        // Signs differ?\r\n        if (a != b) {\r\n            y.s = -b;\r\n            return x.plus(y);\r\n        }\r\n\r\n        var xc = x.c.slice(),\r\n            xe = x.e,\r\n            yc = y.c,\r\n            ye = y.e;\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n            // y is non-zero? x is non-zero? Or both are zero.\r\n            return yc[0] ? (y.s = -b, y) : new Big(xc[0] ? x : 0);\r\n        }\r\n\r\n        // Determine which is the bigger number.\r\n        // Prepend zeros to equalise exponents.\r\n        if (a = xe - ye) {\r\n\r\n            if (xLTy = a < 0) {\r\n                a = -a;\r\n                t = xc;\r\n            } else {\r\n                ye = xe;\r\n                t = yc;\r\n            }\r\n\r\n            t.reverse();\r\n            for (b = a; b--; t.push(0)) {\r\n            }\r\n            t.reverse();\r\n        } else {\r\n\r\n            // Exponents equal. Check digit by digit.\r\n            j = ((xLTy = xc.length < yc.length) ? xc : yc).length;\r\n\r\n            for (a = b = 0; b < j; b++) {\r\n\r\n                if (xc[b] != yc[b]) {\r\n                    xLTy = xc[b] < yc[b];\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        // x < y? Point xc to the array of the bigger number.\r\n        if (xLTy) {\r\n            t = xc;\r\n            xc = yc;\r\n            yc = t;\r\n            y.s = -y.s;\r\n        }\r\n\r\n        /*\r\n         * Append zeros to xc if shorter. No need to add zeros to yc if shorter\r\n         * as subtraction only needs to start at yc.length.\r\n         */\r\n        if (( b = (j = yc.length) - (i = xc.length) ) > 0) {\r\n\r\n            for (; b--; xc[i++] = 0) {\r\n            }\r\n        }\r\n\r\n        // Subtract yc from xc.\r\n        for (b = i; j > a;){\r\n\r\n            if (xc[--j] < yc[j]) {\r\n\r\n                for (i = j; i && !xc[--i]; xc[i] = 9) {\r\n                }\r\n                --xc[i];\r\n                xc[j] += 10;\r\n            }\r\n            xc[j] -= yc[j];\r\n        }\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--b] === 0; xc.pop()) {\r\n        }\r\n\r\n        // Remove leading zeros and adjust exponent accordingly.\r\n        for (; xc[0] === 0;) {\r\n            xc.shift();\r\n            --ye;\r\n        }\r\n\r\n        if (!xc[0]) {\r\n\r\n            // n - n = +0\r\n            y.s = 1;\r\n\r\n            // Result must be zero.\r\n            xc = [ye = 0];\r\n        }\r\n\r\n        y.c = xc;\r\n        y.e = ye;\r\n\r\n        return y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new Big whose value is the value of this Big modulo the\r\n     * value of Big y.\r\n     */\r\n    P.mod = function (y) {\r\n        var yGTx,\r\n            x = this,\r\n            Big = x.constructor,\r\n            a = x.s,\r\n            b = (y = new Big(y)).s;\r\n\r\n        if (!y.c[0]) {\r\n            throwErr(NaN);\r\n        }\r\n\r\n        x.s = y.s = 1;\r\n        yGTx = y.cmp(x) == 1;\r\n        x.s = a;\r\n        y.s = b;\r\n\r\n        if (yGTx) {\r\n            return new Big(x);\r\n        }\r\n\r\n        a = Big.DP;\r\n        b = Big.RM;\r\n        Big.DP = Big.RM = 0;\r\n        x = x.div(y);\r\n        Big.DP = a;\r\n        Big.RM = b;\r\n\r\n        return this.minus( x.times(y) );\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new Big whose value is the value of this Big plus the value\r\n     * of Big y.\r\n     */\r\n    P.add = P.plus = function (y) {\r\n        var t,\r\n            x = this,\r\n            Big = x.constructor,\r\n            a = x.s,\r\n            b = (y = new Big(y)).s;\r\n\r\n        // Signs differ?\r\n        if (a != b) {\r\n            y.s = -b;\r\n            return x.minus(y);\r\n        }\r\n\r\n        var xe = x.e,\r\n            xc = x.c,\r\n            ye = y.e,\r\n            yc = y.c;\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n            // y is non-zero? x is non-zero? Or both are zero.\r\n            return yc[0] ? y : new Big(xc[0] ? x : a * 0);\r\n        }\r\n        xc = xc.slice();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        // Note: Faster to use reverse then do unshifts.\r\n        if (a = xe - ye) {\r\n\r\n            if (a > 0) {\r\n                ye = xe;\r\n                t = yc;\r\n            } else {\r\n                a = -a;\r\n                t = xc;\r\n            }\r\n\r\n            t.reverse();\r\n            for (; a--; t.push(0)) {\r\n            }\r\n            t.reverse();\r\n        }\r\n\r\n        // Point xc to the longer array.\r\n        if (xc.length - yc.length < 0) {\r\n            t = yc;\r\n            yc = xc;\r\n            xc = t;\r\n        }\r\n        a = yc.length;\r\n\r\n        /*\r\n         * Only start adding at yc.length - 1 as the further digits of xc can be\r\n         * left as they are.\r\n         */\r\n        for (b = 0; a;) {\r\n            b = (xc[--a] = xc[a] + yc[a] + b) / 10 | 0;\r\n            xc[a] %= 10;\r\n        }\r\n\r\n        // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n\r\n        if (b) {\r\n            xc.unshift(b);\r\n            ++ye;\r\n        }\r\n\r\n         // Remove trailing zeros.\r\n        for (a = xc.length; xc[--a] === 0; xc.pop()) {\r\n        }\r\n\r\n        y.c = xc;\r\n        y.e = ye;\r\n\r\n        return y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a Big whose value is the value of this Big raised to the power n.\r\n     * If n is negative, round, if necessary, to a maximum of Big.DP decimal\r\n     * places using rounding mode Big.RM.\r\n     *\r\n     * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.\r\n     */\r\n    P.pow = function (n) {\r\n        var x = this,\r\n            one = new x.constructor(1),\r\n            y = one,\r\n            isNeg = n < 0;\r\n\r\n        if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) {\r\n            throwErr('!pow!');\r\n        }\r\n\r\n        n = isNeg ? -n : n;\r\n\r\n        for (;;) {\r\n\r\n            if (n & 1) {\r\n                y = y.times(x);\r\n            }\r\n            n >>= 1;\r\n\r\n            if (!n) {\r\n                break;\r\n            }\r\n            x = x.times(x);\r\n        }\r\n\r\n        return isNeg ? one.div(y) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new Big whose value is the value of this Big rounded to a\r\n     * maximum of dp decimal places using rounding mode rm.\r\n     * If dp is not specified, round to 0 decimal places.\r\n     * If rm is not specified, use Big.RM.\r\n     *\r\n     * [dp] {number} Integer, 0 to MAX_DP inclusive.\r\n     * [rm] 0, 1, 2 or 3 (ROUND_DOWN, ROUND_HALF_UP, ROUND_HALF_EVEN, ROUND_UP)\r\n     */\r\n    P.round = function (dp, rm) {\r\n        var x = this,\r\n            Big = x.constructor;\r\n\r\n        if (dp == null) {\r\n            dp = 0;\r\n        } else if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\r\n            throwErr('!round!');\r\n        }\r\n        rnd(x = new Big(x), dp, rm == null ? Big.RM : rm);\r\n\r\n        return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new Big whose value is the square root of the value of this Big,\r\n     * rounded, if necessary, to a maximum of Big.DP decimal places using\r\n     * rounding mode Big.RM.\r\n     */\r\n    P.sqrt = function () {\r\n        var estimate, r, approx,\r\n            x = this,\r\n            Big = x.constructor,\r\n            xc = x.c,\r\n            i = x.s,\r\n            e = x.e,\r\n            half = new Big('0.5');\r\n\r\n        // Zero?\r\n        if (!xc[0]) {\r\n            return new Big(x);\r\n        }\r\n\r\n        // If negative, throw NaN.\r\n        if (i < 0) {\r\n            throwErr(NaN);\r\n        }\r\n\r\n        // Estimate.\r\n        i = Math.sqrt(x.toString());\r\n\r\n        // Math.sqrt underflow/overflow?\r\n        // Pass x to Math.sqrt as integer, then adjust the result exponent.\r\n        if (i === 0 || i === 1 / 0) {\r\n            estimate = xc.join('');\r\n\r\n            if (!(estimate.length + e & 1)) {\r\n                estimate += '0';\r\n            }\r\n\r\n            r = new Big( Math.sqrt(estimate).toString() );\r\n            r.e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);\r\n        } else {\r\n            r = new Big(i.toString());\r\n        }\r\n\r\n        i = r.e + (Big.DP += 4);\r\n\r\n        // Newton-Raphson iteration.\r\n        do {\r\n            approx = r;\r\n            r = half.times( approx.plus( x.div(approx) ) );\r\n        } while ( approx.c.slice(0, i).join('') !==\r\n                       r.c.slice(0, i).join('') );\r\n\r\n        rnd(r, Big.DP -= 4, Big.RM);\r\n\r\n        return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new Big whose value is the value of this Big times the value of\r\n     * Big y.\r\n     */\r\n    P.mul = P.times = function (y) {\r\n        var c,\r\n            x = this,\r\n            Big = x.constructor,\r\n            xc = x.c,\r\n            yc = (y = new Big(y)).c,\r\n            a = xc.length,\r\n            b = yc.length,\r\n            i = x.e,\r\n            j = y.e;\r\n\r\n        // Determine sign of result.\r\n        y.s = x.s == y.s ? 1 : -1;\r\n\r\n        // Return signed 0 if either 0.\r\n        if (!xc[0] || !yc[0]) {\r\n            return new Big(y.s * 0);\r\n        }\r\n\r\n        // Initialise exponent of result as x.e + y.e.\r\n        y.e = i + j;\r\n\r\n        // If array xc has fewer digits than yc, swap xc and yc, and lengths.\r\n        if (a < b) {\r\n            c = xc;\r\n            xc = yc;\r\n            yc = c;\r\n            j = a;\r\n            a = b;\r\n            b = j;\r\n        }\r\n\r\n        // Initialise coefficient array of result with zeros.\r\n        for (c = new Array(j = a + b); j--; c[j] = 0) {\r\n        }\r\n\r\n        // Multiply.\r\n\r\n        // i is initially xc.length.\r\n        for (i = b; i--;) {\r\n            b = 0;\r\n\r\n            // a is yc.length.\r\n            for (j = a + i; j > i;) {\r\n\r\n                // Current sum of products at this digit position, plus carry.\r\n                b = c[j] + yc[i] * xc[j - i - 1] + b;\r\n                c[j--] = b % 10;\r\n\r\n                // carry\r\n                b = b / 10 | 0;\r\n            }\r\n            c[j] = (c[j] + b) % 10;\r\n        }\r\n\r\n        // Increment result exponent if there is a final carry.\r\n        if (b) {\r\n            ++y.e;\r\n        }\r\n\r\n        // Remove any leading zero.\r\n        if (!c[0]) {\r\n            c.shift();\r\n        }\r\n\r\n        // Remove trailing zeros.\r\n        for (i = c.length; !c[--i]; c.pop()) {\r\n        }\r\n        y.c = c;\r\n\r\n        return y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this Big.\r\n     * Return exponential notation if this Big has a positive exponent equal to\r\n     * or greater than Big.E_POS, or a negative exponent equal to or less than\r\n     * Big.E_NEG.\r\n     */\r\n    P.toString = P.valueOf = P.toJSON = function () {\r\n        var x = this,\r\n            Big = x.constructor,\r\n            e = x.e,\r\n            str = x.c.join(''),\r\n            strL = str.length;\r\n\r\n        // Exponential notation?\r\n        if (e <= Big.E_NEG || e >= Big.E_POS) {\r\n            str = str.charAt(0) + (strL > 1 ? '.' + str.slice(1) : '') +\r\n              (e < 0 ? 'e' : 'e+') + e;\r\n\r\n        // Negative exponent?\r\n        } else if (e < 0) {\r\n\r\n            // Prepend zeros.\r\n            for (; ++e; str = '0' + str) {\r\n            }\r\n            str = '0.' + str;\r\n\r\n        // Positive exponent?\r\n        } else if (e > 0) {\r\n\r\n            if (++e > strL) {\r\n\r\n                // Append zeros.\r\n                for (e -= strL; e-- ; str += '0') {\r\n                }\r\n            } else if (e < strL) {\r\n                str = str.slice(0, e) + '.' + str.slice(e);\r\n            }\r\n\r\n        // Exponent zero.\r\n        } else if (strL > 1) {\r\n            str = str.charAt(0) + '.' + str.slice(1);\r\n        }\r\n\r\n        // Avoid '-0'\r\n        return x.s < 0 && x.c[0] ? '-' + str : str;\r\n    };\r\n\r\n\r\n    /*\r\n     ***************************************************************************\r\n     * If toExponential, toFixed, toPrecision and format are not required they\r\n     * can safely be commented-out or deleted. No redundant code will be left.\r\n     * format is used only by toExponential, toFixed and toPrecision.\r\n     ***************************************************************************\r\n     */\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this Big in exponential\r\n     * notation to dp fixed decimal places and rounded, if necessary, using\r\n     * Big.RM.\r\n     *\r\n     * [dp] {number} Integer, 0 to MAX_DP inclusive.\r\n     */\r\n    P.toExponential = function (dp) {\r\n\r\n        if (dp == null) {\r\n            dp = this.c.length - 1;\r\n        } else if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\r\n            throwErr('!toExp!');\r\n        }\r\n\r\n        return format(this, dp, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this Big in normal notation\r\n     * to dp fixed decimal places and rounded, if necessary, using Big.RM.\r\n     *\r\n     * [dp] {number} Integer, 0 to MAX_DP inclusive.\r\n     */\r\n    P.toFixed = function (dp) {\r\n        var str,\r\n            x = this,\r\n            Big = x.constructor,\r\n            neg = Big.E_NEG,\r\n            pos = Big.E_POS;\r\n\r\n        // Prevent the possibility of exponential notation.\r\n        Big.E_NEG = -(Big.E_POS = 1 / 0);\r\n\r\n        if (dp == null) {\r\n            str = x.toString();\r\n        } else if (dp === ~~dp && dp >= 0 && dp <= MAX_DP) {\r\n            str = format(x, x.e + dp);\r\n\r\n            // (-0).toFixed() is '0', but (-0.1).toFixed() is '-0'.\r\n            // (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n            if (x.s < 0 && x.c[0] && str.indexOf('-') < 0) {\r\n        //E.g. -0.5 if rounded to -0 will cause toString to omit the minus sign.\r\n                str = '-' + str;\r\n            }\r\n        }\r\n        Big.E_NEG = neg;\r\n        Big.E_POS = pos;\r\n\r\n        if (!str) {\r\n            throwErr('!toFix!');\r\n        }\r\n\r\n        return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this Big rounded to sd\r\n     * significant digits using Big.RM. Use exponential notation if sd is less\r\n     * than the number of digits necessary to represent the integer part of the\r\n     * value in normal notation.\r\n     *\r\n     * sd {number} Integer, 1 to MAX_DP inclusive.\r\n     */\r\n    P.toPrecision = function (sd) {\r\n\r\n        if (sd == null) {\r\n            return this.toString();\r\n        } else if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {\r\n            throwErr('!toPre!');\r\n        }\r\n\r\n        return format(this, sd - 1, 2);\r\n    };\r\n\r\n\r\n    // Export\r\n\r\n\r\n    Big = bigFactory();\r\n\r\n    //AMD.\r\n    if (typeof define === 'function' && define.amd) {\r\n        define(function () {\r\n            return Big;\r\n        });\r\n\r\n    // Node and other CommonJS-like environments that support module.exports.\r\n    } else if (typeof module !== 'undefined' && module.exports) {\r\n        module.exports = Big;\r\n\r\n    //Browser.\r\n    } else {\r\n        global.Big = Big;\r\n    }\r\n})(this);\r\n"]}