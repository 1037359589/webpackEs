{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAqBA,SAAQ,MAAM,QAAO,SAAS,CAAA;AAC9B,SAAQ,UAAU,QAAO,WAAW,CAAA;AACpC,OAAO,aAAa,CAAA;AACpB,OAAO,aAAa,CAAA;AACpB,OAAO,QAAQ,CAAA;AACf,OAAO,cAAc,CAAA;;AAErB,SAAQ,MAAM,EAAE,OAAO,QAAO,SAAS,CAAA;AACvC,SAAQ,cAAc,QAAO,WAAW,CAAA;AACxC,SAAQ,cAAc,QAAO,YAAY,CAAA;AACzC,SAAQ,WAAW,QAAO,YAAY,CAAA;AACtC,SAAQ,IAAI,QAAO,QAAQ,CAAA;AAC3B,SAAQ,SAAS,EAAE,KAAK,IAAI,QAAQ,QAAO,aAAa,CAAA;AACxD,SAAQ,UAAU,EAAE,KAAK,IAAI,WAAW,QAAO,gBAAgB,CAAA;AAC/D,SAAQ,gBAAgB,EAAE,iBAAiB,QAAO,cAAc,CAAA;AAChE,SAAQ,KAAK,QAAO,YAAY,CAAA;AAChC,SAAQ,SAAS,EAAE,SAAS,EAAE,UAAU,QAAO,cAAc,CAAA;;AAE7D,OAAO,MAAM,OAAO,GAAG,OAAO,CAAA;;;;;;;;;AAAA,AAS9B,OAAO,SAAS,KAAK,CAAC,KAAK,EAAE,OAAO,EAAE;AACpC,MAAI,CAAC,GAAG,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,CAAA;AAC9B,MAAI,QAAQ,GAAG,CAAC,CAAC,GAAG;MAAE,QAAQ,GAAG,CAAC,CAAC,OAAO,CAAC,SAAS,IAAI,CAAC,CAAC,WAAW,EAAE,CAAA;AACvE,GAAC,CAAC,SAAS,EAAE,CAAA;AACb,SAAO,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,IAAI,CAAC,CAAC,WAAW,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAA;CAC/E;;;;;;AAAA,AAMD,OAAO,SAAS,iBAAiB,CAAC,KAAK,EAAE,GAAG,EAAE,OAAO,EAAE;AACrD,MAAI,CAAC,GAAG,MAAM,CAAC,OAAO,EAAE,KAAK,EAAE,GAAG,CAAC,CAAA;AACnC,GAAC,CAAC,SAAS,EAAE,CAAA;AACb,SAAO,CAAC,CAAC,eAAe,EAAE,CAAA;CAC3B;;;;;AAAA,AAKD,OAAO,SAAS,SAAS,CAAC,KAAK,EAAE,OAAO,EAAE;AACxC,SAAO,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,CAAA;CAC9B;;AAED,SAAS,MAAM,CAAC,OAAO,EAAE,KAAK,EAAE;AAC9B,SAAO,IAAI,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC,CAAA;CACtD","file":"index-compiled.js","sourcesContent":["// Acorn is a tiny, fast JavaScript parser written in JavaScript.\n//\n// Acorn was written by Marijn Haverbeke, Ingvar Stepanyan, and\n// various contributors and released under an MIT license.\n//\n// Git repositories for Acorn are available at\n//\n//     http://marijnhaverbeke.nl/git/acorn\n//     https://github.com/marijnh/acorn.git\n//\n// Please use the [github bug tracker][ghbt] to report issues.\n//\n// [ghbt]: https://github.com/marijnh/acorn/issues\n//\n// This file defines the main parser interface. The library also comes\n// with a [error-tolerant parser][dammit] and an\n// [abstract syntax tree walker][walk], defined in other files.\n//\n// [dammit]: acorn_loose.js\n// [walk]: util/walk.js\n\nimport {Parser} from \"./state\"\nimport {getOptions} from \"./options\"\nimport \"./parseutil\"\nimport \"./statement\"\nimport \"./lval\"\nimport \"./expression\"\n\nexport {Parser, plugins} from \"./state\"\nexport {defaultOptions} from \"./options\"\nexport {SourceLocation} from \"./location\"\nexport {getLineInfo} from \"./location\"\nexport {Node} from \"./node\"\nexport {TokenType, types as tokTypes} from \"./tokentype\"\nexport {TokContext, types as tokContexts} from \"./tokencontext\"\nexport {isIdentifierChar, isIdentifierStart} from \"./identifier\"\nexport {Token} from \"./tokenize\"\nexport {isNewLine, lineBreak, lineBreakG} from \"./whitespace\"\n\nexport const version = \"1.2.2\"\n\n// The main exported interface (under `self.acorn` when in the\n// browser) is a `parse` function that takes a code string and\n// returns an abstract syntax tree as specified by [Mozilla parser\n// API][api].\n//\n// [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API\n\nexport function parse(input, options) {\n  let p = parser(options, input)\n  let startPos = p.pos, startLoc = p.options.locations && p.curPosition()\n  p.nextToken()\n  return p.parseTopLevel(p.options.program || p.startNodeAt(startPos, startLoc))\n}\n\n// This function tries to parse a single expression at a given\n// offset in a string. Useful for parsing mixed-language formats\n// that embed JavaScript expressions.\n\nexport function parseExpressionAt(input, pos, options) {\n  let p = parser(options, input, pos)\n  p.nextToken()\n  return p.parseExpression()\n}\n\n// Acorn is organized as a tokenizer and a recursive-descent parser.\n// The `tokenize` export provides an interface to the tokenizer.\n\nexport function tokenizer(input, options) {\n  return parser(options, input)\n}\n\nfunction parser(options, input) {\n  return new Parser(getOptions(options), String(input))\n}\n"]}