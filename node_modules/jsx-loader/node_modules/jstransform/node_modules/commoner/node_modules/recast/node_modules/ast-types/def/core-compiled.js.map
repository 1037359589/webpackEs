{"version":3,"sources":["core.js"],"names":[],"mappings":"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","file":"core-compiled.js","sourcesContent":["var types = require(\"../lib/types\");\nvar Type = types.Type;\nvar def = Type.def;\nvar or = Type.or;\nvar shared = require(\"../lib/shared\");\nvar defaults = shared.defaults;\nvar geq = shared.geq;\n\n// Abstract supertype of all syntactic entities that are allowed to have a\n// .loc field.\ndef(\"Printable\")\n    .field(\"loc\", or(\n        def(\"SourceLocation\"),\n        null\n    ), defaults[\"null\"], true);\n\ndef(\"Node\")\n    .bases(\"Printable\")\n    .field(\"type\", String)\n    .field(\"comments\", or(\n        [def(\"Comment\")],\n        null\n    ), defaults[\"null\"], true);\n\ndef(\"SourceLocation\")\n    .build(\"start\", \"end\", \"source\")\n    .field(\"start\", def(\"Position\"))\n    .field(\"end\", def(\"Position\"))\n    .field(\"source\", or(String, null), defaults[\"null\"]);\n\ndef(\"Position\")\n    .build(\"line\", \"column\")\n    .field(\"line\", geq(1))\n    .field(\"column\", geq(0));\n\ndef(\"File\")\n    .bases(\"Node\")\n    .build(\"program\")\n    .field(\"program\", def(\"Program\"));\n\ndef(\"Program\")\n    .bases(\"Node\")\n    .build(\"body\")\n    .field(\"body\", [def(\"Statement\")]);\n\ndef(\"Function\")\n    .bases(\"Node\")\n    .field(\"id\", or(def(\"Identifier\"), null), defaults[\"null\"])\n    .field(\"params\", [def(\"Pattern\")])\n    .field(\"body\", def(\"BlockStatement\"));\n\ndef(\"Statement\").bases(\"Node\");\n\n// The empty .build() here means that an EmptyStatement can be constructed\n// (i.e. it's not abstract) but that it needs no arguments.\ndef(\"EmptyStatement\").bases(\"Statement\").build();\n\ndef(\"BlockStatement\")\n    .bases(\"Statement\")\n    .build(\"body\")\n    .field(\"body\", [def(\"Statement\")]);\n\n// TODO Figure out how to silently coerce Expressions to\n// ExpressionStatements where a Statement was expected.\ndef(\"ExpressionStatement\")\n    .bases(\"Statement\")\n    .build(\"expression\")\n    .field(\"expression\", def(\"Expression\"));\n\ndef(\"IfStatement\")\n    .bases(\"Statement\")\n    .build(\"test\", \"consequent\", \"alternate\")\n    .field(\"test\", def(\"Expression\"))\n    .field(\"consequent\", def(\"Statement\"))\n    .field(\"alternate\", or(def(\"Statement\"), null), defaults[\"null\"]);\n\ndef(\"LabeledStatement\")\n    .bases(\"Statement\")\n    .build(\"label\", \"body\")\n    .field(\"label\", def(\"Identifier\"))\n    .field(\"body\", def(\"Statement\"));\n\ndef(\"BreakStatement\")\n    .bases(\"Statement\")\n    .build(\"label\")\n    .field(\"label\", or(def(\"Identifier\"), null), defaults[\"null\"]);\n\ndef(\"ContinueStatement\")\n    .bases(\"Statement\")\n    .build(\"label\")\n    .field(\"label\", or(def(\"Identifier\"), null), defaults[\"null\"]);\n\ndef(\"WithStatement\")\n    .bases(\"Statement\")\n    .build(\"object\", \"body\")\n    .field(\"object\", def(\"Expression\"))\n    .field(\"body\", def(\"Statement\"));\n\ndef(\"SwitchStatement\")\n    .bases(\"Statement\")\n    .build(\"discriminant\", \"cases\", \"lexical\")\n    .field(\"discriminant\", def(\"Expression\"))\n    .field(\"cases\", [def(\"SwitchCase\")])\n    .field(\"lexical\", Boolean, defaults[\"false\"]);\n\ndef(\"ReturnStatement\")\n    .bases(\"Statement\")\n    .build(\"argument\")\n    .field(\"argument\", or(def(\"Expression\"), null));\n\ndef(\"ThrowStatement\")\n    .bases(\"Statement\")\n    .build(\"argument\")\n    .field(\"argument\", def(\"Expression\"));\n\ndef(\"TryStatement\")\n    .bases(\"Statement\")\n    .build(\"block\", \"handler\", \"finalizer\")\n    .field(\"block\", def(\"BlockStatement\"))\n    .field(\"handler\", or(def(\"CatchClause\"), null), function() {\n        return this.handlers && this.handlers[0] || null;\n    })\n    .field(\"handlers\", [def(\"CatchClause\")], function() {\n        return this.handler ? [this.handler] : [];\n    }, true) // Indicates this field is hidden from eachField iteration.\n    .field(\"guardedHandlers\", [def(\"CatchClause\")], defaults.emptyArray)\n    .field(\"finalizer\", or(def(\"BlockStatement\"), null), defaults[\"null\"]);\n\ndef(\"CatchClause\")\n    .bases(\"Node\")\n    .build(\"param\", \"guard\", \"body\")\n    .field(\"param\", def(\"Pattern\"))\n    .field(\"guard\", or(def(\"Expression\"), null), defaults[\"null\"])\n    .field(\"body\", def(\"BlockStatement\"));\n\ndef(\"WhileStatement\")\n    .bases(\"Statement\")\n    .build(\"test\", \"body\")\n    .field(\"test\", def(\"Expression\"))\n    .field(\"body\", def(\"Statement\"));\n\ndef(\"DoWhileStatement\")\n    .bases(\"Statement\")\n    .build(\"body\", \"test\")\n    .field(\"body\", def(\"Statement\"))\n    .field(\"test\", def(\"Expression\"));\n\ndef(\"ForStatement\")\n    .bases(\"Statement\")\n    .build(\"init\", \"test\", \"update\", \"body\")\n    .field(\"init\", or(\n        def(\"VariableDeclaration\"),\n        def(\"Expression\"),\n        null))\n    .field(\"test\", or(def(\"Expression\"), null))\n    .field(\"update\", or(def(\"Expression\"), null))\n    .field(\"body\", def(\"Statement\"));\n\ndef(\"ForInStatement\")\n    .bases(\"Statement\")\n    .build(\"left\", \"right\", \"body\")\n    .field(\"left\", or(\n        def(\"VariableDeclaration\"),\n        def(\"Expression\")))\n    .field(\"right\", def(\"Expression\"))\n    .field(\"body\", def(\"Statement\"));\n\ndef(\"DebuggerStatement\").bases(\"Statement\").build();\n\ndef(\"Declaration\").bases(\"Statement\");\n\ndef(\"FunctionDeclaration\")\n    .bases(\"Function\", \"Declaration\")\n    .build(\"id\", \"params\", \"body\")\n    .field(\"id\", def(\"Identifier\"));\n\ndef(\"FunctionExpression\")\n    .bases(\"Function\", \"Expression\")\n    .build(\"id\", \"params\", \"body\");\n\ndef(\"VariableDeclaration\")\n    .bases(\"Declaration\")\n    .build(\"kind\", \"declarations\")\n    .field(\"kind\", or(\"var\", \"let\", \"const\"))\n    .field(\"declarations\", [def(\"VariableDeclarator\")]);\n\ndef(\"VariableDeclarator\")\n    .bases(\"Node\")\n    .build(\"id\", \"init\")\n    .field(\"id\", def(\"Pattern\"))\n    .field(\"init\", or(def(\"Expression\"), null));\n\n// TODO Are all Expressions really Patterns?\ndef(\"Expression\").bases(\"Node\", \"Pattern\");\n\ndef(\"ThisExpression\").bases(\"Expression\").build();\n\ndef(\"ArrayExpression\")\n    .bases(\"Expression\")\n    .build(\"elements\")\n    .field(\"elements\", [or(def(\"Expression\"), null)]);\n\ndef(\"ObjectExpression\")\n    .bases(\"Expression\")\n    .build(\"properties\")\n    .field(\"properties\", [def(\"Property\")]);\n\n// TODO Not in the Mozilla Parser API, but used by Esprima.\ndef(\"Property\")\n    .bases(\"Node\") // Want to be able to visit Property Nodes.\n    .build(\"kind\", \"key\", \"value\")\n    .field(\"kind\", or(\"init\", \"get\", \"set\"))\n    .field(\"key\", or(def(\"Literal\"), def(\"Identifier\")))\n    .field(\"value\", def(\"Expression\"));\n\ndef(\"SequenceExpression\")\n    .bases(\"Expression\")\n    .build(\"expressions\")\n    .field(\"expressions\", [def(\"Expression\")]);\n\nvar UnaryOperator = or(\n    \"-\", \"+\", \"!\", \"~\",\n    \"typeof\", \"void\", \"delete\");\n\ndef(\"UnaryExpression\")\n    .bases(\"Expression\")\n    .build(\"operator\", \"argument\", \"prefix\")\n    .field(\"operator\", UnaryOperator)\n    .field(\"argument\", def(\"Expression\"))\n    // Esprima doesn't bother with this field, presumably because it's\n    // always true for unary operators.\n    .field(\"prefix\", Boolean, defaults[\"true\"]);\n\nvar BinaryOperator = or(\n    \"==\", \"!=\", \"===\", \"!==\",\n    \"<\", \"<=\", \">\", \">=\",\n    \"<<\", \">>\", \">>>\",\n    \"+\", \"-\", \"*\", \"/\", \"%\",\n    \"&\", // TODO Missing from the Parser API.\n    \"|\", \"^\", \"in\",\n    \"instanceof\", \"..\");\n\ndef(\"BinaryExpression\")\n    .bases(\"Expression\")\n    .build(\"operator\", \"left\", \"right\")\n    .field(\"operator\", BinaryOperator)\n    .field(\"left\", def(\"Expression\"))\n    .field(\"right\", def(\"Expression\"));\n\nvar AssignmentOperator = or(\n    \"=\", \"+=\", \"-=\", \"*=\", \"/=\", \"%=\",\n    \"<<=\", \">>=\", \">>>=\",\n    \"|=\", \"^=\", \"&=\");\n\ndef(\"AssignmentExpression\")\n    .bases(\"Expression\")\n    .build(\"operator\", \"left\", \"right\")\n    .field(\"operator\", AssignmentOperator)\n    .field(\"left\", def(\"Pattern\"))\n    .field(\"right\", def(\"Expression\"));\n\nvar UpdateOperator = or(\"++\", \"--\");\n\ndef(\"UpdateExpression\")\n    .bases(\"Expression\")\n    .build(\"operator\", \"argument\", \"prefix\")\n    .field(\"operator\", UpdateOperator)\n    .field(\"argument\", def(\"Expression\"))\n    .field(\"prefix\", Boolean);\n\nvar LogicalOperator = or(\"||\", \"&&\");\n\ndef(\"LogicalExpression\")\n    .bases(\"Expression\")\n    .build(\"operator\", \"left\", \"right\")\n    .field(\"operator\", LogicalOperator)\n    .field(\"left\", def(\"Expression\"))\n    .field(\"right\", def(\"Expression\"));\n\ndef(\"ConditionalExpression\")\n    .bases(\"Expression\")\n    .build(\"test\", \"consequent\", \"alternate\")\n    .field(\"test\", def(\"Expression\"))\n    .field(\"consequent\", def(\"Expression\"))\n    .field(\"alternate\", def(\"Expression\"));\n\ndef(\"NewExpression\")\n    .bases(\"Expression\")\n    .build(\"callee\", \"arguments\")\n    .field(\"callee\", def(\"Expression\"))\n    // The Mozilla Parser API gives this type as [or(def(\"Expression\"),\n    // null)], but null values don't really make sense at the call site.\n    // TODO Report this nonsense.\n    .field(\"arguments\", [def(\"Expression\")]);\n\ndef(\"CallExpression\")\n    .bases(\"Expression\")\n    .build(\"callee\", \"arguments\")\n    .field(\"callee\", def(\"Expression\"))\n    // See comment for NewExpression above.\n    .field(\"arguments\", [def(\"Expression\")]);\n\ndef(\"MemberExpression\")\n    .bases(\"Expression\")\n    .build(\"object\", \"property\", \"computed\")\n    .field(\"object\", def(\"Expression\"))\n    .field(\"property\", or(def(\"Identifier\"), def(\"Expression\")))\n    .field(\"computed\", Boolean, function(){\n        var type = this.property.type;\n        if (type === 'Literal' ||\n            type === 'MemberExpression' ||\n            type === 'BinaryExpression') {\n            return true;\n        }\n        return false;\n    });\n\ndef(\"Pattern\").bases(\"Node\");\n\ndef(\"SwitchCase\")\n    .bases(\"Node\")\n    .build(\"test\", \"consequent\")\n    .field(\"test\", or(def(\"Expression\"), null))\n    .field(\"consequent\", [def(\"Statement\")]);\n\ndef(\"Identifier\")\n    // But aren't Expressions and Patterns already Nodes? TODO Report this.\n    .bases(\"Node\", \"Expression\", \"Pattern\")\n    .build(\"name\")\n    .field(\"name\", String);\n\ndef(\"Literal\")\n    // But aren't Expressions already Nodes? TODO Report this.\n    .bases(\"Node\", \"Expression\")\n    .build(\"value\")\n    .field(\"value\", or(String, Boolean, null, Number, RegExp))\n    .field(\"regex\", or({\n        pattern: String,\n        flags: String\n    }, null), function() {\n        if (this.value instanceof RegExp) {\n            var flags = \"\";\n\n            if (this.value.ignoreCase) flags += \"i\";\n            if (this.value.multiline) flags += \"m\";\n            if (this.value.global) flags += \"g\";\n\n            return {\n                pattern: this.value.source,\n                flags: flags\n            };\n        }\n\n        return null;\n    });\n\n// Abstract (non-buildable) comment supertype. Not a Node.\ndef(\"Comment\")\n    .bases(\"Printable\")\n    .field(\"value\", String)\n    // A .leading comment comes before the node, whereas a .trailing\n    // comment comes after it. These two fields should not both be true,\n    // but they might both be false when the comment falls inside a node\n    // and the node has no children for the comment to lead or trail,\n    // e.g. { /*dangling*/ }.\n    .field(\"leading\", Boolean, defaults[\"true\"])\n    .field(\"trailing\", Boolean, defaults[\"false\"]);\n"]}