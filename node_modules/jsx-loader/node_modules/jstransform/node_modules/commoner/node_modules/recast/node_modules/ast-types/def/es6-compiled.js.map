{"version":3,"sources":["es6.js"],"names":[],"mappings":"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","file":"es6-compiled.js","sourcesContent":["require(\"./core\");\nvar types = require(\"../lib/types\");\nvar def = types.Type.def;\nvar or = types.Type.or;\nvar defaults = require(\"../lib/shared\").defaults;\n\ndef(\"Function\")\n    .field(\"generator\", Boolean, defaults[\"false\"])\n    .field(\"expression\", Boolean, defaults[\"false\"])\n    .field(\"defaults\", [or(def(\"Expression\"), null)], defaults.emptyArray)\n    // TODO This could be represented as a RestElement in .params.\n    .field(\"rest\", or(def(\"Identifier\"), null), defaults[\"null\"]);\n\n// The ESTree way of representing a ...rest parameter.\ndef(\"RestElement\")\n    .bases(\"Pattern\")\n    .build(\"argument\")\n    .field(\"argument\", def(\"Pattern\"));\n\ndef(\"SpreadElementPattern\")\n    .bases(\"Pattern\")\n    .build(\"argument\")\n    .field(\"argument\", def(\"Pattern\"));\n\ndef(\"FunctionDeclaration\")\n    .build(\"id\", \"params\", \"body\", \"generator\", \"expression\");\n\ndef(\"FunctionExpression\")\n    .build(\"id\", \"params\", \"body\", \"generator\", \"expression\");\n\n// The Parser API calls this ArrowExpression, but Esprima and all other\n// actual parsers use ArrowFunctionExpression.\ndef(\"ArrowFunctionExpression\")\n    .bases(\"Function\", \"Expression\")\n    .build(\"params\", \"body\", \"expression\")\n    // The forced null value here is compatible with the overridden\n    // definition of the \"id\" field in the Function interface.\n    .field(\"id\", null, defaults[\"null\"])\n    // Arrow function bodies are allowed to be expressions.\n    .field(\"body\", or(def(\"BlockStatement\"), def(\"Expression\")))\n    // The current spec forbids arrow generators, so I have taken the\n    // liberty of enforcing that. TODO Report this.\n    .field(\"generator\", false, defaults[\"false\"]);\n\ndef(\"YieldExpression\")\n    .bases(\"Expression\")\n    .build(\"argument\", \"delegate\")\n    .field(\"argument\", or(def(\"Expression\"), null))\n    .field(\"delegate\", Boolean, defaults[\"false\"]);\n\ndef(\"GeneratorExpression\")\n    .bases(\"Expression\")\n    .build(\"body\", \"blocks\", \"filter\")\n    .field(\"body\", def(\"Expression\"))\n    .field(\"blocks\", [def(\"ComprehensionBlock\")])\n    .field(\"filter\", or(def(\"Expression\"), null));\n\ndef(\"ComprehensionExpression\")\n    .bases(\"Expression\")\n    .build(\"body\", \"blocks\", \"filter\")\n    .field(\"body\", def(\"Expression\"))\n    .field(\"blocks\", [def(\"ComprehensionBlock\")])\n    .field(\"filter\", or(def(\"Expression\"), null));\n\ndef(\"ComprehensionBlock\")\n    .bases(\"Node\")\n    .build(\"left\", \"right\", \"each\")\n    .field(\"left\", def(\"Pattern\"))\n    .field(\"right\", def(\"Expression\"))\n    .field(\"each\", Boolean);\n\ndef(\"Property\")\n    .field(\"key\", or(def(\"Literal\"), def(\"Identifier\"), def(\"Expression\")))\n    .field(\"value\", or(def(\"Expression\"), def(\"Pattern\")))\n    .field(\"method\", Boolean, defaults[\"false\"])\n    .field(\"shorthand\", Boolean, defaults[\"false\"])\n    .field(\"computed\", Boolean, defaults[\"false\"]);\n\ndef(\"PropertyPattern\")\n    .bases(\"Pattern\")\n    .build(\"key\", \"pattern\")\n    .field(\"key\", or(def(\"Literal\"), def(\"Identifier\"), def(\"Expression\")))\n    .field(\"pattern\", def(\"Pattern\"))\n    .field(\"computed\", Boolean, defaults[\"false\"]);\n\ndef(\"ObjectPattern\")\n    .bases(\"Pattern\")\n    .build(\"properties\")\n    .field(\"properties\", [or(def(\"PropertyPattern\"), def(\"Property\"))]);\n\ndef(\"ArrayPattern\")\n    .bases(\"Pattern\")\n    .build(\"elements\")\n    .field(\"elements\", [or(def(\"Pattern\"), null)]);\n\ndef(\"MethodDefinition\")\n    .bases(\"Declaration\")\n    .build(\"kind\", \"key\", \"value\", \"static\")\n    .field(\"kind\", or(\"constructor\", \"method\", \"get\", \"set\"))\n    .field(\"key\", or(def(\"Literal\"), def(\"Identifier\"), def(\"Expression\")))\n    .field(\"value\", def(\"Function\"))\n    .field(\"computed\", Boolean, defaults[\"false\"])\n    .field(\"static\", Boolean, defaults[\"false\"]);\n\ndef(\"SpreadElement\")\n    .bases(\"Node\")\n    .build(\"argument\")\n    .field(\"argument\", def(\"Expression\"));\n\ndef(\"ArrayExpression\")\n    .field(\"elements\", [or(\n        def(\"Expression\"),\n        def(\"SpreadElement\"),\n        def(\"RestElement\"),\n        null\n    )]);\n\ndef(\"NewExpression\")\n    .field(\"arguments\", [or(def(\"Expression\"), def(\"SpreadElement\"))]);\n\ndef(\"CallExpression\")\n    .field(\"arguments\", [or(def(\"Expression\"), def(\"SpreadElement\"))]);\n\n// Note: this node type is *not* an AssignmentExpression with a Pattern on\n// the left-hand side! The existing AssignmentExpression type already\n// supports destructuring assignments. AssignmentPattern nodes may appear\n// wherever a Pattern is allowed, and the right-hand side represents a\n// default value to be destructured against the left-hand side, if no\n// value is otherwise provided. For example: default parameter values.\ndef(\"AssignmentPattern\")\n    .bases(\"Pattern\")\n    .build(\"left\", \"right\")\n    .field(\"left\", def(\"Pattern\"))\n    .field(\"right\", def(\"Expression\"));\n\nvar ClassBodyElement = or(\n    def(\"MethodDefinition\"),\n    def(\"VariableDeclarator\"),\n    def(\"ClassPropertyDefinition\"),\n    def(\"ClassProperty\")\n);\n\ndef(\"ClassProperty\")\n  .bases(\"Declaration\")\n  .build(\"key\")\n  .field(\"key\", or(def(\"Literal\"), def(\"Identifier\"), def(\"Expression\")))\n  .field(\"computed\", Boolean, defaults[\"false\"]);\n\ndef(\"ClassPropertyDefinition\") // static property\n    .bases(\"Declaration\")\n    .build(\"definition\")\n    // Yes, Virginia, circular definitions are permitted.\n    .field(\"definition\", ClassBodyElement);\n\ndef(\"ClassBody\")\n    .bases(\"Declaration\")\n    .build(\"body\")\n    .field(\"body\", [ClassBodyElement]);\n\ndef(\"ClassDeclaration\")\n    .bases(\"Declaration\")\n    .build(\"id\", \"body\", \"superClass\")\n    .field(\"id\", or(def(\"Identifier\"), null))\n    .field(\"body\", def(\"ClassBody\"))\n    .field(\"superClass\", or(def(\"Expression\"), null), defaults[\"null\"]);\n\ndef(\"ClassExpression\")\n    .bases(\"Expression\")\n    .build(\"id\", \"body\", \"superClass\")\n    .field(\"id\", or(def(\"Identifier\"), null), defaults[\"null\"])\n    .field(\"body\", def(\"ClassBody\"))\n    .field(\"superClass\", or(def(\"Expression\"), null), defaults[\"null\"])\n    .field(\"implements\", [def(\"ClassImplements\")], defaults.emptyArray);\n\ndef(\"ClassImplements\")\n    .bases(\"Node\")\n    .build(\"id\")\n    .field(\"id\", def(\"Identifier\"))\n    .field(\"superClass\", or(def(\"Expression\"), null), defaults[\"null\"]);\n\n// Specifier and ModuleSpecifier are abstract non-standard types\n// introduced for definitional convenience.\ndef(\"Specifier\").bases(\"Node\");\n\n// This supertype is shared/abused by both def/babel.js and\n// def/esprima.js. In the future, it will be possible to load only one set\n// of definitions appropriate for a given parser, but until then we must\n// rely on default functions to reconcile the conflicting AST formats.\ndef(\"ModuleSpecifier\")\n    .bases(\"Specifier\")\n    // This local field is used by Babel/Acorn. It should not technically\n    // be optional in the Babel/Acorn AST format, but it must be optional\n    // in the Esprima AST format.\n    .field(\"local\", or(def(\"Identifier\"), null), defaults[\"null\"])\n    // The id and name fields are used by Esprima. The id field should not\n    // technically be optional in the Esprima AST format, but it must be\n    // optional in the Babel/Acorn AST format.\n    .field(\"id\", or(def(\"Identifier\"), null), defaults[\"null\"])\n    .field(\"name\", or(def(\"Identifier\"), null), defaults[\"null\"]);\n\ndef(\"TaggedTemplateExpression\")\n    .bases(\"Expression\")\n    .build(\"tag\", \"quasi\")\n    .field(\"tag\", def(\"Expression\"))\n    .field(\"quasi\", def(\"TemplateLiteral\"));\n\ndef(\"TemplateLiteral\")\n    .bases(\"Expression\")\n    .build(\"quasis\", \"expressions\")\n    .field(\"quasis\", [def(\"TemplateElement\")])\n    .field(\"expressions\", [def(\"Expression\")]);\n\ndef(\"TemplateElement\")\n    .bases(\"Node\")\n    .build(\"value\", \"tail\")\n    .field(\"value\", {\"cooked\": String, \"raw\": String})\n    .field(\"tail\", Boolean);\n"]}