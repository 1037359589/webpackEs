{"version":3,"sources":["mozilla.js"],"names":[],"mappings":"AAAA,OAAO,CAAC,QAAQ,CAAC,CAAC;AAClB,IAAI,KAAK,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;AACpC,IAAI,GAAG,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC;AACzB,IAAI,EAAE,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC;AACvB,IAAI,MAAM,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;AACtC,IAAI,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC;AACrB,IAAI,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;;AAE/B,GAAG,CAAC,UAAU;;AAAC,CAEV,KAAK,CAAC,MAAM,EAAE,EAAE,CAAC,GAAG,CAAC,gBAAgB,CAAC,EAAE,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;;AAEjE,GAAG,CAAC,gBAAgB,CAAC,CAChB,KAAK,CAAC,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,CAAC,CACtC,KAAK,CAAC,MAAM,EAAE,OAAO,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;;AAE/C,GAAG,CAAC,gBAAgB,CAAC,CAChB,KAAK,CAAC,WAAW,CAAC,CAClB,KAAK,CAAC,MAAM,EAAE,OAAO,EAAE,MAAM,CAAC,CAC9B,KAAK,CAAC,MAAM,EAAE,EAAE,CACb,GAAG,CAAC,qBAAqB,CAAC,EAC1B,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC,CACtB,KAAK,CAAC,OAAO,EAAE,GAAG,CAAC,YAAY,CAAC,CAAC,CACjC,KAAK,CAAC,MAAM,EAAE,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC;;AAErC,GAAG,CAAC,cAAc,CAAC,CACd,KAAK,CAAC,WAAW,CAAC,CAClB,KAAK,CAAC,MAAM,EAAE,MAAM;;AAAC,CAErB,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAC1C,KAAK,CAAC,MAAM,EAAE,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC;;AAErC,GAAG,CAAC,eAAe,CAAC,CACf,KAAK,CAAC,YAAY,CAAC,CACnB,KAAK,CAAC,MAAM,EAAE,MAAM;;AAAC,CAErB,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAC1C,KAAK,CAAC,MAAM,EAAE,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC;;AAEtC,GAAG,CAAC,iBAAiB,CAAC,CACjB,KAAK,CAAC,YAAY,CAAC,CACnB,KAAK,CAAC,OAAO,EAAE,YAAY,CAAC,CAC5B,KAAK,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CACtB,KAAK,CAAC,YAAY,EAAE,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC;;AAEzC,GAAG,CAAC,sBAAsB,CAAC,CACtB,KAAK,CAAC,YAAY,CAAC,CACnB,KAAK,CAAC,OAAO,CAAC,CACd,KAAK,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC","file":"mozilla-compiled.js","sourcesContent":["require(\"./core\");\nvar types = require(\"../lib/types\");\nvar def = types.Type.def;\nvar or = types.Type.or;\nvar shared = require(\"../lib/shared\");\nvar geq = shared.geq;\nvar defaults = shared.defaults;\n\ndef(\"Function\")\n    // SpiderMonkey allows expression closures: function(x) x+1\n    .field(\"body\", or(def(\"BlockStatement\"), def(\"Expression\")));\n\ndef(\"ForInStatement\")\n    .build(\"left\", \"right\", \"body\", \"each\")\n    .field(\"each\", Boolean, defaults[\"false\"]);\n\ndef(\"ForOfStatement\")\n    .bases(\"Statement\")\n    .build(\"left\", \"right\", \"body\")\n    .field(\"left\", or(\n        def(\"VariableDeclaration\"),\n        def(\"Expression\")))\n    .field(\"right\", def(\"Expression\"))\n    .field(\"body\", def(\"Statement\"));\n\ndef(\"LetStatement\")\n    .bases(\"Statement\")\n    .build(\"head\", \"body\")\n    // TODO Deviating from the spec by reusing VariableDeclarator here.\n    .field(\"head\", [def(\"VariableDeclarator\")])\n    .field(\"body\", def(\"Statement\"));\n\ndef(\"LetExpression\")\n    .bases(\"Expression\")\n    .build(\"head\", \"body\")\n    // TODO Deviating from the spec by reusing VariableDeclarator here.\n    .field(\"head\", [def(\"VariableDeclarator\")])\n    .field(\"body\", def(\"Expression\"));\n\ndef(\"GraphExpression\")\n    .bases(\"Expression\")\n    .build(\"index\", \"expression\")\n    .field(\"index\", geq(0))\n    .field(\"expression\", def(\"Literal\"));\n\ndef(\"GraphIndexExpression\")\n    .bases(\"Expression\")\n    .build(\"index\")\n    .field(\"index\", geq(0));\n"]}