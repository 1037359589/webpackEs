{"version":3,"sources":["equiv.js"],"names":[],"mappings":"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","file":"equiv-compiled.js","sourcesContent":["var types = require(\"../main\");\nvar getFieldNames = types.getFieldNames;\nvar getFieldValue = types.getFieldValue;\nvar isArray = types.builtInTypes.array;\nvar isObject = types.builtInTypes.object;\nvar isDate = types.builtInTypes.Date;\nvar isRegExp = types.builtInTypes.RegExp;\nvar hasOwn = Object.prototype.hasOwnProperty;\n\nfunction astNodesAreEquivalent(a, b, problemPath) {\n    if (isArray.check(problemPath)) {\n        problemPath.length = 0;\n    } else {\n        problemPath = null;\n    }\n\n    return areEquivalent(a, b, problemPath);\n}\n\nastNodesAreEquivalent.assert = function(a, b) {\n    var problemPath = [];\n    if (!astNodesAreEquivalent(a, b, problemPath)) {\n        if (problemPath.length === 0) {\n            if (a !== b) {\n                throw new Error(\"Nodes must be equal\");\n            }\n        } else {\n            throw new Error(\n                \"Nodes differ in the following path: \" +\n                    problemPath.map(subscriptForProperty).join(\"\")\n            );\n        }\n    }\n};\n\nfunction subscriptForProperty(property) {\n    if (/[_$a-z][_$a-z0-9]*/i.test(property)) {\n        return \".\" + property;\n    }\n    return \"[\" + JSON.stringify(property) + \"]\";\n}\n\nfunction areEquivalent(a, b, problemPath) {\n    if (a === b) {\n        return true;\n    }\n\n    if (isArray.check(a)) {\n        return arraysAreEquivalent(a, b, problemPath);\n    }\n\n    if (isObject.check(a)) {\n        return objectsAreEquivalent(a, b, problemPath);\n    }\n\n    if (isDate.check(a)) {\n        return isDate.check(b) && (+a === +b);\n    }\n\n    if (isRegExp.check(a)) {\n        return isRegExp.check(b) && (\n            a.source === b.source &&\n            a.global === b.global &&\n            a.multiline === b.multiline &&\n            a.ignoreCase === b.ignoreCase\n        );\n    }\n\n    return a == b;\n}\n\nfunction arraysAreEquivalent(a, b, problemPath) {\n    isArray.assert(a);\n    var aLength = a.length;\n\n    if (!isArray.check(b) || b.length !== aLength) {\n        if (problemPath) {\n            problemPath.push(\"length\");\n        }\n        return false;\n    }\n\n    for (var i = 0; i < aLength; ++i) {\n        if (problemPath) {\n            problemPath.push(i);\n        }\n\n        if (i in a !== i in b) {\n            return false;\n        }\n\n        if (!areEquivalent(a[i], b[i], problemPath)) {\n            return false;\n        }\n\n        if (problemPath) {\n            var problemPathTail = problemPath.pop();\n            if (problemPathTail !== i) {\n                throw new Error(\"\" + problemPathTail);\n            }\n        }\n    }\n\n    return true;\n}\n\nfunction objectsAreEquivalent(a, b, problemPath) {\n    isObject.assert(a);\n    if (!isObject.check(b)) {\n        return false;\n    }\n\n    // Fast path for a common property of AST nodes.\n    if (a.type !== b.type) {\n        if (problemPath) {\n            problemPath.push(\"type\");\n        }\n        return false;\n    }\n\n    var aNames = getFieldNames(a);\n    var aNameCount = aNames.length;\n\n    var bNames = getFieldNames(b);\n    var bNameCount = bNames.length;\n\n    if (aNameCount === bNameCount) {\n        for (var i = 0; i < aNameCount; ++i) {\n            var name = aNames[i];\n            var aChild = getFieldValue(a, name);\n            var bChild = getFieldValue(b, name);\n\n            if (problemPath) {\n                problemPath.push(name);\n            }\n\n            if (!areEquivalent(aChild, bChild, problemPath)) {\n                return false;\n            }\n\n            if (problemPath) {\n                var problemPathTail = problemPath.pop();\n                if (problemPathTail !== name) {\n                    throw new Error(\"\" + problemPathTail);\n                }\n            }\n        }\n\n        return true;\n    }\n\n    if (!problemPath) {\n        return false;\n    }\n\n    // Since aNameCount !== bNameCount, we need to find some name that's\n    // missing in aNames but present in bNames, or vice-versa.\n\n    var seenNames = Object.create(null);\n\n    for (i = 0; i < aNameCount; ++i) {\n        seenNames[aNames[i]] = true;\n    }\n\n    for (i = 0; i < bNameCount; ++i) {\n        name = bNames[i];\n\n        if (!hasOwn.call(seenNames, name)) {\n            problemPath.push(name);\n            return false;\n        }\n\n        delete seenNames[name];\n    }\n\n    for (name in seenNames) {\n        problemPath.push(name);\n        break;\n    }\n\n    return false;\n}\n\nmodule.exports = astNodesAreEquivalent;\n"]}