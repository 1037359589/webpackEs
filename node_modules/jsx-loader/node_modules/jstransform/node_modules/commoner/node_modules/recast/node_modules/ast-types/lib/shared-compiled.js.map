{"version":3,"sources":["shared.js"],"names":[],"mappings":"AAAA,IAAI,KAAK,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;AACpC,IAAI,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC;AACtB,IAAI,OAAO,GAAG,KAAK,CAAC,YAAY,CAAC;AACjC,IAAI,QAAQ,GAAG,OAAO,CAAC,MAAM;;;;AAAC,AAI9B,OAAO,CAAC,GAAG,GAAG,UAAS,IAAI,EAAE;AACzB,WAAO,IAAI,IAAI,CAAC,UAAS,KAAK,EAAE;AAC5B,eAAO,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,IAAI,CAAC;KACjD,EAAE,QAAQ,GAAG,MAAM,GAAG,IAAI,CAAC,CAAC;CAChC;;;;AAAC,AAIF,OAAO,CAAC,QAAQ,GAAG;;;;AAIf,UAAM,EAAE,YAAW;AAAE,eAAO,IAAI,CAAA;KAAE;AAClC,gBAAY,EAAE,YAAW;AAAE,eAAO,EAAE,CAAA;KAAE;AACtC,WAAO,EAAE,YAAW;AAAE,eAAO,KAAK,CAAA;KAAE;AACpC,UAAM,EAAE,YAAW;AAAE,eAAO,IAAI,CAAA;KAAE;AAClC,eAAW,EAAE,YAAW,EAAE;CAC7B,CAAC;;AAEF,IAAI,gBAAgB,GAAG,IAAI,CAAC,EAAE,CAC1B,OAAO,CAAC,MAAM,EACd,OAAO,CAAC,MAAM,EACd,OAAO,CAAC,OAAO,EACf,OAAO,CAAC,IAAI,EACZ,OAAO,CAAC,SAAS,CACpB,CAAC;;AAEF,OAAO,CAAC,WAAW,GAAG,IAAI,IAAI,CAAC,UAAS,KAAK,EAAE;AAC3C,QAAI,KAAK,KAAK,IAAI,EACd,OAAO,IAAI,CAAC;AAChB,QAAI,IAAI,GAAG,OAAO,KAAK,CAAC;AACxB,WAAO,EAAE,IAAI,KAAK,QAAQ,IACjB,IAAI,KAAK,UAAU,CAAA,AAAC,CAAC;CACjC,EAAE,gBAAgB,CAAC,QAAQ,EAAE,CAAC,CAAC","file":"shared-compiled.js","sourcesContent":["var types = require(\"../lib/types\");\nvar Type = types.Type;\nvar builtin = types.builtInTypes;\nvar isNumber = builtin.number;\n\n// An example of constructing a new type with arbitrary constraints from\n// an existing type.\nexports.geq = function(than) {\n    return new Type(function(value) {\n        return isNumber.check(value) && value >= than;\n    }, isNumber + \" >= \" + than);\n};\n\n// Default value-returning functions that may optionally be passed as a\n// third argument to Def.prototype.field.\nexports.defaults = {\n    // Functions were used because (among other reasons) that's the most\n    // elegant way to allow for the emptyArray one always to give a new\n    // array instance.\n    \"null\": function() { return null },\n    \"emptyArray\": function() { return [] },\n    \"false\": function() { return false },\n    \"true\": function() { return true },\n    \"undefined\": function() {}\n};\n\nvar naiveIsPrimitive = Type.or(\n    builtin.string,\n    builtin.number,\n    builtin.boolean,\n    builtin.null,\n    builtin.undefined\n);\n\nexports.isPrimitive = new Type(function(value) {\n    if (value === null)\n        return true;\n    var type = typeof value;\n    return !(type === \"object\" ||\n             type === \"function\");\n}, naiveIsPrimitive.toString());\n"]}