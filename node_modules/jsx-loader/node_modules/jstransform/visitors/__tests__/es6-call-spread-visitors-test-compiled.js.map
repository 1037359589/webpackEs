{"version":3,"sources":["es6-call-spread-visitors-test.js"],"names":[],"mappings":"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","file":"es6-call-spread-visitors-test-compiled.js","sourcesContent":["/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails dmitrys@fb.com\n */\n\n/*jshint evil:true*/\n\nrequire('mock-modules').autoMockOff();\n\ndescribe('es6-call-spread-visitors', function() {\n  var transformFn;\n  var visitors;\n\n  beforeEach(function() {\n    require('mock-modules').dumpCache();\n    transformFn = require('../../src/jstransform').transform;\n\n    visitors = require('../es6-call-spread-visitors').visitorList;\n  });\n\n  function transform(code, options) {\n    return transformFn(visitors, code, options).code;\n  }\n\n  it('should spread given data with context', function() {\n    expect(transform('Math.max(1,\\t[2], 3, ...[4, 5, 6])'))\n      .toEqual('var $__0;($__0 = Math).max.apply($__0, [1,\\t[2], 3].concat([4, 5, 6]))');\n  });\n\n  it('should avoid unnecessary concat call', function() {\n    expect(transform('window.Math.max(...list)'))\n      .toEqual('var $__0;($__0 = window.Math).max.apply($__0, list)');\n  });\n\n  it('should default to undefined context', function() {\n    expect(transform('max(1, 2, ...list)'))\n      .toEqual('max.apply(undefined, [1, 2].concat(list))');\n  });\n\n  it('should handle computed method names', function() {\n    expect(transform('Math[\"m\" + (0 ? \"in\" : \"ax\")](1, 2, ...list)'))\n      .toEqual('var $__0;($__0 = Math)[\"m\" + (0 ? \"in\" : \"ax\")].apply($__0, [1, 2].concat(list))');\n  });\n\n  it('should handle immediately invoked function expressions', function() {\n    expect(transform('(function(a, b, c) { return a+b+c; })(1, 2, ...more)'))\n      .toEqual('(function(a, b, c) { return a+b+c; }).apply(undefined, [1, 2].concat(more))');\n  });\n\n  it('should spread while creating new instances', function() {\n    expect(transform('new Set(1, 2, ...list)'))\n      .toEqual('new (Function.prototype.bind.apply(Set, [null, 1, 2].concat(list)))');\n  });\n\n  it('should create temporary variables when necessary in program scope', function() {\n    expect(transform('foo().bar(arg1, arg2, ...more)'))\n      .toEqual('var $__0;($__0 = foo()).bar.apply($__0, [arg1, arg2].concat(more))');\n  });\n\n  it('should create temporary variables when necessary in function scope', function() {\n    expect(transform('function fn(){ return foo().bar(arg1, arg2, ...more); }'))\n      .toEqual('function fn(){var $__0; return ($__0 = foo()).bar.apply($__0, [arg1, arg2].concat(more)); }');\n  });\n\n  it('should not evaluate context more than once', function() {\n    var code = transform([\n      'var obj = {',\n      '  calls: 0,',\n      '  get context() {',\n      '    this.calls++;',\n      '    return {',\n      '      add: function(a, b) { return a + b; }',\n      '    };',\n      '  }',\n      '};',\n      'var nums = [1, 2];',\n      'obj.context.add(...nums);',\n      'obj.calls === 1;',\n    ].join('\\n'));\n    expect(eval(code)).toEqual(true);\n  });\n\n  it('should transform nested spread expressions', function() {\n    var code = transform([\n      'function getBase() {',\n      '  return {',\n      '    getParams: function(a, b) {',\n      '      return [a, b];',\n      '    }',\n      '  };',\n      '}',\n      '[].concat(...getBase().getParams(...[1, 2, 3])).join(\" \");',\n    ].join('\\n'));\n    expect(eval(code)).toEqual(\"1 2\");\n  });\n\n});\n"]}