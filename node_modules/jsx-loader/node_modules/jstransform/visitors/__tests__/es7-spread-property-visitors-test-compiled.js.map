{"version":3,"sources":["es7-spread-property-visitors-test.js"],"names":[],"mappings":"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","file":"es7-spread-property-visitors-test-compiled.js","sourcesContent":["/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @emails sema@fb.com\n */\n\n/*jshint evil:true*/\n\nrequire('mock-modules').autoMockOff();\n\ndescribe('es7-spread-property-visitors', function() {\n  var transformFn;\n  var originalAssign = Object.assign;\n  var visitors;\n\n  // These are placeholder variables in scope that we can use to assert that a\n  // specific variable reference was passed, rather than an object clone of it.\n  var x = 123456;\n  var y = 789012;\n  var z = 345678;\n\n  beforeEach(function() {\n    require('mock-modules').dumpCache();\n    transformFn = require('../../src/jstransform').transform;\n\n    visitors = require('../es7-spread-property-visitors').visitorList;\n  });\n\n  function transform(code) {\n    return transformFn(visitors, code).code;\n  }\n\n  function expectTransform(code, result) {\n    expect(transform(code)).toEqual(result);\n  }\n\n  function expectObjectAssign(code) {\n    var objectAssignMock = jest.genMockFunction();\n    Object.assign = objectAssignMock;\n    eval(transform(code));\n    return expect(objectAssignMock);\n  }\n\n  afterEach(function() {\n    Object.assign = originalAssign;\n  });\n\n  // Polyfill sanity checks\n\n  it('has access to a working Object.assign implementation', function() {\n    expect(typeof Object.assign).toBe('function');\n    expect(Object.assign({ b: 2 }, null, { a: 1 })).toEqual({ a: 1, b: 2 });\n  });\n\n  // Semantic tests.\n\n  it('uses Object.assign with an empty new target object', function() {\n    expectObjectAssign(\n      'var xy = { ...x, y: 2 }'\n    ).toBeCalledWith({}, x, { y: 2 });\n  });\n\n  it('coalesces consecutive properties into a single object', function() {\n    expectObjectAssign(\n      'var xyz = { ...x, y: 2, z: z }'\n    ).toBeCalledWith({}, x, { y: 2, z: z });\n\n  });\n\n  it('avoids an unnecessary empty object when spread is not first', function() {\n    expectObjectAssign(\n      'var xy = { x: 1, ...y }'\n    ).toBeCalledWith({ x: 1}, y);\n  });\n\n  it('passes the same value multiple times to Object.assign', function() {\n    expectObjectAssign(\n      'var xyz = { x: 1, y: 2, ...z, ...z }'\n    ).toBeCalledWith({ x: 1, y: 2}, z, z);\n  });\n\n  it('keeps object literals as separate arguments to assign', function() {\n    expectObjectAssign(\n      'var xyz = { x: 1, ...({ y: 2 }), z: 3 }'\n    ).toBeCalledWith({ x: 1}, { y: 2 }, {z: 3 });\n  });\n\n  it('does not call assign when there are no spread properties', function() {\n    expectObjectAssign(\n      'var xy = { x: 1, y: 2 }'\n    ).not.toBeCalled();\n  });\n\n  // Syntax tests.\n\n  it('should preserve extra whitespace', function() {\n    expectTransform(\n      'let xyz = { x: 1, y : \\n 2, ... \\nz,  ...  z   }',\n      'let xyz = Object.assign({ x: 1, y : \\n 2},  \\nz,    z   )'\n    );\n  });\n\n  it('should preserve parenthesis', function() {\n    expectTransform(\n      'let xyz = { x: 1, ...({ y: 2 }), z: 3 }',\n      'let xyz = Object.assign({ x: 1}, ({ y: 2 }), {z: 3 })'\n    );\n  });\n\n  it('should remove trailing commas after properties', function() {\n    expectTransform(\n      'let xyz = { ...x, y: 1, }',\n      'let xyz = Object.assign({}, x, {y: 1 })'\n    );\n  });\n\n  it('should remove trailing commas after spread', function() {\n    expectTransform(\n      'let xyz = { x: 1, ...y, }',\n      'let xyz = Object.assign({ x: 1}, y )'\n    );\n  });\n\n  // Don't transform\n\n  it('should not transform destructuring assignment', function() {\n    expectTransform(\n      'let { x, ...y } = z',\n      'let { x, ...y } = z'\n    );\n  });\n\n  // Accessors are unsupported. We leave it unprocessed so that other,\n  // chained transforms, can take over.\n\n  it('should not transform when there are getters', function() {\n    expectTransform(\n      'let xy = { ...x, get x() { } }',\n      'let xy = { ...x, get x() { } }'\n    );\n  });\n\n  it('should not transform when there are setters', function() {\n    expectTransform(\n      'let xy = { set x(v) { }, ...y }',\n      'let xy = { set x(v) { }, ...y }'\n    );\n  });\n\n  it('should silently ignore falsy values', function() {\n    /*globals obj*/\n    var code = transform([\n      'var x = null;',\n      'var y = { y: \"y\" };',\n      'var obj = { ...x, ...y, ...{ ...false, z: \"z\", ...y } };'\n    ].join('\\n'));\n\n    eval(code);\n\n    expect(obj).toEqual({ y: 'y', z: 'z' });\n  });\n});\n"]}