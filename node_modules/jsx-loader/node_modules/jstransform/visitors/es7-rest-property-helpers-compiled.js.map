{"version":3,"sources":["es7-rest-property-helpers.js"],"names":[],"mappings":";;;;;;;;;;;;;;;AAeA,IAAI,MAAM,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC,MAAM;;;;AAAC,AAI1C,IAAI,YAAY,GACd,gCAAgC,GAC9B,gBAAgB,GAChB,+CAA+C,GAC/C,uBAAuB,GACrB,wBAAwB,GAC1B,GAAG,GACH,2BAA2B,GACzB,iEAAiE,GAC/D,0BAA0B,GAC5B,GAAG,GACL,GAAG,GACH,cAAc,GAChB,IAAI,CAAC;;AAEP,SAAS,gBAAgB,CAAC,UAAU,EAAE;AACpC,MAAI,KAAK,GAAG,EAAE,CAAC;AACf,OAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAC1C,QAAI,QAAQ,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;AAC7B,QAAI,QAAQ,CAAC,IAAI,KAAK,MAAM,CAAC,cAAc,EAAE;AAC3C,eAAS;KACV;AACD,QAAI,QAAQ,CAAC,IAAI,KAAK,MAAM,CAAC,UAAU,EAAE;AACvC,WAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;KAC3B,MAAM;AACL,WAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;KAC/B;GACF;AACD,SAAO,KAAK,CAAC;CACd;;AAED,SAAS,mBAAmB,CAAC,MAAM,EAAE,SAAS,EAAE;AAC9C,SAAO,YAAY,GAAG,GAAG,GAAG,MAAM,GAAG,GAAG,GAAG,SAAS,GAAG,GAAG,CAAC;CAC5D;;AAED,SAAS,oBAAoB,CAAC,kBAAkB,EAAE;;;;AAIhD,SAAO,mBAAmB,CAAC,kBAAkB,EAAE,IAAI,CAAC,CAAC;CACtD;;AAED,SAAS,oBAAoB,CAAC,kBAAkB,EAAE,kBAAkB,EAAE;AACpE,MAAI,aAAa,GAAG,gBAAgB,CAAC,kBAAkB,CAAC,CAAC;AACzD,MAAI,CAAC,aAAa,CAAC,MAAM,EAAE;AACzB,WAAO,oBAAoB,CAAC,kBAAkB,CAAC,CAAC;GACjD;AACD,SAAO,mBAAmB,CACxB,kBAAkB,EAClB,GAAG,GAAG,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,KAAK,CACxC,CAAC;CACH;;AAED,OAAO,CAAC,oBAAoB,GAAG,oBAAoB,CAAC","file":"es7-rest-property-helpers-compiled.js","sourcesContent":["/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n/*jslint node:true*/\n\n/**\n * Desugars ES7 rest properties into ES5 object iteration.\n */\n\nvar Syntax = require('esprima-fb').Syntax;\n\n// TODO: This is a pretty massive helper, it should only be defined once, in the\n// transform's runtime environment. We don't currently have a runtime though.\nvar restFunction =\n  '(function(source, exclusion) {' +\n    'var rest = {};' +\n    'var hasOwn = Object.prototype.hasOwnProperty;' +\n    'if (source == null) {' +\n      'throw new TypeError();' +\n    '}' +\n    'for (var key in source) {' +\n      'if (hasOwn.call(source, key) && !hasOwn.call(exclusion, key)) {' +\n        'rest[key] = source[key];' +\n      '}' +\n    '}' +\n    'return rest;' +\n  '})';\n\nfunction getPropertyNames(properties) {\n  var names = [];\n  for (var i = 0; i < properties.length; i++) {\n    var property = properties[i];\n    if (property.type === Syntax.SpreadProperty) {\n      continue;\n    }\n    if (property.type === Syntax.Identifier) {\n      names.push(property.name);\n    } else {\n      names.push(property.key.name);\n    }\n  }\n  return names;\n}\n\nfunction getRestFunctionCall(source, exclusion) {\n  return restFunction + '(' + source + ',' + exclusion + ')';\n}\n\nfunction getSimpleShallowCopy(accessorExpression) {\n  // This could be faster with 'Object.assign({}, ' + accessorExpression + ')'\n  // but to unify code paths and avoid a ES6 dependency we use the same\n  // helper as for the exclusion case.\n  return getRestFunctionCall(accessorExpression, '{}');\n}\n\nfunction renderRestExpression(accessorExpression, excludedProperties) {\n  var excludedNames = getPropertyNames(excludedProperties);\n  if (!excludedNames.length) {\n    return getSimpleShallowCopy(accessorExpression);\n  }\n  return getRestFunctionCall(\n    accessorExpression,\n    '{' + excludedNames.join(':1,') + ':1}'\n  );\n}\n\nexports.renderRestExpression = renderRestExpression;\n"]}