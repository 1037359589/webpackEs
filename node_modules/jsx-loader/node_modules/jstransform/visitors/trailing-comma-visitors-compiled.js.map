{"version":3,"sources":["trailing-comma-visitors.js"],"names":[],"mappings":";;;;;;;;;AASA,IAAI,MAAM,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC,MAAM,CAAC;AAC1C,IAAI,KAAK,GAAG,OAAO,CAAC,cAAc,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAC,AA4BpC,SAAS,4BAA4B,CAAC,QAAQ,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE;AACjE,MAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,UAAU,CAAC;AAC7C,MAAI,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;;;AAAC,AAGvC,MAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AACnB,UAAQ,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;AAC7B,MAAI,CAAC,KAAK,EAAE;;;AAAC,AAGb,OAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC;;;AAAC,AAGxC,OAAK,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,KAAK,EAAE,UAAS,KAAK,EAAE;AACtD,WAAO,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;GAChC,CAAC,CAAC;AACH,SAAO,KAAK,CAAC;CACd;;AAED,4BAA4B,CAAC,IAAI,GAAG,UAAS,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE;AAC9D,SAAO,CAAC,IAAI,CAAC,IAAI,KAAK,MAAM,CAAC,eAAe,IAC1C,IAAI,CAAC,IAAI,KAAK,MAAM,CAAC,gBAAgB,CAAA,IACrC,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,UAAU,CAAA,CAAE,MAAM,GAAG,CAAC;;;AAG7C,GAAC,eAAe,CAAC,IAAI,CAAC,CAAC;CAC1B,CAAC;;AAEF,SAAS,eAAe,CAAC,IAAI,EAAE;AAC7B,SAAO,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,IAC9C,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,IAAI,CAAC;CACpD;;AAED,OAAO,CAAC,WAAW,GAAG,CACpB,4BAA4B,CAC7B,CAAC","file":"trailing-comma-visitors-compiled.js","sourcesContent":["/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\nvar Syntax = require('esprima-fb').Syntax;\nvar utils = require('../src/utils');\n\n/**\n * Strips trailing commas from array and object expressions. Transforms:\n *\n * var arr = [\n *   foo,\n *   bar,\n * ];\n *\n * var obj = {\n *   foo: 1,\n *   bar: 2,\n * };\n *\n * into:\n *\n * var arr = [\n *   foo,\n *   bar\n * ];\n *\n * var obj = {\n *   foo: 1,\n *   bar: 2\n * };\n *\n */\nfunction visitArrayOrObjectExpression(traverse, node, path, state) {\n  var items = node.elements || node.properties;\n  var lastItem = items[items.length - 1];\n\n  // Transform items if needed.\n  path.unshift(node);\n  traverse(items, path, state);\n  path.shift();\n\n  // Catch up to the end of the last item.\n  utils.catchup(lastItem.range[1], state);\n\n  // Strip any non-whitespace between the last item and the end.\n  utils.catchup(node.range[1] - 1, state, function(value) {\n    return value.replace(/,/g, '');\n  });\n  return false;\n}\n\nvisitArrayOrObjectExpression.test = function(node, path, state) {\n  return (node.type === Syntax.ArrayExpression ||\n    node.type === Syntax.ObjectExpression) &&\n    (node.elements || node.properties).length > 0 &&\n    // We don't want to run the transform on arrays with trailing holes, since\n    // it would change semantics.\n    !hasTrailingHole(node);\n};\n\nfunction hasTrailingHole(node) {\n  return node.elements && node.elements.length > 0 &&\n    node.elements[node.elements.length - 1] === null;\n}\n\nexports.visitorList = [\n  visitArrayOrObjectExpression\n];\n"]}