{"version":3,"sources":["BeforeInputEventPlugin.js"],"names":[],"mappings":";;;;;;;;;;;;AAYA,YAAY,CAAC;;AAEb,IAAI,cAAc,GAAG,OAAO,CAAC,kBAAkB,CAAC,CAAC;AACjD,IAAI,gBAAgB,GAAG,OAAO,CAAC,oBAAoB,CAAC,CAAC;AACrD,IAAI,oBAAoB,GAAG,OAAO,CAAC,+BAA+B,CAAC,CAAC;AACpE,IAAI,wBAAwB,GAAG,OAAO,CAAC,4BAA4B,CAAC,CAAC;AACrE,IAAI,yBAAyB,GAAG,OAAO,CAAC,6BAA6B,CAAC,CAAC;AACvE,IAAI,mBAAmB,GAAG,OAAO,CAAC,uBAAuB,CAAC,CAAC;;AAE3D,IAAI,KAAK,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC;;AAEtC,IAAI,YAAY,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;AAAC,AACnC,IAAI,aAAa,GAAG,GAAG,CAAC;;AAExB,IAAI,sBAAsB,GAAG,oBAAoB,CAAC,SAAS,IAAI,kBAAkB,IAAI,MAAM,CAAC;;AAE5F,IAAI,YAAY,GAAG,IAAI,CAAC;AACxB,IAAI,oBAAoB,CAAC,SAAS,IAAI,cAAc,IAAI,QAAQ,EAAE;AAChE,cAAY,GAAG,QAAQ,CAAC,YAAY,CAAC;CACtC;;;;;AAAA,AAKD,IAAI,oBAAoB,GAAG,oBAAoB,CAAC,SAAS,IAAI,WAAW,IAAI,MAAM,IAAI,CAAC,YAAY,IAAI,CAAC,QAAQ,EAAE;;;;;AAAC,AAKnH,IAAI,0BAA0B,GAAG,oBAAoB,CAAC,SAAS,KAAK,CAAC,sBAAsB,IAAI,YAAY,IAAI,YAAY,GAAG,CAAC,IAAI,YAAY,IAAI,EAAE,CAAA,AAAC;;;;;;AAAC,AAMvJ,SAAS,QAAQ,GAAG;AAClB,MAAI,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;AACzB,SAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,OAAO,KAAK,CAAC,OAAO,KAAK,UAAU,IAAI,QAAQ,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,EAAE,CAAC,IAAI,EAAE,CAAC;CAChH;;AAED,IAAI,aAAa,GAAG,EAAE,CAAC;AACvB,IAAI,aAAa,GAAG,MAAM,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC;;AAEvD,IAAI,aAAa,GAAG,cAAc,CAAC,aAAa;;;AAAC,AAGjD,IAAI,UAAU,GAAG;AACf,aAAW,EAAE;AACX,2BAAuB,EAAE;AACvB,aAAO,EAAE,KAAK,CAAC,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC;AACvC,cAAQ,EAAE,KAAK,CAAC,EAAE,oBAAoB,EAAE,IAAI,EAAE,CAAC;KAChD;AACD,gBAAY,EAAE,CAAC,aAAa,CAAC,iBAAiB,EAAE,aAAa,CAAC,WAAW,EAAE,aAAa,CAAC,YAAY,EAAE,aAAa,CAAC,QAAQ,CAAC;GAC/H;AACD,gBAAc,EAAE;AACd,2BAAuB,EAAE;AACvB,aAAO,EAAE,KAAK,CAAC,EAAE,gBAAgB,EAAE,IAAI,EAAE,CAAC;AAC1C,cAAQ,EAAE,KAAK,CAAC,EAAE,uBAAuB,EAAE,IAAI,EAAE,CAAC;KACnD;AACD,gBAAY,EAAE,CAAC,aAAa,CAAC,OAAO,EAAE,aAAa,CAAC,iBAAiB,EAAE,aAAa,CAAC,UAAU,EAAE,aAAa,CAAC,WAAW,EAAE,aAAa,CAAC,QAAQ,EAAE,aAAa,CAAC,YAAY,CAAC;GAChL;AACD,kBAAgB,EAAE;AAChB,2BAAuB,EAAE;AACvB,aAAO,EAAE,KAAK,CAAC,EAAE,kBAAkB,EAAE,IAAI,EAAE,CAAC;AAC5C,cAAQ,EAAE,KAAK,CAAC,EAAE,yBAAyB,EAAE,IAAI,EAAE,CAAC;KACrD;AACD,gBAAY,EAAE,CAAC,aAAa,CAAC,OAAO,EAAE,aAAa,CAAC,mBAAmB,EAAE,aAAa,CAAC,UAAU,EAAE,aAAa,CAAC,WAAW,EAAE,aAAa,CAAC,QAAQ,EAAE,aAAa,CAAC,YAAY,CAAC;GAClL;AACD,mBAAiB,EAAE;AACjB,2BAAuB,EAAE;AACvB,aAAO,EAAE,KAAK,CAAC,EAAE,mBAAmB,EAAE,IAAI,EAAE,CAAC;AAC7C,cAAQ,EAAE,KAAK,CAAC,EAAE,0BAA0B,EAAE,IAAI,EAAE,CAAC;KACtD;AACD,gBAAY,EAAE,CAAC,aAAa,CAAC,OAAO,EAAE,aAAa,CAAC,oBAAoB,EAAE,aAAa,CAAC,UAAU,EAAE,aAAa,CAAC,WAAW,EAAE,aAAa,CAAC,QAAQ,EAAE,aAAa,CAAC,YAAY,CAAC;GACnL;CACF;;;AAAC,AAGF,IAAI,gBAAgB,GAAG,KAAK;;;;;;;AAAC,AAO7B,SAAS,iBAAiB,CAAC,WAAW,EAAE;AACtC,SAAO,CAAC,WAAW,CAAC,OAAO,IAAI,WAAW,CAAC,MAAM,IAAI,WAAW,CAAC,OAAO,CAAA;;AAExE,IAAE,WAAW,CAAC,OAAO,IAAI,WAAW,CAAC,MAAM,CAAA,AAAC,CAAC;CAC9C;;;;;;;;AAAA,AAQD,SAAS,uBAAuB,CAAC,YAAY,EAAE;AAC7C,UAAQ,YAAY;AAClB,SAAK,aAAa,CAAC,mBAAmB;AACpC,aAAO,UAAU,CAAC,gBAAgB,CAAC;AAAA,AACrC,SAAK,aAAa,CAAC,iBAAiB;AAClC,aAAO,UAAU,CAAC,cAAc,CAAC;AAAA,AACnC,SAAK,aAAa,CAAC,oBAAoB;AACrC,aAAO,UAAU,CAAC,iBAAiB,CAAC;AAAA,GACvC;CACF;;;;;;;;;;AAAA,AAUD,SAAS,0BAA0B,CAAC,YAAY,EAAE,WAAW,EAAE;AAC7D,SAAO,YAAY,KAAK,aAAa,CAAC,UAAU,IAAI,WAAW,CAAC,OAAO,KAAK,aAAa,CAAC;CAC3F;;;;;;;;;AAAA,AASD,SAAS,wBAAwB,CAAC,YAAY,EAAE,WAAW,EAAE;AAC3D,UAAQ,YAAY;AAClB,SAAK,aAAa,CAAC,QAAQ;;AAEzB,aAAO,YAAY,CAAC,OAAO,CAAC,WAAW,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;AAAA,AAC1D,SAAK,aAAa,CAAC,UAAU;;;AAG3B,aAAO,WAAW,CAAC,OAAO,KAAK,aAAa,CAAC;AAAA,AAC/C,SAAK,aAAa,CAAC,WAAW,CAAC;AAC/B,SAAK,aAAa,CAAC,YAAY,CAAC;AAChC,SAAK,aAAa,CAAC,OAAO;;AAExB,aAAO,IAAI,CAAC;AAAA,AACd;AACE,aAAO,KAAK,CAAC;AAAA,GAChB;CACF;;;;;;;;;;;AAAA,AAWD,SAAS,sBAAsB,CAAC,WAAW,EAAE;AAC3C,MAAI,MAAM,GAAG,WAAW,CAAC,MAAM,CAAC;AAChC,MAAI,OAAO,MAAM,KAAK,QAAQ,IAAI,MAAM,IAAI,MAAM,EAAE;AAClD,WAAO,MAAM,CAAC,IAAI,CAAC;GACpB;AACD,SAAO,IAAI,CAAC;CACb;;;AAAA,AAGD,IAAI,kBAAkB,GAAG,IAAI;;;;;;;;;AAAC,AAS9B,SAAS,uBAAuB,CAAC,YAAY,EAAE,cAAc,EAAE,gBAAgB,EAAE,WAAW,EAAE,iBAAiB,EAAE;AAC/G,MAAI,SAAS,CAAC;AACd,MAAI,YAAY,CAAC;;AAEjB,MAAI,sBAAsB,EAAE;AAC1B,aAAS,GAAG,uBAAuB,CAAC,YAAY,CAAC,CAAC;GACnD,MAAM,IAAI,CAAC,kBAAkB,EAAE;AAC9B,QAAI,0BAA0B,CAAC,YAAY,EAAE,WAAW,CAAC,EAAE;AACzD,eAAS,GAAG,UAAU,CAAC,gBAAgB,CAAC;KACzC;GACF,MAAM,IAAI,wBAAwB,CAAC,YAAY,EAAE,WAAW,CAAC,EAAE;AAC9D,aAAS,GAAG,UAAU,CAAC,cAAc,CAAC;GACvC;;AAED,MAAI,CAAC,SAAS,EAAE;AACd,WAAO,IAAI,CAAC;GACb;;AAED,MAAI,0BAA0B,EAAE;;;AAG9B,QAAI,CAAC,kBAAkB,IAAI,SAAS,KAAK,UAAU,CAAC,gBAAgB,EAAE;AACpE,wBAAkB,GAAG,wBAAwB,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;KACzE,MAAM,IAAI,SAAS,KAAK,UAAU,CAAC,cAAc,EAAE;AAClD,UAAI,kBAAkB,EAAE;AACtB,oBAAY,GAAG,kBAAkB,CAAC,OAAO,EAAE,CAAC;OAC7C;KACF;GACF;;AAED,MAAI,KAAK,GAAG,yBAAyB,CAAC,SAAS,CAAC,SAAS,EAAE,gBAAgB,EAAE,WAAW,EAAE,iBAAiB,CAAC,CAAC;;AAE7G,MAAI,YAAY,EAAE;;;AAGhB,SAAK,CAAC,IAAI,GAAG,YAAY,CAAC;GAC3B,MAAM;AACL,QAAI,UAAU,GAAG,sBAAsB,CAAC,WAAW,CAAC,CAAC;AACrD,QAAI,UAAU,KAAK,IAAI,EAAE;AACvB,WAAK,CAAC,IAAI,GAAG,UAAU,CAAC;KACzB;GACF;;AAED,kBAAgB,CAAC,4BAA4B,CAAC,KAAK,CAAC,CAAC;AACrD,SAAO,KAAK,CAAC;CACd;;;;;;;AAAA,AAOD,SAAS,yBAAyB,CAAC,YAAY,EAAE,WAAW,EAAE;AAC5D,UAAQ,YAAY;AAClB,SAAK,aAAa,CAAC,iBAAiB;AAClC,aAAO,sBAAsB,CAAC,WAAW,CAAC,CAAC;AAAA,AAC7C,SAAK,aAAa,CAAC,WAAW;;;;;;;;;;;;;;;AAe5B,UAAI,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC;AAC9B,UAAI,KAAK,KAAK,aAAa,EAAE;AAC3B,eAAO,IAAI,CAAC;OACb;;AAED,sBAAgB,GAAG,IAAI,CAAC;AACxB,aAAO,aAAa,CAAC;;AAAA,AAEvB,SAAK,aAAa,CAAC,YAAY;;AAE7B,UAAI,KAAK,GAAG,WAAW,CAAC,IAAI;;;;;AAAC,AAK7B,UAAI,KAAK,KAAK,aAAa,IAAI,gBAAgB,EAAE;AAC/C,eAAO,IAAI,CAAC;OACb;;AAED,aAAO,KAAK,CAAC;;AAAA,AAEf;;AAEE,aAAO,IAAI,CAAC;AAAA,GACf;CACF;;;;;;;;;;AAAA,AAUD,SAAS,2BAA2B,CAAC,YAAY,EAAE,WAAW,EAAE;;;AAG9D,MAAI,kBAAkB,EAAE;AACtB,QAAI,YAAY,KAAK,aAAa,CAAC,iBAAiB,IAAI,wBAAwB,CAAC,YAAY,EAAE,WAAW,CAAC,EAAE;AAC3G,UAAI,KAAK,GAAG,kBAAkB,CAAC,OAAO,EAAE,CAAC;AACzC,8BAAwB,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;AACrD,wBAAkB,GAAG,IAAI,CAAC;AAC1B,aAAO,KAAK,CAAC;KACd;AACD,WAAO,IAAI,CAAC;GACb;;AAED,UAAQ,YAAY;AAClB,SAAK,aAAa,CAAC,QAAQ;;;AAGzB,aAAO,IAAI,CAAC;AAAA,AACd,SAAK,aAAa,CAAC,WAAW;;;;;;;;;;;;;;;;;AAiB5B,UAAI,WAAW,CAAC,KAAK,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,EAAE;AACxD,eAAO,MAAM,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;OAC/C;AACD,aAAO,IAAI,CAAC;AAAA,AACd,SAAK,aAAa,CAAC,iBAAiB;AAClC,aAAO,0BAA0B,GAAG,IAAI,GAAG,WAAW,CAAC,IAAI,CAAC;AAAA,AAC9D;AACE,aAAO,IAAI,CAAC;AAAA,GACf;CACF;;;;;;;;;;;;AAAA,AAYD,SAAS,uBAAuB,CAAC,YAAY,EAAE,cAAc,EAAE,gBAAgB,EAAE,WAAW,EAAE,iBAAiB,EAAE;AAC/G,MAAI,KAAK,CAAC;;AAEV,MAAI,oBAAoB,EAAE;AACxB,SAAK,GAAG,yBAAyB,CAAC,YAAY,EAAE,WAAW,CAAC,CAAC;GAC9D,MAAM;AACL,SAAK,GAAG,2BAA2B,CAAC,YAAY,EAAE,WAAW,CAAC,CAAC;GAChE;;;;AAAA,AAID,MAAI,CAAC,KAAK,EAAE;AACV,WAAO,IAAI,CAAC;GACb;;AAED,MAAI,KAAK,GAAG,mBAAmB,CAAC,SAAS,CAAC,UAAU,CAAC,WAAW,EAAE,gBAAgB,EAAE,WAAW,EAAE,iBAAiB,CAAC,CAAC;;AAEpH,OAAK,CAAC,IAAI,GAAG,KAAK,CAAC;AACnB,kBAAgB,CAAC,4BAA4B,CAAC,KAAK,CAAC,CAAC;AACrD,SAAO,KAAK,CAAC;CACd;;;;;;;;;;;;;;;;;;;;AAAA,AAoBD,IAAI,sBAAsB,GAAG;;AAE3B,YAAU,EAAE,UAAU;;;;;;;;;;AAUtB,eAAa,EAAE,UAAU,YAAY,EAAE,cAAc,EAAE,gBAAgB,EAAE,WAAW,EAAE,iBAAiB,EAAE;AACvG,WAAO,CAAC,uBAAuB,CAAC,YAAY,EAAE,cAAc,EAAE,gBAAgB,EAAE,WAAW,EAAE,iBAAiB,CAAC,EAAE,uBAAuB,CAAC,YAAY,EAAE,cAAc,EAAE,gBAAgB,EAAE,WAAW,EAAE,iBAAiB,CAAC,CAAC,CAAC;GAC3N;CACF,CAAC;;AAEF,MAAM,CAAC,OAAO,GAAG,sBAAsB,CAAC","file":"BeforeInputEventPlugin-compiled.js","sourcesContent":["/**\n * Copyright 2013-2015 Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule BeforeInputEventPlugin\n * @typechecks static-only\n */\n\n'use strict';\n\nvar EventConstants = require('./EventConstants');\nvar EventPropagators = require('./EventPropagators');\nvar ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\nvar FallbackCompositionState = require('./FallbackCompositionState');\nvar SyntheticCompositionEvent = require('./SyntheticCompositionEvent');\nvar SyntheticInputEvent = require('./SyntheticInputEvent');\n\nvar keyOf = require('fbjs/lib/keyOf');\n\nvar END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\nvar START_KEYCODE = 229;\n\nvar canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;\n\nvar documentMode = null;\nif (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {\n  documentMode = document.documentMode;\n}\n\n// Webkit offers a very useful `textInput` event that can be used to\n// directly represent `beforeInput`. The IE `textinput` event is not as\n// useful, so we don't use it.\nvar canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();\n\n// In IE9+, we have access to composition events, but the data supplied\n// by the native compositionend event may be incorrect. Japanese ideographic\n// spaces, for instance (\\u3000) are not recorded correctly.\nvar useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);\n\n/**\n * Opera <= 12 includes TextEvent in window, but does not fire\n * text input events. Rely on keypress instead.\n */\nfunction isPresto() {\n  var opera = window.opera;\n  return typeof opera === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;\n}\n\nvar SPACEBAR_CODE = 32;\nvar SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n\nvar topLevelTypes = EventConstants.topLevelTypes;\n\n// Events and their corresponding property names.\nvar eventTypes = {\n  beforeInput: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onBeforeInput: null }),\n      captured: keyOf({ onBeforeInputCapture: null })\n    },\n    dependencies: [topLevelTypes.topCompositionEnd, topLevelTypes.topKeyPress, topLevelTypes.topTextInput, topLevelTypes.topPaste]\n  },\n  compositionEnd: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onCompositionEnd: null }),\n      captured: keyOf({ onCompositionEndCapture: null })\n    },\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionEnd, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]\n  },\n  compositionStart: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onCompositionStart: null }),\n      captured: keyOf({ onCompositionStartCapture: null })\n    },\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionStart, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]\n  },\n  compositionUpdate: {\n    phasedRegistrationNames: {\n      bubbled: keyOf({ onCompositionUpdate: null }),\n      captured: keyOf({ onCompositionUpdateCapture: null })\n    },\n    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionUpdate, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]\n  }\n};\n\n// Track whether we've ever handled a keypress on the space key.\nvar hasSpaceKeypress = false;\n\n/**\n * Return whether a native keypress event is assumed to be a command.\n * This is required because Firefox fires `keypress` events for key commands\n * (cut, copy, select-all, etc.) even though no character is inserted.\n */\nfunction isKeypressCommand(nativeEvent) {\n  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&\n  // ctrlKey && altKey is equivalent to AltGr, and is not a command.\n  !(nativeEvent.ctrlKey && nativeEvent.altKey);\n}\n\n/**\n * Translate native top level events into event types.\n *\n * @param {string} topLevelType\n * @return {object}\n */\nfunction getCompositionEventType(topLevelType) {\n  switch (topLevelType) {\n    case topLevelTypes.topCompositionStart:\n      return eventTypes.compositionStart;\n    case topLevelTypes.topCompositionEnd:\n      return eventTypes.compositionEnd;\n    case topLevelTypes.topCompositionUpdate:\n      return eventTypes.compositionUpdate;\n  }\n}\n\n/**\n * Does our fallback best-guess model think this event signifies that\n * composition has begun?\n *\n * @param {string} topLevelType\n * @param {object} nativeEvent\n * @return {boolean}\n */\nfunction isFallbackCompositionStart(topLevelType, nativeEvent) {\n  return topLevelType === topLevelTypes.topKeyDown && nativeEvent.keyCode === START_KEYCODE;\n}\n\n/**\n * Does our fallback mode think that this event is the end of composition?\n *\n * @param {string} topLevelType\n * @param {object} nativeEvent\n * @return {boolean}\n */\nfunction isFallbackCompositionEnd(topLevelType, nativeEvent) {\n  switch (topLevelType) {\n    case topLevelTypes.topKeyUp:\n      // Command keys insert or clear IME input.\n      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;\n    case topLevelTypes.topKeyDown:\n      // Expect IME keyCode on each keydown. If we get any other\n      // code we must have exited earlier.\n      return nativeEvent.keyCode !== START_KEYCODE;\n    case topLevelTypes.topKeyPress:\n    case topLevelTypes.topMouseDown:\n    case topLevelTypes.topBlur:\n      // Events are not possible without cancelling IME.\n      return true;\n    default:\n      return false;\n  }\n}\n\n/**\n * Google Input Tools provides composition data via a CustomEvent,\n * with the `data` property populated in the `detail` object. If this\n * is available on the event object, use it. If not, this is a plain\n * composition event and we have nothing special to extract.\n *\n * @param {object} nativeEvent\n * @return {?string}\n */\nfunction getDataFromCustomEvent(nativeEvent) {\n  var detail = nativeEvent.detail;\n  if (typeof detail === 'object' && 'data' in detail) {\n    return detail.data;\n  }\n  return null;\n}\n\n// Track the current IME composition fallback object, if any.\nvar currentComposition = null;\n\n/**\n * @param {string} topLevelType Record from `EventConstants`.\n * @param {DOMEventTarget} topLevelTarget The listening component root node.\n * @param {string} topLevelTargetID ID of `topLevelTarget`.\n * @param {object} nativeEvent Native browser event.\n * @return {?object} A SyntheticCompositionEvent.\n */\nfunction extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {\n  var eventType;\n  var fallbackData;\n\n  if (canUseCompositionEvent) {\n    eventType = getCompositionEventType(topLevelType);\n  } else if (!currentComposition) {\n    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {\n      eventType = eventTypes.compositionStart;\n    }\n  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {\n    eventType = eventTypes.compositionEnd;\n  }\n\n  if (!eventType) {\n    return null;\n  }\n\n  if (useFallbackCompositionData) {\n    // The current composition is stored statically and must not be\n    // overwritten while composition continues.\n    if (!currentComposition && eventType === eventTypes.compositionStart) {\n      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);\n    } else if (eventType === eventTypes.compositionEnd) {\n      if (currentComposition) {\n        fallbackData = currentComposition.getData();\n      }\n    }\n  }\n\n  var event = SyntheticCompositionEvent.getPooled(eventType, topLevelTargetID, nativeEvent, nativeEventTarget);\n\n  if (fallbackData) {\n    // Inject data generated from fallback path into the synthetic event.\n    // This matches the property of native CompositionEventInterface.\n    event.data = fallbackData;\n  } else {\n    var customData = getDataFromCustomEvent(nativeEvent);\n    if (customData !== null) {\n      event.data = customData;\n    }\n  }\n\n  EventPropagators.accumulateTwoPhaseDispatches(event);\n  return event;\n}\n\n/**\n * @param {string} topLevelType Record from `EventConstants`.\n * @param {object} nativeEvent Native browser event.\n * @return {?string} The string corresponding to this `beforeInput` event.\n */\nfunction getNativeBeforeInputChars(topLevelType, nativeEvent) {\n  switch (topLevelType) {\n    case topLevelTypes.topCompositionEnd:\n      return getDataFromCustomEvent(nativeEvent);\n    case topLevelTypes.topKeyPress:\n      /**\n       * If native `textInput` events are available, our goal is to make\n       * use of them. However, there is a special case: the spacebar key.\n       * In Webkit, preventing default on a spacebar `textInput` event\n       * cancels character insertion, but it *also* causes the browser\n       * to fall back to its default spacebar behavior of scrolling the\n       * page.\n       *\n       * Tracking at:\n       * https://code.google.com/p/chromium/issues/detail?id=355103\n       *\n       * To avoid this issue, use the keypress event as if no `textInput`\n       * event is available.\n       */\n      var which = nativeEvent.which;\n      if (which !== SPACEBAR_CODE) {\n        return null;\n      }\n\n      hasSpaceKeypress = true;\n      return SPACEBAR_CHAR;\n\n    case topLevelTypes.topTextInput:\n      // Record the characters to be added to the DOM.\n      var chars = nativeEvent.data;\n\n      // If it's a spacebar character, assume that we have already handled\n      // it at the keypress level and bail immediately. Android Chrome\n      // doesn't give us keycodes, so we need to blacklist it.\n      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {\n        return null;\n      }\n\n      return chars;\n\n    default:\n      // For other native event types, do nothing.\n      return null;\n  }\n}\n\n/**\n * For browsers that do not provide the `textInput` event, extract the\n * appropriate string to use for SyntheticInputEvent.\n *\n * @param {string} topLevelType Record from `EventConstants`.\n * @param {object} nativeEvent Native browser event.\n * @return {?string} The fallback string for this `beforeInput` event.\n */\nfunction getFallbackBeforeInputChars(topLevelType, nativeEvent) {\n  // If we are currently composing (IME) and using a fallback to do so,\n  // try to extract the composed characters from the fallback object.\n  if (currentComposition) {\n    if (topLevelType === topLevelTypes.topCompositionEnd || isFallbackCompositionEnd(topLevelType, nativeEvent)) {\n      var chars = currentComposition.getData();\n      FallbackCompositionState.release(currentComposition);\n      currentComposition = null;\n      return chars;\n    }\n    return null;\n  }\n\n  switch (topLevelType) {\n    case topLevelTypes.topPaste:\n      // If a paste event occurs after a keypress, throw out the input\n      // chars. Paste events should not lead to BeforeInput events.\n      return null;\n    case topLevelTypes.topKeyPress:\n      /**\n       * As of v27, Firefox may fire keypress events even when no character\n       * will be inserted. A few possibilities:\n       *\n       * - `which` is `0`. Arrow keys, Esc key, etc.\n       *\n       * - `which` is the pressed key code, but no char is available.\n       *   Ex: 'AltGr + d` in Polish. There is no modified character for\n       *   this key combination and no character is inserted into the\n       *   document, but FF fires the keypress for char code `100` anyway.\n       *   No `input` event will occur.\n       *\n       * - `which` is the pressed key code, but a command combination is\n       *   being used. Ex: `Cmd+C`. No character is inserted, and no\n       *   `input` event will occur.\n       */\n      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {\n        return String.fromCharCode(nativeEvent.which);\n      }\n      return null;\n    case topLevelTypes.topCompositionEnd:\n      return useFallbackCompositionData ? null : nativeEvent.data;\n    default:\n      return null;\n  }\n}\n\n/**\n * Extract a SyntheticInputEvent for `beforeInput`, based on either native\n * `textInput` or fallback behavior.\n *\n * @param {string} topLevelType Record from `EventConstants`.\n * @param {DOMEventTarget} topLevelTarget The listening component root node.\n * @param {string} topLevelTargetID ID of `topLevelTarget`.\n * @param {object} nativeEvent Native browser event.\n * @return {?object} A SyntheticInputEvent.\n */\nfunction extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {\n  var chars;\n\n  if (canUseTextInputEvent) {\n    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);\n  } else {\n    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);\n  }\n\n  // If no characters are being inserted, no BeforeInput event should\n  // be fired.\n  if (!chars) {\n    return null;\n  }\n\n  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, topLevelTargetID, nativeEvent, nativeEventTarget);\n\n  event.data = chars;\n  EventPropagators.accumulateTwoPhaseDispatches(event);\n  return event;\n}\n\n/**\n * Create an `onBeforeInput` event to match\n * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.\n *\n * This event plugin is based on the native `textInput` event\n * available in Chrome, Safari, Opera, and IE. This event fires after\n * `onKeyPress` and `onCompositionEnd`, but before `onInput`.\n *\n * `beforeInput` is spec'd but not implemented in any browsers, and\n * the `input` event does not provide any useful information about what has\n * actually been added, contrary to the spec. Thus, `textInput` is the best\n * available event to identify the characters that have actually been inserted\n * into the target node.\n *\n * This plugin is also responsible for emitting `composition` events, thus\n * allowing us to share composition fallback code for both `beforeInput` and\n * `composition` event types.\n */\nvar BeforeInputEventPlugin = {\n\n  eventTypes: eventTypes,\n\n  /**\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @see {EventPluginHub.extractEvents}\n   */\n  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {\n    return [extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget)];\n  }\n};\n\nmodule.exports = BeforeInputEventPlugin;"]}