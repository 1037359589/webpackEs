{"version":3,"sources":["DOMChildrenOperations.js"],"names":[],"mappings":"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","file":"DOMChildrenOperations-compiled.js","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DOMChildrenOperations\n * @typechecks static-only\n */\n\n'use strict';\n\nvar Danger = require('./Danger');\nvar ReactMultiChildUpdateTypes = require('./ReactMultiChildUpdateTypes');\nvar ReactPerf = require('./ReactPerf');\n\nvar setInnerHTML = require('./setInnerHTML');\nvar setTextContent = require('./setTextContent');\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * Inserts `childNode` as a child of `parentNode` at the `index`.\n *\n * @param {DOMElement} parentNode Parent node in which to insert.\n * @param {DOMElement} childNode Child node to insert.\n * @param {number} index Index at which to insert the child.\n * @internal\n */\nfunction insertChildAt(parentNode, childNode, index) {\n  // By exploiting arrays returning `undefined` for an undefined index, we can\n  // rely exclusively on `insertBefore(node, null)` instead of also using\n  // `appendChild(node)`. However, using `undefined` is not allowed by all\n  // browsers so we must replace it with `null`.\n\n  // fix render order error in safari\n  // IE8 will throw error when index out of list size.\n  var beforeChild = index >= parentNode.childNodes.length ? null : parentNode.childNodes.item(index);\n\n  parentNode.insertBefore(childNode, beforeChild);\n}\n\n/**\n * Operations for updating with DOM children.\n */\nvar DOMChildrenOperations = {\n\n  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,\n\n  updateTextContent: setTextContent,\n\n  /**\n   * Updates a component's children by processing a series of updates. The\n   * update configurations are each expected to have a `parentNode` property.\n   *\n   * @param {array<object>} updates List of update configurations.\n   * @param {array<string>} markupList List of markup strings.\n   * @internal\n   */\n  processUpdates: function (updates, markupList) {\n    var update;\n    // Mapping from parent IDs to initial child orderings.\n    var initialChildren = null;\n    // List of children that will be moved or removed.\n    var updatedChildren = null;\n\n    for (var i = 0; i < updates.length; i++) {\n      update = updates[i];\n      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING || update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {\n        var updatedIndex = update.fromIndex;\n        var updatedChild = update.parentNode.childNodes[updatedIndex];\n        var parentID = update.parentID;\n\n        !updatedChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processUpdates(): Unable to find child %s of element. This ' + 'probably means the DOM was unexpectedly mutated (e.g., by the ' + 'browser), usually due to forgetting a <tbody> when using tables, ' + 'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' + 'in an <svg> parent. Try inspecting the child nodes of the element ' + 'with React ID `%s`.', updatedIndex, parentID) : invariant(false) : undefined;\n\n        initialChildren = initialChildren || {};\n        initialChildren[parentID] = initialChildren[parentID] || [];\n        initialChildren[parentID][updatedIndex] = updatedChild;\n\n        updatedChildren = updatedChildren || [];\n        updatedChildren.push(updatedChild);\n      }\n    }\n\n    var renderedMarkup;\n    // markupList is either a list of markup or just a list of elements\n    if (markupList.length && typeof markupList[0] === 'string') {\n      renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);\n    } else {\n      renderedMarkup = markupList;\n    }\n\n    // Remove updated children first so that `toIndex` is consistent.\n    if (updatedChildren) {\n      for (var j = 0; j < updatedChildren.length; j++) {\n        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);\n      }\n    }\n\n    for (var k = 0; k < updates.length; k++) {\n      update = updates[k];\n      switch (update.type) {\n        case ReactMultiChildUpdateTypes.INSERT_MARKUP:\n          insertChildAt(update.parentNode, renderedMarkup[update.markupIndex], update.toIndex);\n          break;\n        case ReactMultiChildUpdateTypes.MOVE_EXISTING:\n          insertChildAt(update.parentNode, initialChildren[update.parentID][update.fromIndex], update.toIndex);\n          break;\n        case ReactMultiChildUpdateTypes.SET_MARKUP:\n          setInnerHTML(update.parentNode, update.content);\n          break;\n        case ReactMultiChildUpdateTypes.TEXT_CONTENT:\n          setTextContent(update.parentNode, update.content);\n          break;\n        case ReactMultiChildUpdateTypes.REMOVE_NODE:\n          // Already removed by the for-loop above.\n          break;\n      }\n    }\n  }\n\n};\n\nReactPerf.measureMethods(DOMChildrenOperations, 'DOMChildrenOperations', {\n  updateTextContent: 'updateTextContent'\n});\n\nmodule.exports = DOMChildrenOperations;"]}