{"version":3,"sources":["DOMProperty.js"],"names":[],"mappings":";;;;;;;;;;;;AAYA,YAAY,CAAC;;AAEb,IAAI,SAAS,GAAG,OAAO,CAAC,oBAAoB,CAAC,CAAC;;AAE9C,SAAS,SAAS,CAAC,KAAK,EAAE,OAAO,EAAE;AACjC,SAAO,CAAC,KAAK,GAAG,OAAO,CAAA,KAAM,OAAO,CAAC;CACtC;;AAED,IAAI,oBAAoB,GAAG;;;;;AAKzB,oBAAkB,EAAE,GAAG;AACvB,mBAAiB,EAAE,GAAG;AACtB,kBAAgB,EAAE,GAAG;AACrB,mBAAiB,EAAE,GAAG;AACtB,mBAAiB,EAAE,IAAI;AACvB,4BAA0B,EAAE,IAAI,GAAG,IAAI;AACvC,8BAA4B,EAAE,IAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BlC,yBAAuB,EAAE,UAAU,iBAAiB,EAAE;AACpD,QAAI,SAAS,GAAG,oBAAoB,CAAC;AACrC,QAAI,UAAU,GAAG,iBAAiB,CAAC,UAAU,IAAI,EAAE,CAAC;AACpD,QAAI,sBAAsB,GAAG,iBAAiB,CAAC,sBAAsB,IAAI,EAAE,CAAC;AAC5E,QAAI,iBAAiB,GAAG,iBAAiB,CAAC,iBAAiB,IAAI,EAAE,CAAC;AAClE,QAAI,gBAAgB,GAAG,iBAAiB,CAAC,gBAAgB,IAAI,EAAE,CAAC;AAChE,QAAI,kBAAkB,GAAG,iBAAiB,CAAC,kBAAkB,IAAI,EAAE,CAAC;;AAEpE,QAAI,iBAAiB,CAAC,iBAAiB,EAAE;AACvC,iBAAW,CAAC,2BAA2B,CAAC,IAAI,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,CAAC;KACnF;;AAED,SAAK,IAAI,QAAQ,IAAI,UAAU,EAAE;AAC/B,OAAC,CAAC,WAAW,CAAC,UAAU,CAAC,cAAc,CAAC,QAAQ,CAAC,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,GAAG,SAAS,CAAC,KAAK,EAAE,sEAAsE,GAAG,kEAAkE,GAAG,8DAA8D,GAAG,6DAA6D,EAAE,QAAQ,CAAC,GAAG,SAAS,CAAC,KAAK,CAAC,GAAG,SAAS,CAAC;;AAEpa,UAAI,UAAU,GAAG,QAAQ,CAAC,WAAW,EAAE,CAAC;AACxC,UAAI,UAAU,GAAG,UAAU,CAAC,QAAQ,CAAC,CAAC;;AAEtC,UAAI,YAAY,GAAG;AACjB,qBAAa,EAAE,UAAU;AACzB,0BAAkB,EAAE,IAAI;AACxB,oBAAY,EAAE,QAAQ;AACtB,sBAAc,EAAE,IAAI;;AAEpB,wBAAgB,EAAE,SAAS,CAAC,UAAU,EAAE,SAAS,CAAC,kBAAkB,CAAC;AACrE,uBAAe,EAAE,SAAS,CAAC,UAAU,EAAE,SAAS,CAAC,iBAAiB,CAAC;AACnE,sBAAc,EAAE,SAAS,CAAC,UAAU,EAAE,SAAS,CAAC,gBAAgB,CAAC;AACjE,uBAAe,EAAE,SAAS,CAAC,UAAU,EAAE,SAAS,CAAC,iBAAiB,CAAC;AACnE,uBAAe,EAAE,SAAS,CAAC,UAAU,EAAE,SAAS,CAAC,iBAAiB,CAAC;AACnE,+BAAuB,EAAE,SAAS,CAAC,UAAU,EAAE,SAAS,CAAC,0BAA0B,CAAC;AACpF,iCAAyB,EAAE,SAAS,CAAC,UAAU,EAAE,SAAS,CAAC,4BAA4B,CAAC;OACzF,CAAC;;AAEF,QAAE,CAAC,YAAY,CAAC,gBAAgB,IAAI,CAAC,YAAY,CAAC,eAAe,CAAA,AAAC,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,GAAG,SAAS,CAAC,KAAK,EAAE,mEAAmE,EAAE,QAAQ,CAAC,GAAG,SAAS,CAAC,KAAK,CAAC,GAAG,SAAS,CAAC;AAC5O,QAAE,YAAY,CAAC,eAAe,IAAI,CAAC,YAAY,CAAC,cAAc,CAAA,AAAC,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,GAAG,SAAS,CAAC,KAAK,EAAE,sEAAsE,EAAE,QAAQ,CAAC,GAAG,SAAS,CAAC,KAAK,CAAC,GAAG,SAAS,CAAC;AAC5O,QAAE,YAAY,CAAC,eAAe,GAAG,YAAY,CAAC,eAAe,GAAG,YAAY,CAAC,yBAAyB,IAAI,CAAC,CAAA,AAAC,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,GAAG,SAAS,CAAC,KAAK,EAAE,mEAAmE,GAAG,0CAA0C,EAAE,QAAQ,CAAC,GAAG,SAAS,CAAC,KAAK,CAAC,GAAG,SAAS,CAAC;;AAEnU,UAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE;AACzC,mBAAW,CAAC,uBAAuB,CAAC,UAAU,CAAC,GAAG,QAAQ,CAAC;OAC5D;;AAED,UAAI,iBAAiB,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;AAC9C,YAAI,aAAa,GAAG,iBAAiB,CAAC,QAAQ,CAAC,CAAC;AAChD,oBAAY,CAAC,aAAa,GAAG,aAAa,CAAC;AAC3C,YAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE;AACzC,qBAAW,CAAC,uBAAuB,CAAC,aAAa,CAAC,GAAG,QAAQ,CAAC;SAC/D;OACF;;AAED,UAAI,sBAAsB,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;AACnD,oBAAY,CAAC,kBAAkB,GAAG,sBAAsB,CAAC,QAAQ,CAAC,CAAC;OACpE;;AAED,UAAI,gBAAgB,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;AAC7C,oBAAY,CAAC,YAAY,GAAG,gBAAgB,CAAC,QAAQ,CAAC,CAAC;OACxD;;AAED,UAAI,kBAAkB,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;AAC/C,oBAAY,CAAC,cAAc,GAAG,kBAAkB,CAAC,QAAQ,CAAC,CAAC;OAC5D;;AAED,iBAAW,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,YAAY,CAAC;KACjD;GACF;CACF,CAAC;AACF,IAAI,iBAAiB,GAAG,EAAE;;;;;;;;;;;;;;;AAAC,AAe3B,IAAI,WAAW,GAAG;;AAEhB,mBAAiB,EAAE,cAAc;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCjC,YAAU,EAAE,EAAE;;;;;;;AAOd,yBAAuB,EAAE,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,GAAG,EAAE,GAAG,IAAI;;;;;AAK1E,6BAA2B,EAAE,EAAE;;;;;;AAM/B,mBAAiB,EAAE,UAAU,aAAa,EAAE;AAC1C,SAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,2BAA2B,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACvE,UAAI,mBAAmB,GAAG,WAAW,CAAC,2BAA2B,CAAC,CAAC,CAAC,CAAC;AACrE,UAAI,mBAAmB,CAAC,aAAa,CAAC,EAAE;AACtC,eAAO,IAAI,CAAC;OACb;KACF;AACD,WAAO,KAAK,CAAC;GACd;;;;;;;;;;AAUD,4BAA0B,EAAE,UAAU,QAAQ,EAAE,IAAI,EAAE;AACpD,QAAI,YAAY,GAAG,iBAAiB,CAAC,QAAQ,CAAC,CAAC;AAC/C,QAAI,WAAW,CAAC;AAChB,QAAI,CAAC,YAAY,EAAE;AACjB,uBAAiB,CAAC,QAAQ,CAAC,GAAG,YAAY,GAAG,EAAE,CAAC;KACjD;AACD,QAAI,EAAE,IAAI,IAAI,YAAY,CAAA,AAAC,EAAE;AAC3B,iBAAW,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;AAC/C,kBAAY,CAAC,IAAI,CAAC,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC;KACxC;AACD,WAAO,YAAY,CAAC,IAAI,CAAC,CAAC;GAC3B;;AAED,WAAS,EAAE,oBAAoB;CAChC,CAAC;;AAEF,MAAM,CAAC,OAAO,GAAG,WAAW,CAAC","file":"DOMProperty-compiled.js","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DOMProperty\n * @typechecks static-only\n */\n\n'use strict';\n\nvar invariant = require('fbjs/lib/invariant');\n\nfunction checkMask(value, bitmask) {\n  return (value & bitmask) === bitmask;\n}\n\nvar DOMPropertyInjection = {\n  /**\n   * Mapping from normalized, camelcased property names to a configuration that\n   * specifies how the associated DOM property should be accessed or rendered.\n   */\n  MUST_USE_ATTRIBUTE: 0x1,\n  MUST_USE_PROPERTY: 0x2,\n  HAS_SIDE_EFFECTS: 0x4,\n  HAS_BOOLEAN_VALUE: 0x8,\n  HAS_NUMERIC_VALUE: 0x10,\n  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,\n  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,\n\n  /**\n   * Inject some specialized knowledge about the DOM. This takes a config object\n   * with the following properties:\n   *\n   * isCustomAttribute: function that given an attribute name will return true\n   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*\n   * attributes where it's impossible to enumerate all of the possible\n   * attribute names,\n   *\n   * Properties: object mapping DOM property name to one of the\n   * DOMPropertyInjection constants or null. If your attribute isn't in here,\n   * it won't get written to the DOM.\n   *\n   * DOMAttributeNames: object mapping React attribute name to the DOM\n   * attribute name. Attribute names not specified use the **lowercase**\n   * normalized name.\n   *\n   * DOMAttributeNamespaces: object mapping React attribute name to the DOM\n   * attribute namespace URL. (Attribute names not specified use no namespace.)\n   *\n   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.\n   * Property names not specified use the normalized name.\n   *\n   * DOMMutationMethods: Properties that require special mutation methods. If\n   * `value` is undefined, the mutation method should unset the property.\n   *\n   * @param {object} domPropertyConfig the config as described above.\n   */\n  injectDOMPropertyConfig: function (domPropertyConfig) {\n    var Injection = DOMPropertyInjection;\n    var Properties = domPropertyConfig.Properties || {};\n    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};\n    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};\n    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};\n    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};\n\n    if (domPropertyConfig.isCustomAttribute) {\n      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);\n    }\n\n    for (var propName in Properties) {\n      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\\'re trying to inject DOM property ' + '\\'%s\\' which has already been injected. You may be accidentally ' + 'injecting the same DOM property config twice, or you may be ' + 'injecting two configs that have conflicting property names.', propName) : invariant(false) : undefined;\n\n      var lowerCased = propName.toLowerCase();\n      var propConfig = Properties[propName];\n\n      var propertyInfo = {\n        attributeName: lowerCased,\n        attributeNamespace: null,\n        propertyName: propName,\n        mutationMethod: null,\n\n        mustUseAttribute: checkMask(propConfig, Injection.MUST_USE_ATTRIBUTE),\n        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),\n        hasSideEffects: checkMask(propConfig, Injection.HAS_SIDE_EFFECTS),\n        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),\n        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),\n        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),\n        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)\n      };\n\n      !(!propertyInfo.mustUseAttribute || !propertyInfo.mustUseProperty) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Cannot require using both attribute and property: %s', propName) : invariant(false) : undefined;\n      !(propertyInfo.mustUseProperty || !propertyInfo.hasSideEffects) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Properties that have side effects must use property: %s', propName) : invariant(false) : undefined;\n      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or ' + 'numeric value, but not a combination: %s', propName) : invariant(false) : undefined;\n\n      if (process.env.NODE_ENV !== 'production') {\n        DOMProperty.getPossibleStandardName[lowerCased] = propName;\n      }\n\n      if (DOMAttributeNames.hasOwnProperty(propName)) {\n        var attributeName = DOMAttributeNames[propName];\n        propertyInfo.attributeName = attributeName;\n        if (process.env.NODE_ENV !== 'production') {\n          DOMProperty.getPossibleStandardName[attributeName] = propName;\n        }\n      }\n\n      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {\n        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];\n      }\n\n      if (DOMPropertyNames.hasOwnProperty(propName)) {\n        propertyInfo.propertyName = DOMPropertyNames[propName];\n      }\n\n      if (DOMMutationMethods.hasOwnProperty(propName)) {\n        propertyInfo.mutationMethod = DOMMutationMethods[propName];\n      }\n\n      DOMProperty.properties[propName] = propertyInfo;\n    }\n  }\n};\nvar defaultValueCache = {};\n\n/**\n * DOMProperty exports lookup objects that can be used like functions:\n *\n *   > DOMProperty.isValid['id']\n *   true\n *   > DOMProperty.isValid['foobar']\n *   undefined\n *\n * Although this may be confusing, it performs better in general.\n *\n * @see http://jsperf.com/key-exists\n * @see http://jsperf.com/key-missing\n */\nvar DOMProperty = {\n\n  ID_ATTRIBUTE_NAME: 'data-reactid',\n\n  /**\n   * Map from property \"standard name\" to an object with info about how to set\n   * the property in the DOM. Each object contains:\n   *\n   * attributeName:\n   *   Used when rendering markup or with `*Attribute()`.\n   * attributeNamespace\n   * propertyName:\n   *   Used on DOM node instances. (This includes properties that mutate due to\n   *   external factors.)\n   * mutationMethod:\n   *   If non-null, used instead of the property or `setAttribute()` after\n   *   initial render.\n   * mustUseAttribute:\n   *   Whether the property must be accessed and mutated using `*Attribute()`.\n   *   (This includes anything that fails `<propName> in <element>`.)\n   * mustUseProperty:\n   *   Whether the property must be accessed and mutated as an object property.\n   * hasSideEffects:\n   *   Whether or not setting a value causes side effects such as triggering\n   *   resources to be loaded or text selection changes. If true, we read from\n   *   the DOM before updating to ensure that the value is only set if it has\n   *   changed.\n   * hasBooleanValue:\n   *   Whether the property should be removed when set to a falsey value.\n   * hasNumericValue:\n   *   Whether the property must be numeric or parse as a numeric and should be\n   *   removed when set to a falsey value.\n   * hasPositiveNumericValue:\n   *   Whether the property must be positive numeric or parse as a positive\n   *   numeric and should be removed when set to a falsey value.\n   * hasOverloadedBooleanValue:\n   *   Whether the property can be used as a flag as well as with a value.\n   *   Removed when strictly equal to false; present without a value when\n   *   strictly equal to true; present with a value otherwise.\n   */\n  properties: {},\n\n  /**\n   * Mapping from lowercase property names to the properly cased version, used\n   * to warn in the case of missing properties. Available only in __DEV__.\n   * @type {Object}\n   */\n  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? {} : null,\n\n  /**\n   * All of the isCustomAttribute() functions that have been injected.\n   */\n  _isCustomAttributeFunctions: [],\n\n  /**\n   * Checks whether a property name is a custom attribute.\n   * @method\n   */\n  isCustomAttribute: function (attributeName) {\n    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {\n      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];\n      if (isCustomAttributeFn(attributeName)) {\n        return true;\n      }\n    }\n    return false;\n  },\n\n  /**\n   * Returns the default property value for a DOM property (i.e., not an\n   * attribute). Most default values are '' or false, but not all. Worse yet,\n   * some (in particular, `type`) vary depending on the type of element.\n   *\n   * TODO: Is it better to grab all the possible properties when creating an\n   * element to avoid having to create the same element twice?\n   */\n  getDefaultValueForProperty: function (nodeName, prop) {\n    var nodeDefaults = defaultValueCache[nodeName];\n    var testElement;\n    if (!nodeDefaults) {\n      defaultValueCache[nodeName] = nodeDefaults = {};\n    }\n    if (!(prop in nodeDefaults)) {\n      testElement = document.createElement(nodeName);\n      nodeDefaults[prop] = testElement[prop];\n    }\n    return nodeDefaults[prop];\n  },\n\n  injection: DOMPropertyInjection\n};\n\nmodule.exports = DOMProperty;"]}