{"version":3,"sources":["EventPluginHub.js"],"names":[],"mappings":"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","file":"EventPluginHub-compiled.js","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EventPluginHub\n */\n\n'use strict';\n\nvar EventPluginRegistry = require('./EventPluginRegistry');\nvar EventPluginUtils = require('./EventPluginUtils');\nvar ReactErrorUtils = require('./ReactErrorUtils');\n\nvar accumulateInto = require('./accumulateInto');\nvar forEachAccumulated = require('./forEachAccumulated');\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\n\n/**\n * Internal store for event listeners\n */\nvar listenerBank = {};\n\n/**\n * Internal queue of events that have accumulated their dispatches and are\n * waiting to have their dispatches executed.\n */\nvar eventQueue = null;\n\n/**\n * Dispatches an event and releases it back into the pool, unless persistent.\n *\n * @param {?object} event Synthetic event to be dispatched.\n * @param {boolean} simulated If the event is simulated (changes exn behavior)\n * @private\n */\nvar executeDispatchesAndRelease = function (event, simulated) {\n  if (event) {\n    EventPluginUtils.executeDispatchesInOrder(event, simulated);\n\n    if (!event.isPersistent()) {\n      event.constructor.release(event);\n    }\n  }\n};\nvar executeDispatchesAndReleaseSimulated = function (e) {\n  return executeDispatchesAndRelease(e, true);\n};\nvar executeDispatchesAndReleaseTopLevel = function (e) {\n  return executeDispatchesAndRelease(e, false);\n};\n\n/**\n * - `InstanceHandle`: [required] Module that performs logical traversals of DOM\n *   hierarchy given ids of the logical DOM elements involved.\n */\nvar InstanceHandle = null;\n\nfunction validateInstanceHandle() {\n  var valid = InstanceHandle && InstanceHandle.traverseTwoPhase && InstanceHandle.traverseEnterLeave;\n  process.env.NODE_ENV !== 'production' ? warning(valid, 'InstanceHandle not injected before use!') : undefined;\n}\n\n/**\n * This is a unified interface for event plugins to be installed and configured.\n *\n * Event plugins can implement the following properties:\n *\n *   `extractEvents` {function(string, DOMEventTarget, string, object): *}\n *     Required. When a top-level event is fired, this method is expected to\n *     extract synthetic events that will in turn be queued and dispatched.\n *\n *   `eventTypes` {object}\n *     Optional, plugins that fire events must publish a mapping of registration\n *     names that are used to register listeners. Values of this mapping must\n *     be objects that contain `registrationName` or `phasedRegistrationNames`.\n *\n *   `executeDispatch` {function(object, function, string)}\n *     Optional, allows plugins to override how an event gets dispatched. By\n *     default, the listener is simply invoked.\n *\n * Each plugin that is injected into `EventsPluginHub` is immediately operable.\n *\n * @public\n */\nvar EventPluginHub = {\n\n  /**\n   * Methods for injecting dependencies.\n   */\n  injection: {\n\n    /**\n     * @param {object} InjectedMount\n     * @public\n     */\n    injectMount: EventPluginUtils.injection.injectMount,\n\n    /**\n     * @param {object} InjectedInstanceHandle\n     * @public\n     */\n    injectInstanceHandle: function (InjectedInstanceHandle) {\n      InstanceHandle = InjectedInstanceHandle;\n      if (process.env.NODE_ENV !== 'production') {\n        validateInstanceHandle();\n      }\n    },\n\n    getInstanceHandle: function () {\n      if (process.env.NODE_ENV !== 'production') {\n        validateInstanceHandle();\n      }\n      return InstanceHandle;\n    },\n\n    /**\n     * @param {array} InjectedEventPluginOrder\n     * @public\n     */\n    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,\n\n    /**\n     * @param {object} injectedNamesToPlugins Map from names to plugin modules.\n     */\n    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName\n\n  },\n\n  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,\n\n  registrationNameModules: EventPluginRegistry.registrationNameModules,\n\n  /**\n   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.\n   *\n   * @param {string} id ID of the DOM element.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   * @param {?function} listener The callback to store.\n   */\n  putListener: function (id, registrationName, listener) {\n    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener) : invariant(false) : undefined;\n\n    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});\n    bankForRegistrationName[id] = listener;\n\n    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];\n    if (PluginModule && PluginModule.didPutListener) {\n      PluginModule.didPutListener(id, registrationName, listener);\n    }\n  },\n\n  /**\n   * @param {string} id ID of the DOM element.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   * @return {?function} The stored callback.\n   */\n  getListener: function (id, registrationName) {\n    var bankForRegistrationName = listenerBank[registrationName];\n    return bankForRegistrationName && bankForRegistrationName[id];\n  },\n\n  /**\n   * Deletes a listener from the registration bank.\n   *\n   * @param {string} id ID of the DOM element.\n   * @param {string} registrationName Name of listener (e.g. `onClick`).\n   */\n  deleteListener: function (id, registrationName) {\n    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];\n    if (PluginModule && PluginModule.willDeleteListener) {\n      PluginModule.willDeleteListener(id, registrationName);\n    }\n\n    var bankForRegistrationName = listenerBank[registrationName];\n    // TODO: This should never be null -- when is it?\n    if (bankForRegistrationName) {\n      delete bankForRegistrationName[id];\n    }\n  },\n\n  /**\n   * Deletes all listeners for the DOM element with the supplied ID.\n   *\n   * @param {string} id ID of the DOM element.\n   */\n  deleteAllListeners: function (id) {\n    for (var registrationName in listenerBank) {\n      if (!listenerBank[registrationName][id]) {\n        continue;\n      }\n\n      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];\n      if (PluginModule && PluginModule.willDeleteListener) {\n        PluginModule.willDeleteListener(id, registrationName);\n      }\n\n      delete listenerBank[registrationName][id];\n    }\n  },\n\n  /**\n   * Allows registered plugins an opportunity to extract events from top-level\n   * native browser events.\n   *\n   * @param {string} topLevelType Record from `EventConstants`.\n   * @param {DOMEventTarget} topLevelTarget The listening component root node.\n   * @param {string} topLevelTargetID ID of `topLevelTarget`.\n   * @param {object} nativeEvent Native browser event.\n   * @return {*} An accumulation of synthetic events.\n   * @internal\n   */\n  extractEvents: function (topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {\n    var events;\n    var plugins = EventPluginRegistry.plugins;\n    for (var i = 0; i < plugins.length; i++) {\n      // Not every plugin in the ordering may be loaded at runtime.\n      var possiblePlugin = plugins[i];\n      if (possiblePlugin) {\n        var extractedEvents = possiblePlugin.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);\n        if (extractedEvents) {\n          events = accumulateInto(events, extractedEvents);\n        }\n      }\n    }\n    return events;\n  },\n\n  /**\n   * Enqueues a synthetic event that should be dispatched when\n   * `processEventQueue` is invoked.\n   *\n   * @param {*} events An accumulation of synthetic events.\n   * @internal\n   */\n  enqueueEvents: function (events) {\n    if (events) {\n      eventQueue = accumulateInto(eventQueue, events);\n    }\n  },\n\n  /**\n   * Dispatches all synthetic events on the event queue.\n   *\n   * @internal\n   */\n  processEventQueue: function (simulated) {\n    // Set `eventQueue` to null before processing it so that we can tell if more\n    // events get enqueued while processing.\n    var processingEventQueue = eventQueue;\n    eventQueue = null;\n    if (simulated) {\n      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);\n    } else {\n      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);\n    }\n    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing ' + 'an event queue. Support for this has not yet been implemented.') : invariant(false) : undefined;\n    // This would be a good time to rethrow if any of the event handlers threw.\n    ReactErrorUtils.rethrowCaughtError();\n  },\n\n  /**\n   * These are needed for tests only. Do not use!\n   */\n  __purge: function () {\n    listenerBank = {};\n  },\n\n  __getListenerBank: function () {\n    return listenerBank;\n  }\n\n};\n\nmodule.exports = EventPluginHub;"]}