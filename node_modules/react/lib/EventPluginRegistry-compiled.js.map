{"version":3,"sources":["EventPluginRegistry.js"],"names":[],"mappings":"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","file":"EventPluginRegistry-compiled.js","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EventPluginRegistry\n * @typechecks static-only\n */\n\n'use strict';\n\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n * Injectable ordering of event plugins.\n */\nvar EventPluginOrder = null;\n\n/**\n * Injectable mapping from names to event plugin modules.\n */\nvar namesToPlugins = {};\n\n/**\n * Recomputes the plugin list using the injected plugins and plugin ordering.\n *\n * @private\n */\nfunction recomputePluginOrdering() {\n  if (!EventPluginOrder) {\n    // Wait until an `EventPluginOrder` is injected.\n    return;\n  }\n  for (var pluginName in namesToPlugins) {\n    var PluginModule = namesToPlugins[pluginName];\n    var pluginIndex = EventPluginOrder.indexOf(pluginName);\n    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in ' + 'the plugin ordering, `%s`.', pluginName) : invariant(false) : undefined;\n    if (EventPluginRegistry.plugins[pluginIndex]) {\n      continue;\n    }\n    !PluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` ' + 'method, but `%s` does not.', pluginName) : invariant(false) : undefined;\n    EventPluginRegistry.plugins[pluginIndex] = PluginModule;\n    var publishedEvents = PluginModule.eventTypes;\n    for (var eventName in publishedEvents) {\n      !publishEventForPlugin(publishedEvents[eventName], PluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : invariant(false) : undefined;\n    }\n  }\n}\n\n/**\n * Publishes an event so that it can be dispatched by the supplied plugin.\n *\n * @param {object} dispatchConfig Dispatch configuration for the event.\n * @param {object} PluginModule Plugin publishing the event.\n * @return {boolean} True if the event was successfully published.\n * @private\n */\nfunction publishEventForPlugin(dispatchConfig, PluginModule, eventName) {\n  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'event name, `%s`.', eventName) : invariant(false) : undefined;\n  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;\n\n  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;\n  if (phasedRegistrationNames) {\n    for (var phaseName in phasedRegistrationNames) {\n      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {\n        var phasedRegistrationName = phasedRegistrationNames[phaseName];\n        publishRegistrationName(phasedRegistrationName, PluginModule, eventName);\n      }\n    }\n    return true;\n  } else if (dispatchConfig.registrationName) {\n    publishRegistrationName(dispatchConfig.registrationName, PluginModule, eventName);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Publishes a registration name that is used to identify dispatched events and\n * can be used with `EventPluginHub.putListener` to register listeners.\n *\n * @param {string} registrationName Registration name to add.\n * @param {object} PluginModule Plugin publishing the event.\n * @private\n */\nfunction publishRegistrationName(registrationName, PluginModule, eventName) {\n  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName) : invariant(false) : undefined;\n  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;\n  EventPluginRegistry.registrationNameDependencies[registrationName] = PluginModule.eventTypes[eventName].dependencies;\n}\n\n/**\n * Registers plugins so that they can extract and dispatch events.\n *\n * @see {EventPluginHub}\n */\nvar EventPluginRegistry = {\n\n  /**\n   * Ordered list of injected plugins.\n   */\n  plugins: [],\n\n  /**\n   * Mapping from event name to dispatch config\n   */\n  eventNameDispatchConfigs: {},\n\n  /**\n   * Mapping from registration name to plugin module\n   */\n  registrationNameModules: {},\n\n  /**\n   * Mapping from registration name to event name\n   */\n  registrationNameDependencies: {},\n\n  /**\n   * Injects an ordering of plugins (by plugin name). This allows the ordering\n   * to be decoupled from injection of the actual plugins so that ordering is\n   * always deterministic regardless of packaging, on-the-fly injection, etc.\n   *\n   * @param {array} InjectedEventPluginOrder\n   * @internal\n   * @see {EventPluginHub.injection.injectEventPluginOrder}\n   */\n  injectEventPluginOrder: function (InjectedEventPluginOrder) {\n    !!EventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than ' + 'once. You are likely trying to load more than one copy of React.') : invariant(false) : undefined;\n    // Clone the ordering so it cannot be dynamically mutated.\n    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);\n    recomputePluginOrdering();\n  },\n\n  /**\n   * Injects plugins to be used by `EventPluginHub`. The plugin names must be\n   * in the ordering injected by `injectEventPluginOrder`.\n   *\n   * Plugins can be injected as part of page initialization or on-the-fly.\n   *\n   * @param {object} injectedNamesToPlugins Map from names to plugin modules.\n   * @internal\n   * @see {EventPluginHub.injection.injectEventPluginsByName}\n   */\n  injectEventPluginsByName: function (injectedNamesToPlugins) {\n    var isOrderingDirty = false;\n    for (var pluginName in injectedNamesToPlugins) {\n      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {\n        continue;\n      }\n      var PluginModule = injectedNamesToPlugins[pluginName];\n      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== PluginModule) {\n        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins ' + 'using the same name, `%s`.', pluginName) : invariant(false) : undefined;\n        namesToPlugins[pluginName] = PluginModule;\n        isOrderingDirty = true;\n      }\n    }\n    if (isOrderingDirty) {\n      recomputePluginOrdering();\n    }\n  },\n\n  /**\n   * Looks up the plugin for the supplied event.\n   *\n   * @param {object} event A synthetic event.\n   * @return {?object} The plugin that created the supplied event.\n   * @internal\n   */\n  getPluginModuleForEvent: function (event) {\n    var dispatchConfig = event.dispatchConfig;\n    if (dispatchConfig.registrationName) {\n      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;\n    }\n    for (var phase in dispatchConfig.phasedRegistrationNames) {\n      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {\n        continue;\n      }\n      var PluginModule = EventPluginRegistry.registrationNameModules[dispatchConfig.phasedRegistrationNames[phase]];\n      if (PluginModule) {\n        return PluginModule;\n      }\n    }\n    return null;\n  },\n\n  /**\n   * Exposed for unit testing.\n   * @private\n   */\n  _resetEventPlugins: function () {\n    EventPluginOrder = null;\n    for (var pluginName in namesToPlugins) {\n      if (namesToPlugins.hasOwnProperty(pluginName)) {\n        delete namesToPlugins[pluginName];\n      }\n    }\n    EventPluginRegistry.plugins.length = 0;\n\n    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;\n    for (var eventName in eventNameDispatchConfigs) {\n      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {\n        delete eventNameDispatchConfigs[eventName];\n      }\n    }\n\n    var registrationNameModules = EventPluginRegistry.registrationNameModules;\n    for (var registrationName in registrationNameModules) {\n      if (registrationNameModules.hasOwnProperty(registrationName)) {\n        delete registrationNameModules[registrationName];\n      }\n    }\n  }\n\n};\n\nmodule.exports = EventPluginRegistry;"]}