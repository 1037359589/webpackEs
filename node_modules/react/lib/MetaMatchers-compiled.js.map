{"version":3,"sources":["MetaMatchers.js"],"names":[],"mappings":"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","file":"MetaMatchers-compiled.js","sourcesContent":["/**\n * Copyright 2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule MetaMatchers\n */\n\n'use strict';\n\n/**\n * This modules adds a jasmine matcher toEqualSpecsIn that can be used to\n * compare the specs in two different \"describe\" functions and their result.\n * It can be used to test a test.\n */\n\nfunction getRunnerWithResults(describeFunction) {\n  if (describeFunction._cachedRunner) {\n    // Cached result of execution. This is a convenience way to test against\n    // the same authorative function multiple times.\n    return describeFunction._cachedRunner;\n  }\n  // Patch the current global environment.\n  var env = new jasmine.Env();\n  // Execute the tests synchronously.\n  env.updateInterval = 0;\n  var outerGetEnv = jasmine.getEnv;\n  jasmine.getEnv = function () {\n    return env;\n  };\n  // TODO: Bring over matchers from the existing environment.\n  var runner = env.currentRunner();\n  try {\n    env.describe('', describeFunction);\n    env.execute();\n  } finally {\n    // Restore the environment.\n    jasmine.getEnv = outerGetEnv;\n  }\n  describeFunction._cachedRunner = runner;\n  return runner;\n}\n\nfunction compareSpec(actual, expected) {\n  if (actual.results().totalCount !== expected.results().totalCount) {\n    return 'Expected ' + expected.results().totalCount + ' expects, ' + 'but got ' + actual.results().totalCount + ':' + actual.getFullName();\n  }\n  return null;\n}\n\nfunction includesDescription(specs, description, startIndex) {\n  for (var i = startIndex; i < specs.length; i++) {\n    if (specs[i].description === description) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction compareSpecs(actualSpecs, expectedSpecs) {\n  for (var i = 0; i < actualSpecs.length && i < expectedSpecs.length; i++) {\n    var actual = actualSpecs[i];\n    var expected = expectedSpecs[i];\n    if (actual.description === expected.description) {\n      var errorMessage = compareSpec(actual, expected);\n      if (errorMessage) {\n        return errorMessage;\n      }\n      continue;\n    } else if (includesDescription(actualSpecs, expected.description, i)) {\n      return 'Did not expect the spec:' + actualSpecs[i].getFullName();\n    } else {\n      return 'Expected an equivalent to:' + expectedSpecs[i].getFullName();\n    }\n  }\n  if (i < actualSpecs.length) {\n    return 'Did not expect the spec:' + actualSpecs[i].getFullName();\n  }\n  if (i < expectedSpecs.length) {\n    return 'Expected an equivalent to:' + expectedSpecs[i].getFullName();\n  }\n  return null;\n}\n\nfunction compareDescription(a, b) {\n  if (a.description === b.description) {\n    return 0;\n  }\n  return a.description < b.description ? -1 : 1;\n}\n\nfunction compareRunners(actual, expected) {\n  return compareSpecs(actual.specs().sort(compareDescription), expected.specs().sort(compareDescription));\n}\n\nvar MetaMatchers = {\n  toEqualSpecsIn: function (expectedDescribeFunction) {\n    var actualDescribeFunction = this.actual;\n    if (typeof actualDescribeFunction !== 'function') {\n      throw Error('toEqualSpecsIn() should be used on a describe function');\n    }\n    if (typeof expectedDescribeFunction !== 'function') {\n      throw Error('toEqualSpecsIn() should be passed a describe function');\n    }\n    var actual = getRunnerWithResults(actualDescribeFunction);\n    var expected = getRunnerWithResults(expectedDescribeFunction);\n    var errorMessage = compareRunners(actual, expected);\n    this.message = function () {\n      return [errorMessage, 'The specs are equal. Expected them to be different.'];\n    };\n    return !errorMessage;\n  }\n};\n\nmodule.exports = MetaMatchers;"]}