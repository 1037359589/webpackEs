{"version":3,"sources":["ReactDOMInput.js"],"names":[],"mappings":"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","file":"ReactDOMInput-compiled.js","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMInput\n */\n\n'use strict';\n\nvar ReactDOMIDOperations = require('./ReactDOMIDOperations');\nvar LinkedValueUtils = require('./LinkedValueUtils');\nvar ReactMount = require('./ReactMount');\nvar ReactUpdates = require('./ReactUpdates');\n\nvar assign = require('./Object.assign');\nvar invariant = require('fbjs/lib/invariant');\n\nvar instancesByReactID = {};\n\nfunction forceUpdateIfMounted() {\n  if (this._rootNodeID) {\n    // DOM component is still mounted; update\n    ReactDOMInput.updateWrapper(this);\n  }\n}\n\n/**\n * Implements an <input> native component that allows setting these optional\n * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.\n *\n * If `checked` or `value` are not supplied (or null/undefined), user actions\n * that affect the checked state or value will trigger updates to the element.\n *\n * If they are supplied (and not null/undefined), the rendered element will not\n * trigger updates to the element. Instead, the props must change in order for\n * the rendered element to be updated.\n *\n * The rendered element will be initialized as unchecked (or `defaultChecked`)\n * with an empty value (or `defaultValue`).\n *\n * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html\n */\nvar ReactDOMInput = {\n  getNativeProps: function (inst, props, context) {\n    var value = LinkedValueUtils.getValue(props);\n    var checked = LinkedValueUtils.getChecked(props);\n\n    var nativeProps = assign({}, props, {\n      defaultChecked: undefined,\n      defaultValue: undefined,\n      value: value != null ? value : inst._wrapperState.initialValue,\n      checked: checked != null ? checked : inst._wrapperState.initialChecked,\n      onChange: inst._wrapperState.onChange\n    });\n\n    return nativeProps;\n  },\n\n  mountWrapper: function (inst, props) {\n    if (process.env.NODE_ENV !== 'production') {\n      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);\n    }\n\n    var defaultValue = props.defaultValue;\n    inst._wrapperState = {\n      initialChecked: props.defaultChecked || false,\n      initialValue: defaultValue != null ? defaultValue : null,\n      onChange: _handleChange.bind(inst)\n    };\n  },\n\n  mountReadyWrapper: function (inst) {\n    // Can't be in mountWrapper or else server rendering leaks.\n    instancesByReactID[inst._rootNodeID] = inst;\n  },\n\n  unmountWrapper: function (inst) {\n    delete instancesByReactID[inst._rootNodeID];\n  },\n\n  updateWrapper: function (inst) {\n    var props = inst._currentElement.props;\n\n    // TODO: Shouldn't this be getChecked(props)?\n    var checked = props.checked;\n    if (checked != null) {\n      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'checked', checked || false);\n    }\n\n    var value = LinkedValueUtils.getValue(props);\n    if (value != null) {\n      // Cast `value` to a string to ensure the value is set correctly. While\n      // browsers typically do this as necessary, jsdom doesn't.\n      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);\n    }\n  }\n};\n\nfunction _handleChange(event) {\n  var props = this._currentElement.props;\n\n  var returnValue = LinkedValueUtils.executeOnChange(props, event);\n\n  // Here we use asap to wait until all updates have propagated, which\n  // is important when using controlled components within layers:\n  // https://github.com/facebook/react/issues/1698\n  ReactUpdates.asap(forceUpdateIfMounted, this);\n\n  var name = props.name;\n  if (props.type === 'radio' && name != null) {\n    var rootNode = ReactMount.getNode(this._rootNodeID);\n    var queryRoot = rootNode;\n\n    while (queryRoot.parentNode) {\n      queryRoot = queryRoot.parentNode;\n    }\n\n    // If `rootNode.form` was non-null, then we could try `form.elements`,\n    // but that sometimes behaves strangely in IE8. We could also try using\n    // `form.getElementsByName`, but that will only return direct children\n    // and won't include inputs that use the HTML5 `form=` attribute. Since\n    // the input might not even be in a form, let's just use the global\n    // `querySelectorAll` to ensure we don't miss anything.\n    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type=\"radio\"]');\n\n    for (var i = 0; i < group.length; i++) {\n      var otherNode = group[i];\n      if (otherNode === rootNode || otherNode.form !== rootNode.form) {\n        continue;\n      }\n      // This will throw if radio buttons rendered by different copies of React\n      // and the same name are rendered into the same form (same as #1939).\n      // That's probably okay; we don't support it just as we don't support\n      // mixing React with non-React.\n      var otherID = ReactMount.getID(otherNode);\n      !otherID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.') : invariant(false) : undefined;\n      var otherInstance = instancesByReactID[otherID];\n      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Unknown radio button ID %s.', otherID) : invariant(false) : undefined;\n      // If this is a controlled radio button group, forcing the input that\n      // was previously checked to update will cause it to be come re-checked\n      // as appropriate.\n      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);\n    }\n  }\n\n  return returnValue;\n}\n\nmodule.exports = ReactDOMInput;"]}