{"version":3,"sources":["ReactDOMTextarea.js"],"names":[],"mappings":"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","file":"ReactDOMTextarea-compiled.js","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDOMTextarea\n */\n\n'use strict';\n\nvar LinkedValueUtils = require('./LinkedValueUtils');\nvar ReactDOMIDOperations = require('./ReactDOMIDOperations');\nvar ReactUpdates = require('./ReactUpdates');\n\nvar assign = require('./Object.assign');\nvar invariant = require('fbjs/lib/invariant');\nvar warning = require('fbjs/lib/warning');\n\nfunction forceUpdateIfMounted() {\n  if (this._rootNodeID) {\n    // DOM component is still mounted; update\n    ReactDOMTextarea.updateWrapper(this);\n  }\n}\n\n/**\n * Implements a <textarea> native component that allows setting `value`, and\n * `defaultValue`. This differs from the traditional DOM API because value is\n * usually set as PCDATA children.\n *\n * If `value` is not supplied (or null/undefined), user actions that affect the\n * value will trigger updates to the element.\n *\n * If `value` is supplied (and not null/undefined), the rendered element will\n * not trigger updates to the element. Instead, the `value` prop must change in\n * order for the rendered element to be updated.\n *\n * The rendered element will be initialized with an empty value, the prop\n * `defaultValue` if specified, or the children content (deprecated).\n */\nvar ReactDOMTextarea = {\n  getNativeProps: function (inst, props, context) {\n    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : invariant(false) : undefined;\n\n    // Always set children to the same thing. In IE9, the selection range will\n    // get reset if `textContent` is mutated.\n    var nativeProps = assign({}, props, {\n      defaultValue: undefined,\n      value: undefined,\n      children: inst._wrapperState.initialValue,\n      onChange: inst._wrapperState.onChange\n    });\n\n    return nativeProps;\n  },\n\n  mountWrapper: function (inst, props) {\n    if (process.env.NODE_ENV !== 'production') {\n      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);\n    }\n\n    var defaultValue = props.defaultValue;\n    // TODO (yungsters): Remove support for children content in <textarea>.\n    var children = props.children;\n    if (children != null) {\n      if (process.env.NODE_ENV !== 'production') {\n        process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : undefined;\n      }\n      !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : invariant(false) : undefined;\n      if (Array.isArray(children)) {\n        !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : invariant(false) : undefined;\n        children = children[0];\n      }\n\n      defaultValue = '' + children;\n    }\n    if (defaultValue == null) {\n      defaultValue = '';\n    }\n    var value = LinkedValueUtils.getValue(props);\n\n    inst._wrapperState = {\n      // We save the initial value so that `ReactDOMComponent` doesn't update\n      // `textContent` (unnecessary since we update value).\n      // The initial value can be a boolean or object so that's why it's\n      // forced to be a string.\n      initialValue: '' + (value != null ? value : defaultValue),\n      onChange: _handleChange.bind(inst)\n    };\n  },\n\n  updateWrapper: function (inst) {\n    var props = inst._currentElement.props;\n    var value = LinkedValueUtils.getValue(props);\n    if (value != null) {\n      // Cast `value` to a string to ensure the value is set correctly. While\n      // browsers typically do this as necessary, jsdom doesn't.\n      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);\n    }\n  }\n};\n\nfunction _handleChange(event) {\n  var props = this._currentElement.props;\n  var returnValue = LinkedValueUtils.executeOnChange(props, event);\n  ReactUpdates.asap(forceUpdateIfMounted, this);\n  return returnValue;\n}\n\nmodule.exports = ReactDOMTextarea;"]}