{"version":3,"sources":["ReactDefaultBatchingStrategy.js"],"names":[],"mappings":";;;;;;;;;;;AAWA,YAAY,CAAC;;AAEb,IAAI,YAAY,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC;AAC7C,IAAI,WAAW,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;;AAE3C,IAAI,MAAM,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC;AACxC,IAAI,aAAa,GAAG,OAAO,CAAC,wBAAwB,CAAC,CAAC;;AAEtD,IAAI,qBAAqB,GAAG;AAC1B,YAAU,EAAE,aAAa;AACzB,OAAK,EAAE,YAAY;AACjB,gCAA4B,CAAC,iBAAiB,GAAG,KAAK,CAAC;GACxD;CACF,CAAC;;AAEF,IAAI,qBAAqB,GAAG;AAC1B,YAAU,EAAE,aAAa;AACzB,OAAK,EAAE,YAAY,CAAC,mBAAmB,CAAC,IAAI,CAAC,YAAY,CAAC;CAC3D,CAAC;;AAEF,IAAI,oBAAoB,GAAG,CAAC,qBAAqB,EAAE,qBAAqB,CAAC,CAAC;;AAE1E,SAAS,uCAAuC,GAAG;AACjD,MAAI,CAAC,uBAAuB,EAAE,CAAC;CAChC;;AAED,MAAM,CAAC,uCAAuC,CAAC,SAAS,EAAE,WAAW,CAAC,KAAK,EAAE;AAC3E,wBAAsB,EAAE,YAAY;AAClC,WAAO,oBAAoB,CAAC;GAC7B;CACF,CAAC,CAAC;;AAEH,IAAI,WAAW,GAAG,IAAI,uCAAuC,EAAE,CAAC;;AAEhE,IAAI,4BAA4B,GAAG;AACjC,mBAAiB,EAAE,KAAK;;;;;;AAMxB,gBAAc,EAAE,UAAU,QAAQ,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;AACjD,QAAI,sBAAsB,GAAG,4BAA4B,CAAC,iBAAiB,CAAC;;AAE5E,gCAA4B,CAAC,iBAAiB,GAAG,IAAI;;;AAAC,AAGtD,QAAI,sBAAsB,EAAE;AAC1B,cAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;KACzB,MAAM;AACL,iBAAW,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;KACpD;GACF;CACF,CAAC;;AAEF,MAAM,CAAC,OAAO,GAAG,4BAA4B,CAAC","file":"ReactDefaultBatchingStrategy-compiled.js","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactDefaultBatchingStrategy\n */\n\n'use strict';\n\nvar ReactUpdates = require('./ReactUpdates');\nvar Transaction = require('./Transaction');\n\nvar assign = require('./Object.assign');\nvar emptyFunction = require('fbjs/lib/emptyFunction');\n\nvar RESET_BATCHED_UPDATES = {\n  initialize: emptyFunction,\n  close: function () {\n    ReactDefaultBatchingStrategy.isBatchingUpdates = false;\n  }\n};\n\nvar FLUSH_BATCHED_UPDATES = {\n  initialize: emptyFunction,\n  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)\n};\n\nvar TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];\n\nfunction ReactDefaultBatchingStrategyTransaction() {\n  this.reinitializeTransaction();\n}\n\nassign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction.Mixin, {\n  getTransactionWrappers: function () {\n    return TRANSACTION_WRAPPERS;\n  }\n});\n\nvar transaction = new ReactDefaultBatchingStrategyTransaction();\n\nvar ReactDefaultBatchingStrategy = {\n  isBatchingUpdates: false,\n\n  /**\n   * Call the provided function in a context within which calls to `setState`\n   * and friends are batched such that components aren't updated unnecessarily.\n   */\n  batchedUpdates: function (callback, a, b, c, d, e) {\n    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;\n\n    ReactDefaultBatchingStrategy.isBatchingUpdates = true;\n\n    // The code is written this way to avoid extra allocations\n    if (alreadyBatchingUpdates) {\n      callback(a, b, c, d, e);\n    } else {\n      transaction.perform(callback, null, a, b, c, d, e);\n    }\n  }\n};\n\nmodule.exports = ReactDefaultBatchingStrategy;"]}