{"version":3,"sources":["ReactInputSelection.js"],"names":[],"mappings":"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","file":"ReactInputSelection-compiled.js","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactInputSelection\n */\n\n'use strict';\n\nvar ReactDOMSelection = require('./ReactDOMSelection');\n\nvar containsNode = require('fbjs/lib/containsNode');\nvar focusNode = require('fbjs/lib/focusNode');\nvar getActiveElement = require('fbjs/lib/getActiveElement');\n\nfunction isInDocument(node) {\n  return containsNode(document.documentElement, node);\n}\n\n/**\n * @ReactInputSelection: React input selection module. Based on Selection.js,\n * but modified to be suitable for react and has a couple of bug fixes (doesn't\n * assume buttons have range selections allowed).\n * Input selection module for React.\n */\nvar ReactInputSelection = {\n\n  hasSelectionCapabilities: function (elem) {\n    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();\n    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');\n  },\n\n  getSelectionInformation: function () {\n    var focusedElem = getActiveElement();\n    return {\n      focusedElem: focusedElem,\n      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null\n    };\n  },\n\n  /**\n   * @restoreSelection: If any selection information was potentially lost,\n   * restore it. This is useful when performing operations that could remove dom\n   * nodes and place them back in, resulting in focus being lost.\n   */\n  restoreSelection: function (priorSelectionInformation) {\n    var curFocusedElem = getActiveElement();\n    var priorFocusedElem = priorSelectionInformation.focusedElem;\n    var priorSelectionRange = priorSelectionInformation.selectionRange;\n    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {\n      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {\n        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);\n      }\n      focusNode(priorFocusedElem);\n    }\n  },\n\n  /**\n   * @getSelection: Gets the selection bounds of a focused textarea, input or\n   * contentEditable node.\n   * -@input: Look up selection bounds of this input\n   * -@return {start: selectionStart, end: selectionEnd}\n   */\n  getSelection: function (input) {\n    var selection;\n\n    if ('selectionStart' in input) {\n      // Modern browser with input or textarea.\n      selection = {\n        start: input.selectionStart,\n        end: input.selectionEnd\n      };\n    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {\n      // IE8 input.\n      var range = document.selection.createRange();\n      // There can only be one selection per document in IE, so it must\n      // be in our element.\n      if (range.parentElement() === input) {\n        selection = {\n          start: -range.moveStart('character', -input.value.length),\n          end: -range.moveEnd('character', -input.value.length)\n        };\n      }\n    } else {\n      // Content editable or old IE textarea.\n      selection = ReactDOMSelection.getOffsets(input);\n    }\n\n    return selection || { start: 0, end: 0 };\n  },\n\n  /**\n   * @setSelection: Sets the selection bounds of a textarea or input and focuses\n   * the input.\n   * -@input     Set selection bounds of this input or textarea\n   * -@offsets   Object of same form that is returned from get*\n   */\n  setSelection: function (input, offsets) {\n    var start = offsets.start;\n    var end = offsets.end;\n    if (typeof end === 'undefined') {\n      end = start;\n    }\n\n    if ('selectionStart' in input) {\n      input.selectionStart = start;\n      input.selectionEnd = Math.min(end, input.value.length);\n    } else if (document.selection && (input.nodeName && input.nodeName.toLowerCase() === 'input')) {\n      var range = input.createTextRange();\n      range.collapse(true);\n      range.moveStart('character', start);\n      range.moveEnd('character', end - start);\n      range.select();\n    } else {\n      ReactDOMSelection.setOffsets(input, offsets);\n    }\n  }\n};\n\nmodule.exports = ReactInputSelection;"]}