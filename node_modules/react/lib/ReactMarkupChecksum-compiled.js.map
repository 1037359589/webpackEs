{"version":3,"sources":["ReactMarkupChecksum.js"],"names":[],"mappings":";;;;;;;;;;;AAWA,YAAY,CAAC;;AAEb,IAAI,OAAO,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;;AAEnC,IAAI,OAAO,GAAG,MAAM,CAAC;;AAErB,IAAI,mBAAmB,GAAG;AACxB,oBAAkB,EAAE,qBAAqB;;;;;;AAMzC,qBAAmB,EAAE,UAAU,MAAM,EAAE;AACrC,QAAI,QAAQ,GAAG,OAAO,CAAC,MAAM,CAAC;;;AAAC,AAG/B,WAAO,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,GAAG,mBAAmB,CAAC,kBAAkB,GAAG,IAAI,GAAG,QAAQ,GAAG,KAAK,CAAC,CAAC;GACxG;;;;;;;AAOD,gBAAc,EAAE,UAAU,MAAM,EAAE,OAAO,EAAE;AACzC,QAAI,gBAAgB,GAAG,OAAO,CAAC,YAAY,CAAC,mBAAmB,CAAC,kBAAkB,CAAC,CAAC;AACpF,oBAAgB,GAAG,gBAAgB,IAAI,QAAQ,CAAC,gBAAgB,EAAE,EAAE,CAAC,CAAC;AACtE,QAAI,cAAc,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AACrC,WAAO,cAAc,KAAK,gBAAgB,CAAC;GAC5C;CACF,CAAC;;AAEF,MAAM,CAAC,OAAO,GAAG,mBAAmB,CAAC","file":"ReactMarkupChecksum-compiled.js","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactMarkupChecksum\n */\n\n'use strict';\n\nvar adler32 = require('./adler32');\n\nvar TAG_END = /\\/?>/;\n\nvar ReactMarkupChecksum = {\n  CHECKSUM_ATTR_NAME: 'data-react-checksum',\n\n  /**\n   * @param {string} markup Markup string\n   * @return {string} Markup string with checksum attribute attached\n   */\n  addChecksumToMarkup: function (markup) {\n    var checksum = adler32(markup);\n\n    // Add checksum (handle both parent tags and self-closing tags)\n    return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '=\"' + checksum + '\"$&');\n  },\n\n  /**\n   * @param {string} markup to use\n   * @param {DOMElement} element root React element\n   * @returns {boolean} whether or not the markup is the same\n   */\n  canReuseMarkup: function (markup, element) {\n    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);\n    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);\n    var markupChecksum = adler32(markup);\n    return markupChecksum === existingChecksum;\n  }\n};\n\nmodule.exports = ReactMarkupChecksum;"]}