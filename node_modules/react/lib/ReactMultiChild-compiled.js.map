{"version":3,"sources":["ReactMultiChild.js"],"names":[],"mappings":"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","file":"ReactMultiChild-compiled.js","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactMultiChild\n * @typechecks static-only\n */\n\n'use strict';\n\nvar ReactComponentEnvironment = require('./ReactComponentEnvironment');\nvar ReactMultiChildUpdateTypes = require('./ReactMultiChildUpdateTypes');\n\nvar ReactCurrentOwner = require('./ReactCurrentOwner');\nvar ReactReconciler = require('./ReactReconciler');\nvar ReactChildReconciler = require('./ReactChildReconciler');\n\nvar flattenChildren = require('./flattenChildren');\n\n/**\n * Updating children of a component may trigger recursive updates. The depth is\n * used to batch recursive updates to render markup more efficiently.\n *\n * @type {number}\n * @private\n */\nvar updateDepth = 0;\n\n/**\n * Queue of update configuration objects.\n *\n * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.\n *\n * @type {array<object>}\n * @private\n */\nvar updateQueue = [];\n\n/**\n * Queue of markup to be rendered.\n *\n * @type {array<string>}\n * @private\n */\nvar markupQueue = [];\n\n/**\n * Enqueues markup to be rendered and inserted at a supplied index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {string} markup Markup that renders into an element.\n * @param {number} toIndex Destination index.\n * @private\n */\nfunction enqueueInsertMarkup(parentID, markup, toIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,\n    markupIndex: markupQueue.push(markup) - 1,\n    content: null,\n    fromIndex: null,\n    toIndex: toIndex\n  });\n}\n\n/**\n * Enqueues moving an existing element to another index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {number} fromIndex Source index of the existing element.\n * @param {number} toIndex Destination index of the element.\n * @private\n */\nfunction enqueueMove(parentID, fromIndex, toIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,\n    markupIndex: null,\n    content: null,\n    fromIndex: fromIndex,\n    toIndex: toIndex\n  });\n}\n\n/**\n * Enqueues removing an element at an index.\n *\n * @param {string} parentID ID of the parent component.\n * @param {number} fromIndex Index of the element to remove.\n * @private\n */\nfunction enqueueRemove(parentID, fromIndex) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.REMOVE_NODE,\n    markupIndex: null,\n    content: null,\n    fromIndex: fromIndex,\n    toIndex: null\n  });\n}\n\n/**\n * Enqueues setting the markup of a node.\n *\n * @param {string} parentID ID of the parent component.\n * @param {string} markup Markup that renders into an element.\n * @private\n */\nfunction enqueueSetMarkup(parentID, markup) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.SET_MARKUP,\n    markupIndex: null,\n    content: markup,\n    fromIndex: null,\n    toIndex: null\n  });\n}\n\n/**\n * Enqueues setting the text content.\n *\n * @param {string} parentID ID of the parent component.\n * @param {string} textContent Text content to set.\n * @private\n */\nfunction enqueueTextContent(parentID, textContent) {\n  // NOTE: Null values reduce hidden classes.\n  updateQueue.push({\n    parentID: parentID,\n    parentNode: null,\n    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,\n    markupIndex: null,\n    content: textContent,\n    fromIndex: null,\n    toIndex: null\n  });\n}\n\n/**\n * Processes any enqueued updates.\n *\n * @private\n */\nfunction processQueue() {\n  if (updateQueue.length) {\n    ReactComponentEnvironment.processChildrenUpdates(updateQueue, markupQueue);\n    clearQueue();\n  }\n}\n\n/**\n * Clears any enqueued updates.\n *\n * @private\n */\nfunction clearQueue() {\n  updateQueue.length = 0;\n  markupQueue.length = 0;\n}\n\n/**\n * ReactMultiChild are capable of reconciling multiple children.\n *\n * @class ReactMultiChild\n * @internal\n */\nvar ReactMultiChild = {\n\n  /**\n   * Provides common functionality for components that must reconcile multiple\n   * children. This is used by `ReactDOMComponent` to mount, update, and\n   * unmount child components.\n   *\n   * @lends {ReactMultiChild.prototype}\n   */\n  Mixin: {\n\n    _reconcilerInstantiateChildren: function (nestedChildren, transaction, context) {\n      if (process.env.NODE_ENV !== 'production') {\n        if (this._currentElement) {\n          try {\n            ReactCurrentOwner.current = this._currentElement._owner;\n            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);\n          } finally {\n            ReactCurrentOwner.current = null;\n          }\n        }\n      }\n      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);\n    },\n\n    _reconcilerUpdateChildren: function (prevChildren, nextNestedChildrenElements, transaction, context) {\n      var nextChildren;\n      if (process.env.NODE_ENV !== 'production') {\n        if (this._currentElement) {\n          try {\n            ReactCurrentOwner.current = this._currentElement._owner;\n            nextChildren = flattenChildren(nextNestedChildrenElements);\n          } finally {\n            ReactCurrentOwner.current = null;\n          }\n          return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);\n        }\n      }\n      nextChildren = flattenChildren(nextNestedChildrenElements);\n      return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);\n    },\n\n    /**\n     * Generates a \"mount image\" for each of the supplied children. In the case\n     * of `ReactDOMComponent`, a mount image is a string of markup.\n     *\n     * @param {?object} nestedChildren Nested child maps.\n     * @return {array} An array of mounted representations.\n     * @internal\n     */\n    mountChildren: function (nestedChildren, transaction, context) {\n      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);\n      this._renderedChildren = children;\n      var mountImages = [];\n      var index = 0;\n      for (var name in children) {\n        if (children.hasOwnProperty(name)) {\n          var child = children[name];\n          // Inlined for performance, see `ReactInstanceHandles.createReactID`.\n          var rootID = this._rootNodeID + name;\n          var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);\n          child._mountIndex = index++;\n          mountImages.push(mountImage);\n        }\n      }\n      return mountImages;\n    },\n\n    /**\n     * Replaces any rendered children with a text content string.\n     *\n     * @param {string} nextContent String of content.\n     * @internal\n     */\n    updateTextContent: function (nextContent) {\n      updateDepth++;\n      var errorThrown = true;\n      try {\n        var prevChildren = this._renderedChildren;\n        // Remove any rendered children.\n        ReactChildReconciler.unmountChildren(prevChildren);\n        // TODO: The setTextContent operation should be enough\n        for (var name in prevChildren) {\n          if (prevChildren.hasOwnProperty(name)) {\n            this._unmountChild(prevChildren[name]);\n          }\n        }\n        // Set new text content.\n        this.setTextContent(nextContent);\n        errorThrown = false;\n      } finally {\n        updateDepth--;\n        if (!updateDepth) {\n          if (errorThrown) {\n            clearQueue();\n          } else {\n            processQueue();\n          }\n        }\n      }\n    },\n\n    /**\n     * Replaces any rendered children with a markup string.\n     *\n     * @param {string} nextMarkup String of markup.\n     * @internal\n     */\n    updateMarkup: function (nextMarkup) {\n      updateDepth++;\n      var errorThrown = true;\n      try {\n        var prevChildren = this._renderedChildren;\n        // Remove any rendered children.\n        ReactChildReconciler.unmountChildren(prevChildren);\n        for (var name in prevChildren) {\n          if (prevChildren.hasOwnProperty(name)) {\n            this._unmountChildByName(prevChildren[name], name);\n          }\n        }\n        this.setMarkup(nextMarkup);\n        errorThrown = false;\n      } finally {\n        updateDepth--;\n        if (!updateDepth) {\n          if (errorThrown) {\n            clearQueue();\n          } else {\n            processQueue();\n          }\n        }\n      }\n    },\n\n    /**\n     * Updates the rendered children with new children.\n     *\n     * @param {?object} nextNestedChildrenElements Nested child element maps.\n     * @param {ReactReconcileTransaction} transaction\n     * @internal\n     */\n    updateChildren: function (nextNestedChildrenElements, transaction, context) {\n      updateDepth++;\n      var errorThrown = true;\n      try {\n        this._updateChildren(nextNestedChildrenElements, transaction, context);\n        errorThrown = false;\n      } finally {\n        updateDepth--;\n        if (!updateDepth) {\n          if (errorThrown) {\n            clearQueue();\n          } else {\n            processQueue();\n          }\n        }\n      }\n    },\n\n    /**\n     * Improve performance by isolating this hot code path from the try/catch\n     * block in `updateChildren`.\n     *\n     * @param {?object} nextNestedChildrenElements Nested child element maps.\n     * @param {ReactReconcileTransaction} transaction\n     * @final\n     * @protected\n     */\n    _updateChildren: function (nextNestedChildrenElements, transaction, context) {\n      var prevChildren = this._renderedChildren;\n      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, transaction, context);\n      this._renderedChildren = nextChildren;\n      if (!nextChildren && !prevChildren) {\n        return;\n      }\n      var name;\n      // `nextIndex` will increment for each child in `nextChildren`, but\n      // `lastIndex` will be the last index visited in `prevChildren`.\n      var lastIndex = 0;\n      var nextIndex = 0;\n      for (name in nextChildren) {\n        if (!nextChildren.hasOwnProperty(name)) {\n          continue;\n        }\n        var prevChild = prevChildren && prevChildren[name];\n        var nextChild = nextChildren[name];\n        if (prevChild === nextChild) {\n          this.moveChild(prevChild, nextIndex, lastIndex);\n          lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n          prevChild._mountIndex = nextIndex;\n        } else {\n          if (prevChild) {\n            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.\n            lastIndex = Math.max(prevChild._mountIndex, lastIndex);\n            this._unmountChild(prevChild);\n          }\n          // The child must be instantiated before it's mounted.\n          this._mountChildByNameAtIndex(nextChild, name, nextIndex, transaction, context);\n        }\n        nextIndex++;\n      }\n      // Remove children that are no longer present.\n      for (name in prevChildren) {\n        if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {\n          this._unmountChild(prevChildren[name]);\n        }\n      }\n    },\n\n    /**\n     * Unmounts all rendered children. This should be used to clean up children\n     * when this component is unmounted.\n     *\n     * @internal\n     */\n    unmountChildren: function () {\n      var renderedChildren = this._renderedChildren;\n      ReactChildReconciler.unmountChildren(renderedChildren);\n      this._renderedChildren = null;\n    },\n\n    /**\n     * Moves a child component to the supplied index.\n     *\n     * @param {ReactComponent} child Component to move.\n     * @param {number} toIndex Destination index of the element.\n     * @param {number} lastIndex Last index visited of the siblings of `child`.\n     * @protected\n     */\n    moveChild: function (child, toIndex, lastIndex) {\n      // If the index of `child` is less than `lastIndex`, then it needs to\n      // be moved. Otherwise, we do not need to move it because a child will be\n      // inserted or moved before `child`.\n      if (child._mountIndex < lastIndex) {\n        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);\n      }\n    },\n\n    /**\n     * Creates a child component.\n     *\n     * @param {ReactComponent} child Component to create.\n     * @param {string} mountImage Markup to insert.\n     * @protected\n     */\n    createChild: function (child, mountImage) {\n      enqueueInsertMarkup(this._rootNodeID, mountImage, child._mountIndex);\n    },\n\n    /**\n     * Removes a child component.\n     *\n     * @param {ReactComponent} child Child to remove.\n     * @protected\n     */\n    removeChild: function (child) {\n      enqueueRemove(this._rootNodeID, child._mountIndex);\n    },\n\n    /**\n     * Sets this text content string.\n     *\n     * @param {string} textContent Text content to set.\n     * @protected\n     */\n    setTextContent: function (textContent) {\n      enqueueTextContent(this._rootNodeID, textContent);\n    },\n\n    /**\n     * Sets this markup string.\n     *\n     * @param {string} markup Markup to set.\n     * @protected\n     */\n    setMarkup: function (markup) {\n      enqueueSetMarkup(this._rootNodeID, markup);\n    },\n\n    /**\n     * Mounts a child with the supplied name.\n     *\n     * NOTE: This is part of `updateChildren` and is here for readability.\n     *\n     * @param {ReactComponent} child Component to mount.\n     * @param {string} name Name of the child.\n     * @param {number} index Index at which to insert the child.\n     * @param {ReactReconcileTransaction} transaction\n     * @private\n     */\n    _mountChildByNameAtIndex: function (child, name, index, transaction, context) {\n      // Inlined for performance, see `ReactInstanceHandles.createReactID`.\n      var rootID = this._rootNodeID + name;\n      var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);\n      child._mountIndex = index;\n      this.createChild(child, mountImage);\n    },\n\n    /**\n     * Unmounts a rendered child.\n     *\n     * NOTE: This is part of `updateChildren` and is here for readability.\n     *\n     * @param {ReactComponent} child Component to unmount.\n     * @private\n     */\n    _unmountChild: function (child) {\n      this.removeChild(child);\n      child._mountIndex = null;\n    }\n\n  }\n\n};\n\nmodule.exports = ReactMultiChild;"]}