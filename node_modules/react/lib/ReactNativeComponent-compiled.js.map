{"version":3,"sources":["ReactNativeComponent.js"],"names":[],"mappings":";;;;;;;;;;;AAWA,YAAY,CAAC;;AAEb,IAAI,MAAM,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC;AACxC,IAAI,SAAS,GAAG,OAAO,CAAC,oBAAoB,CAAC,CAAC;;AAE9C,IAAI,wBAAwB,GAAG,IAAI,CAAC;AACpC,IAAI,qBAAqB,GAAG,IAAI;;AAAC,AAEjC,IAAI,mBAAmB,GAAG,EAAE,CAAC;AAC7B,IAAI,kBAAkB,GAAG,IAAI,CAAC;;AAE9B,IAAI,6BAA6B,GAAG;;;AAGlC,6BAA2B,EAAE,UAAU,cAAc,EAAE;AACrD,yBAAqB,GAAG,cAAc,CAAC;GACxC;;;AAGD,0BAAwB,EAAE,UAAU,cAAc,EAAE;AAClD,sBAAkB,GAAG,cAAc,CAAC;GACrC;;;AAGD,wBAAsB,EAAE,UAAU,gBAAgB,EAAE;AAClD,UAAM,CAAC,mBAAmB,EAAE,gBAAgB,CAAC,CAAC;GAC/C;CACF;;;;;;;;AAAC,AAQF,SAAS,2BAA2B,CAAC,OAAO,EAAE;AAC5C,MAAI,OAAO,OAAO,CAAC,IAAI,KAAK,UAAU,EAAE;AACtC,WAAO,OAAO,CAAC,IAAI,CAAC;GACrB;AACD,MAAI,GAAG,GAAG,OAAO,CAAC,IAAI,CAAC;AACvB,MAAI,cAAc,GAAG,mBAAmB,CAAC,GAAG,CAAC,CAAC;AAC9C,MAAI,cAAc,IAAI,IAAI,EAAE;AAC1B,uBAAmB,CAAC,GAAG,CAAC,GAAG,cAAc,GAAG,wBAAwB,CAAC,GAAG,CAAC,CAAC;GAC3E;AACD,SAAO,cAAc,CAAC;CACvB;;;;;;;;AAAA,AAQD,SAAS,uBAAuB,CAAC,OAAO,EAAE;AACxC,GAAC,qBAAqB,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,GAAG,SAAS,CAAC,KAAK,EAAE,iDAAiD,EAAE,OAAO,CAAC,IAAI,CAAC,GAAG,SAAS,CAAC,KAAK,CAAC,GAAG,SAAS,CAAC;AAClL,SAAO,IAAI,qBAAqB,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC;CAC/D;;;;;;AAAA,AAMD,SAAS,qBAAqB,CAAC,IAAI,EAAE;AACnC,SAAO,IAAI,kBAAkB,CAAC,IAAI,CAAC,CAAC;CACrC;;;;;;AAAA,AAMD,SAAS,eAAe,CAAC,SAAS,EAAE;AAClC,SAAO,SAAS,YAAY,kBAAkB,CAAC;CAChD;;AAED,IAAI,oBAAoB,GAAG;AACzB,6BAA2B,EAAE,2BAA2B;AACxD,yBAAuB,EAAE,uBAAuB;AAChD,uBAAqB,EAAE,qBAAqB;AAC5C,iBAAe,EAAE,eAAe;AAChC,WAAS,EAAE,6BAA6B;CACzC,CAAC;;AAEF,MAAM,CAAC,OAAO,GAAG,oBAAoB,CAAC","file":"ReactNativeComponent-compiled.js","sourcesContent":["/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactNativeComponent\n */\n\n'use strict';\n\nvar assign = require('./Object.assign');\nvar invariant = require('fbjs/lib/invariant');\n\nvar autoGenerateWrapperClass = null;\nvar genericComponentClass = null;\n// This registry keeps track of wrapper classes around native tags.\nvar tagToComponentClass = {};\nvar textComponentClass = null;\n\nvar ReactNativeComponentInjection = {\n  // This accepts a class that receives the tag string. This is a catch all\n  // that can render any kind of tag.\n  injectGenericComponentClass: function (componentClass) {\n    genericComponentClass = componentClass;\n  },\n  // This accepts a text component class that takes the text string to be\n  // rendered as props.\n  injectTextComponentClass: function (componentClass) {\n    textComponentClass = componentClass;\n  },\n  // This accepts a keyed object with classes as values. Each key represents a\n  // tag. That particular tag will use this class instead of the generic one.\n  injectComponentClasses: function (componentClasses) {\n    assign(tagToComponentClass, componentClasses);\n  }\n};\n\n/**\n * Get a composite component wrapper class for a specific tag.\n *\n * @param {ReactElement} element The tag for which to get the class.\n * @return {function} The React class constructor function.\n */\nfunction getComponentClassForElement(element) {\n  if (typeof element.type === 'function') {\n    return element.type;\n  }\n  var tag = element.type;\n  var componentClass = tagToComponentClass[tag];\n  if (componentClass == null) {\n    tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);\n  }\n  return componentClass;\n}\n\n/**\n * Get a native internal component class for a specific tag.\n *\n * @param {ReactElement} element The element to create.\n * @return {function} The internal class constructor function.\n */\nfunction createInternalComponent(element) {\n  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : invariant(false) : undefined;\n  return new genericComponentClass(element.type, element.props);\n}\n\n/**\n * @param {ReactText} text\n * @return {ReactComponent}\n */\nfunction createInstanceForText(text) {\n  return new textComponentClass(text);\n}\n\n/**\n * @param {ReactComponent} component\n * @return {boolean}\n */\nfunction isTextComponent(component) {\n  return component instanceof textComponentClass;\n}\n\nvar ReactNativeComponent = {\n  getComponentClassForElement: getComponentClassForElement,\n  createInternalComponent: createInternalComponent,\n  createInstanceForText: createInstanceForText,\n  isTextComponent: isTextComponent,\n  injection: ReactNativeComponentInjection\n};\n\nmodule.exports = ReactNativeComponent;"]}