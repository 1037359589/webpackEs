{"version":3,"sources":["ReactPerf.js"],"names":[],"mappings":";;;;;;;;;;;;AAYA;;;;;;AAAY,CAAC;AAMb,IAAI,SAAS,GAAG;;;;;AAKd,eAAa,EAAE,KAAK;;;;;;AAMpB,eAAa,EAAE,UAAU;;;;;;;AAOzB,gBAAc,EAAE,UAAU,MAAM,EAAE,UAAU,EAAE,WAAW,EAAE;AACzD,QAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE;AACzC,WAAK,IAAI,GAAG,IAAI,WAAW,EAAE;AAC3B,YAAI,CAAC,WAAW,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;AACpC,mBAAS;SACV;AACD,cAAM,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,OAAO,CAAC,UAAU,EAAE,WAAW,CAAC,GAAG,CAAC,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;OAC5E;KACF;GACF;;;;;;;;;;AAUD,SAAO,EAAE,UAAU,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE;AACxC,QAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE;AACzC,UAAI,YAAY,GAAG,IAAI,CAAC;AACxB,UAAI,OAAO,GAAG,YAAY;AACxB,YAAI,SAAS,CAAC,aAAa,EAAE;AAC3B,cAAI,CAAC,YAAY,EAAE;AACjB,wBAAY,GAAG,SAAS,CAAC,aAAa,CAAC,OAAO,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;WAC/D;AACD,iBAAO,YAAY,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;SAC5C;AACD,eAAO,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;OACpC,CAAC;AACF,aAAO,CAAC,WAAW,GAAG,OAAO,GAAG,GAAG,GAAG,MAAM,CAAC;AAC7C,aAAO,OAAO,CAAC;KAChB;AACD,WAAO,IAAI,CAAC;GACb;;AAED,WAAS,EAAE;;;;AAIT,iBAAa,EAAE,UAAU,OAAO,EAAE;AAChC,eAAS,CAAC,aAAa,GAAG,OAAO,CAAC;KACnC;GACF;CACF;;;;;;;;;;AAAC,AAUF,SAAS,UAAU,CAAC,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE;AACzC,SAAO,IAAI,CAAC;CACb;;AAED,MAAM,CAAC,OAAO,GAAG,SAAS,CAAC","file":"ReactPerf-compiled.js","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactPerf\n * @typechecks static-only\n */\n\n'use strict';\n\n/**\n * ReactPerf is a general AOP system designed to measure performance. This\n * module only has the hooks: see ReactDefaultPerf for the analysis tool.\n */\nvar ReactPerf = {\n  /**\n   * Boolean to enable/disable measurement. Set to false by default to prevent\n   * accidental logging and perf loss.\n   */\n  enableMeasure: false,\n\n  /**\n   * Holds onto the measure function in use. By default, don't measure\n   * anything, but we'll override this if we inject a measure function.\n   */\n  storedMeasure: _noMeasure,\n\n  /**\n   * @param {object} object\n   * @param {string} objectName\n   * @param {object<string>} methodNames\n   */\n  measureMethods: function (object, objectName, methodNames) {\n    if (process.env.NODE_ENV !== 'production') {\n      for (var key in methodNames) {\n        if (!methodNames.hasOwnProperty(key)) {\n          continue;\n        }\n        object[key] = ReactPerf.measure(objectName, methodNames[key], object[key]);\n      }\n    }\n  },\n\n  /**\n   * Use this to wrap methods you want to measure. Zero overhead in production.\n   *\n   * @param {string} objName\n   * @param {string} fnName\n   * @param {function} func\n   * @return {function}\n   */\n  measure: function (objName, fnName, func) {\n    if (process.env.NODE_ENV !== 'production') {\n      var measuredFunc = null;\n      var wrapper = function () {\n        if (ReactPerf.enableMeasure) {\n          if (!measuredFunc) {\n            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);\n          }\n          return measuredFunc.apply(this, arguments);\n        }\n        return func.apply(this, arguments);\n      };\n      wrapper.displayName = objName + '_' + fnName;\n      return wrapper;\n    }\n    return func;\n  },\n\n  injection: {\n    /**\n     * @param {function} measure\n     */\n    injectMeasure: function (measure) {\n      ReactPerf.storedMeasure = measure;\n    }\n  }\n};\n\n/**\n * Simply passes through the measured function, without measuring it.\n *\n * @param {string} objName\n * @param {string} fnName\n * @param {function} func\n * @return {function}\n */\nfunction _noMeasure(objName, fnName, func) {\n  return func;\n}\n\nmodule.exports = ReactPerf;"]}