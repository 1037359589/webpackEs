{"version":3,"sources":["ReactPropTransferer.js"],"names":[],"mappings":";;;;;;;;;;;AAWA,YAAY,CAAC;;AAEb,IAAI,MAAM,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC;AACxC,IAAI,aAAa,GAAG,OAAO,CAAC,wBAAwB,CAAC,CAAC;AACtD,IAAI,WAAW,GAAG,OAAO,CAAC,sBAAsB,CAAC;;;;;;;;;AAAC,AASlD,SAAS,sBAAsB,CAAC,aAAa,EAAE;AAC7C,SAAO,UAAU,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE;AAClC,QAAI,CAAC,KAAK,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;AAC9B,WAAK,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;KACpB,MAAM;AACL,WAAK,CAAC,GAAG,CAAC,GAAG,aAAa,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC;KAC/C;GACF,CAAC;CACH;;AAED,IAAI,qBAAqB,GAAG,sBAAsB,CAAC,UAAU,CAAC,EAAE,CAAC,EAAE;;;;AAIjE,SAAO,MAAM,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;CACzB,CAAC;;;;;;;AAAC,AAOH,IAAI,kBAAkB,GAAG;;;;AAIvB,UAAQ,EAAE,aAAa;;;;AAIvB,WAAS,EAAE,sBAAsB,CAAC,WAAW,CAAC;;;;AAI9C,OAAK,EAAE,qBAAqB;CAC7B;;;;;;;;;;AAAC,AAUF,SAAS,YAAY,CAAC,KAAK,EAAE,QAAQ,EAAE;AACrC,OAAK,IAAI,OAAO,IAAI,QAAQ,EAAE;AAC5B,QAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE;AACrC,eAAS;KACV;;AAED,QAAI,gBAAgB,GAAG,kBAAkB,CAAC,OAAO,CAAC,CAAC;;AAEnD,QAAI,gBAAgB,IAAI,kBAAkB,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE;AAClE,sBAAgB,CAAC,KAAK,EAAE,OAAO,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;KACrD,MAAM,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE;AACzC,WAAK,CAAC,OAAO,CAAC,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC;KACpC;GACF;AACD,SAAO,KAAK,CAAC;CACd;;;;;;;;AAAA,AAQD,IAAI,mBAAmB,GAAG;;;;;;;;;AASxB,YAAU,EAAE,UAAU,QAAQ,EAAE,QAAQ,EAAE;AACxC,WAAO,YAAY,CAAC,MAAM,CAAC,EAAE,EAAE,QAAQ,CAAC,EAAE,QAAQ,CAAC,CAAC;GACrD;;CAEF,CAAC;;AAEF,MAAM,CAAC,OAAO,GAAG,mBAAmB,CAAC","file":"ReactPropTransferer-compiled.js","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactPropTransferer\n */\n\n'use strict';\n\nvar assign = require('./Object.assign');\nvar emptyFunction = require('fbjs/lib/emptyFunction');\nvar joinClasses = require('fbjs/lib/joinClasses');\n\n/**\n * Creates a transfer strategy that will merge prop values using the supplied\n * `mergeStrategy`. If a prop was previously unset, this just sets it.\n *\n * @param {function} mergeStrategy\n * @return {function}\n */\nfunction createTransferStrategy(mergeStrategy) {\n  return function (props, key, value) {\n    if (!props.hasOwnProperty(key)) {\n      props[key] = value;\n    } else {\n      props[key] = mergeStrategy(props[key], value);\n    }\n  };\n}\n\nvar transferStrategyMerge = createTransferStrategy(function (a, b) {\n  // `merge` overrides the first object's (`props[key]` above) keys using the\n  // second object's (`value`) keys. An object's style's existing `propA` would\n  // get overridden. Flip the order here.\n  return assign({}, b, a);\n});\n\n/**\n * Transfer strategies dictate how props are transferred by `transferPropsTo`.\n * NOTE: if you add any more exceptions to this list you should be sure to\n * update `cloneWithProps()` accordingly.\n */\nvar TransferStrategies = {\n  /**\n   * Never transfer `children`.\n   */\n  children: emptyFunction,\n  /**\n   * Transfer the `className` prop by merging them.\n   */\n  className: createTransferStrategy(joinClasses),\n  /**\n   * Transfer the `style` prop (which is an object) by merging them.\n   */\n  style: transferStrategyMerge\n};\n\n/**\n * Mutates the first argument by transferring the properties from the second\n * argument.\n *\n * @param {object} props\n * @param {object} newProps\n * @return {object}\n */\nfunction transferInto(props, newProps) {\n  for (var thisKey in newProps) {\n    if (!newProps.hasOwnProperty(thisKey)) {\n      continue;\n    }\n\n    var transferStrategy = TransferStrategies[thisKey];\n\n    if (transferStrategy && TransferStrategies.hasOwnProperty(thisKey)) {\n      transferStrategy(props, thisKey, newProps[thisKey]);\n    } else if (!props.hasOwnProperty(thisKey)) {\n      props[thisKey] = newProps[thisKey];\n    }\n  }\n  return props;\n}\n\n/**\n * ReactPropTransferer are capable of transferring props to another component\n * using a `transferPropsTo` method.\n *\n * @class ReactPropTransferer\n */\nvar ReactPropTransferer = {\n\n  /**\n   * Merge two props objects using TransferStrategies.\n   *\n   * @param {object} oldProps original props (they take precedence)\n   * @param {object} newProps new props to merge in\n   * @return {object} a new object containing both sets of props merged.\n   */\n  mergeProps: function (oldProps, newProps) {\n    return transferInto(assign({}, oldProps), newProps);\n  }\n\n};\n\nmodule.exports = ReactPropTransferer;"]}