{"version":3,"sources":["ReactReconcileTransaction.js"],"names":[],"mappings":";;;;;;;;;;;;AAYA,YAAY,CAAC;;AAEb,IAAI,aAAa,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC;AAC/C,IAAI,WAAW,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;AAC3C,IAAI,wBAAwB,GAAG,OAAO,CAAC,4BAA4B,CAAC,CAAC;AACrE,IAAI,oBAAoB,GAAG,OAAO,CAAC,wBAAwB,CAAC,CAAC;AAC7D,IAAI,mBAAmB,GAAG,OAAO,CAAC,uBAAuB,CAAC,CAAC;AAC3D,IAAI,WAAW,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;;AAE3C,IAAI,MAAM,GAAG,OAAO,CAAC,iBAAiB,CAAC;;;;;;AAAC,AAMxC,IAAI,qBAAqB,GAAG;;;;AAI1B,YAAU,EAAE,mBAAmB,CAAC,uBAAuB;;;;AAIvD,OAAK,EAAE,mBAAmB,CAAC,gBAAgB;CAC5C;;;;;;;AAAC,AAOF,IAAI,iBAAiB,GAAG;;;;;AAKtB,YAAU,EAAE,YAAY;AACtB,QAAI,gBAAgB,GAAG,wBAAwB,CAAC,SAAS,EAAE,CAAC;AAC5D,4BAAwB,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;AAC3C,WAAO,gBAAgB,CAAC;GACzB;;;;;;;AAOD,OAAK,EAAE,UAAU,iBAAiB,EAAE;AAClC,4BAAwB,CAAC,UAAU,CAAC,iBAAiB,CAAC,CAAC;GACxD;CACF;;;;;;AAAC,AAMF,IAAI,qBAAqB,GAAG;;;;AAI1B,YAAU,EAAE,YAAY;AACtB,QAAI,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC;GAC9B;;;;;AAKD,OAAK,EAAE,YAAY;AACjB,QAAI,CAAC,eAAe,CAAC,SAAS,EAAE,CAAC;GAClC;CACF;;;;;;;AAAC,AAOF,IAAI,oBAAoB,GAAG,CAAC,qBAAqB,EAAE,iBAAiB,EAAE,qBAAqB,CAAC;;;;;;;;;;;;;;;;AAAC,AAgB7F,SAAS,yBAAyB,CAAC,SAAS,EAAE;AAC5C,MAAI,CAAC,uBAAuB,EAAE;;;;;;AAAC,AAM/B,MAAI,CAAC,oBAAoB,GAAG,KAAK,CAAC;AAClC,MAAI,CAAC,eAAe,GAAG,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;AACrD,MAAI,CAAC,gBAAgB,GAAG,CAAC,SAAS,IAAI,oBAAoB,CAAC,gBAAgB,CAAC;CAC7E;;AAED,IAAI,KAAK,GAAG;;;;;;;;AAQV,wBAAsB,EAAE,YAAY;AAClC,WAAO,oBAAoB,CAAC;GAC7B;;;;;AAKD,oBAAkB,EAAE,YAAY;AAC9B,WAAO,IAAI,CAAC,eAAe,CAAC;GAC7B;;;;;;AAMD,YAAU,EAAE,YAAY;AACtB,iBAAa,CAAC,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;AAC5C,QAAI,CAAC,eAAe,GAAG,IAAI,CAAC;GAC7B;CACF,CAAC;;AAEF,MAAM,CAAC,yBAAyB,CAAC,SAAS,EAAE,WAAW,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;;AAEtE,WAAW,CAAC,YAAY,CAAC,yBAAyB,CAAC,CAAC;;AAEpD,MAAM,CAAC,OAAO,GAAG,yBAAyB,CAAC","file":"ReactReconcileTransaction-compiled.js","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactReconcileTransaction\n * @typechecks static-only\n */\n\n'use strict';\n\nvar CallbackQueue = require('./CallbackQueue');\nvar PooledClass = require('./PooledClass');\nvar ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');\nvar ReactDOMFeatureFlags = require('./ReactDOMFeatureFlags');\nvar ReactInputSelection = require('./ReactInputSelection');\nvar Transaction = require('./Transaction');\n\nvar assign = require('./Object.assign');\n\n/**\n * Ensures that, when possible, the selection range (currently selected text\n * input) is not disturbed by performing the transaction.\n */\nvar SELECTION_RESTORATION = {\n  /**\n   * @return {Selection} Selection information.\n   */\n  initialize: ReactInputSelection.getSelectionInformation,\n  /**\n   * @param {Selection} sel Selection information returned from `initialize`.\n   */\n  close: ReactInputSelection.restoreSelection\n};\n\n/**\n * Suppresses events (blur/focus) that could be inadvertently dispatched due to\n * high level DOM manipulations (like temporarily removing a text input from the\n * DOM).\n */\nvar EVENT_SUPPRESSION = {\n  /**\n   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before\n   * the reconciliation.\n   */\n  initialize: function () {\n    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();\n    ReactBrowserEventEmitter.setEnabled(false);\n    return currentlyEnabled;\n  },\n\n  /**\n   * @param {boolean} previouslyEnabled Enabled status of\n   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`\n   *   restores the previous value.\n   */\n  close: function (previouslyEnabled) {\n    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);\n  }\n};\n\n/**\n * Provides a queue for collecting `componentDidMount` and\n * `componentDidUpdate` callbacks during the the transaction.\n */\nvar ON_DOM_READY_QUEUEING = {\n  /**\n   * Initializes the internal `onDOMReady` queue.\n   */\n  initialize: function () {\n    this.reactMountReady.reset();\n  },\n\n  /**\n   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.\n   */\n  close: function () {\n    this.reactMountReady.notifyAll();\n  }\n};\n\n/**\n * Executed within the scope of the `Transaction` instance. Consider these as\n * being member methods, but with an implied ordering while being isolated from\n * each other.\n */\nvar TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];\n\n/**\n * Currently:\n * - The order that these are listed in the transaction is critical:\n * - Suppresses events.\n * - Restores selection range.\n *\n * Future:\n * - Restore document/overflow scroll positions that were unintentionally\n *   modified via DOM insertions above the top viewport boundary.\n * - Implement/integrate with customized constraint based layout system and keep\n *   track of which dimensions must be remeasured.\n *\n * @class ReactReconcileTransaction\n */\nfunction ReactReconcileTransaction(forceHTML) {\n  this.reinitializeTransaction();\n  // Only server-side rendering really needs this option (see\n  // `ReactServerRendering`), but server-side uses\n  // `ReactServerRenderingTransaction` instead. This option is here so that it's\n  // accessible and defaults to false when `ReactDOMComponent` and\n  // `ReactTextComponent` checks it in `mountComponent`.`\n  this.renderToStaticMarkup = false;\n  this.reactMountReady = CallbackQueue.getPooled(null);\n  this.useCreateElement = !forceHTML && ReactDOMFeatureFlags.useCreateElement;\n}\n\nvar Mixin = {\n  /**\n   * @see Transaction\n   * @abstract\n   * @final\n   * @return {array<object>} List of operation wrap procedures.\n   *   TODO: convert to array<TransactionWrapper>\n   */\n  getTransactionWrappers: function () {\n    return TRANSACTION_WRAPPERS;\n  },\n\n  /**\n   * @return {object} The queue to collect `onDOMReady` callbacks with.\n   */\n  getReactMountReady: function () {\n    return this.reactMountReady;\n  },\n\n  /**\n   * `PooledClass` looks for this, and will invoke this before allowing this\n   * instance to be reused.\n   */\n  destructor: function () {\n    CallbackQueue.release(this.reactMountReady);\n    this.reactMountReady = null;\n  }\n};\n\nassign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);\n\nPooledClass.addPoolingTo(ReactReconcileTransaction);\n\nmodule.exports = ReactReconcileTransaction;"]}