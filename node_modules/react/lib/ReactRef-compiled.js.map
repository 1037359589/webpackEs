{"version":3,"sources":["ReactRef.js"],"names":[],"mappings":";;;;;;;;;;;AAWA,YAAY,CAAC;;AAEb,IAAI,UAAU,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;;AAEzC,IAAI,QAAQ,GAAG,EAAE,CAAC;;AAElB,SAAS,SAAS,CAAC,GAAG,EAAE,SAAS,EAAE,KAAK,EAAE;AACxC,MAAI,OAAO,GAAG,KAAK,UAAU,EAAE;AAC7B,OAAG,CAAC,SAAS,CAAC,iBAAiB,EAAE,CAAC,CAAC;GACpC,MAAM;;AAEL,cAAU,CAAC,mBAAmB,CAAC,SAAS,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;GACvD;CACF;;AAED,SAAS,SAAS,CAAC,GAAG,EAAE,SAAS,EAAE,KAAK,EAAE;AACxC,MAAI,OAAO,GAAG,KAAK,UAAU,EAAE;AAC7B,OAAG,CAAC,IAAI,CAAC,CAAC;GACX,MAAM;;AAEL,cAAU,CAAC,wBAAwB,CAAC,SAAS,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;GAC5D;CACF;;AAED,QAAQ,CAAC,UAAU,GAAG,UAAU,QAAQ,EAAE,OAAO,EAAE;AACjD,MAAI,OAAO,KAAK,IAAI,IAAI,OAAO,KAAK,KAAK,EAAE;AACzC,WAAO;GACR;AACD,MAAI,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC;AACtB,MAAI,GAAG,IAAI,IAAI,EAAE;AACf,aAAS,CAAC,GAAG,EAAE,QAAQ,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;GAC1C;CACF,CAAC;;AAEF,QAAQ,CAAC,gBAAgB,GAAG,UAAU,WAAW,EAAE,WAAW,EAAE;;;;;;;;;;;;;AAa9D,MAAI,SAAS,GAAG,WAAW,KAAK,IAAI,IAAI,WAAW,KAAK,KAAK,CAAC;AAC9D,MAAI,SAAS,GAAG,WAAW,KAAK,IAAI,IAAI,WAAW,KAAK,KAAK,CAAC;;AAE9D;;AAEE,aAAS,IAAI,SAAS,IAAI,WAAW,CAAC,MAAM,KAAK,WAAW,CAAC,MAAM,IAAI,WAAW,CAAC,GAAG,KAAK,WAAW,CAAC,GAAG;IAC1G;CACH,CAAC;;AAEF,QAAQ,CAAC,UAAU,GAAG,UAAU,QAAQ,EAAE,OAAO,EAAE;AACjD,MAAI,OAAO,KAAK,IAAI,IAAI,OAAO,KAAK,KAAK,EAAE;AACzC,WAAO;GACR;AACD,MAAI,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC;AACtB,MAAI,GAAG,IAAI,IAAI,EAAE;AACf,aAAS,CAAC,GAAG,EAAE,QAAQ,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;GAC1C;CACF,CAAC;;AAEF,MAAM,CAAC,OAAO,GAAG,QAAQ,CAAC","file":"ReactRef-compiled.js","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactRef\n */\n\n'use strict';\n\nvar ReactOwner = require('./ReactOwner');\n\nvar ReactRef = {};\n\nfunction attachRef(ref, component, owner) {\n  if (typeof ref === 'function') {\n    ref(component.getPublicInstance());\n  } else {\n    // Legacy ref\n    ReactOwner.addComponentAsRefTo(component, ref, owner);\n  }\n}\n\nfunction detachRef(ref, component, owner) {\n  if (typeof ref === 'function') {\n    ref(null);\n  } else {\n    // Legacy ref\n    ReactOwner.removeComponentAsRefFrom(component, ref, owner);\n  }\n}\n\nReactRef.attachRefs = function (instance, element) {\n  if (element === null || element === false) {\n    return;\n  }\n  var ref = element.ref;\n  if (ref != null) {\n    attachRef(ref, instance, element._owner);\n  }\n};\n\nReactRef.shouldUpdateRefs = function (prevElement, nextElement) {\n  // If either the owner or a `ref` has changed, make sure the newest owner\n  // has stored a reference to `this`, and the previous owner (if different)\n  // has forgotten the reference to `this`. We use the element instead\n  // of the public this.props because the post processing cannot determine\n  // a ref. The ref conceptually lives on the element.\n\n  // TODO: Should this even be possible? The owner cannot change because\n  // it's forbidden by shouldUpdateReactComponent. The ref can change\n  // if you swap the keys of but not the refs. Reconsider where this check\n  // is made. It probably belongs where the key checking and\n  // instantiateReactComponent is done.\n\n  var prevEmpty = prevElement === null || prevElement === false;\n  var nextEmpty = nextElement === null || nextElement === false;\n\n  return(\n    // This has a few false positives w/r/t empty components.\n    prevEmpty || nextEmpty || nextElement._owner !== prevElement._owner || nextElement.ref !== prevElement.ref\n  );\n};\n\nReactRef.detachRefs = function (instance, element) {\n  if (element === null || element === false) {\n    return;\n  }\n  var ref = element.ref;\n  if (ref != null) {\n    detachRef(ref, instance, element._owner);\n  }\n};\n\nmodule.exports = ReactRef;"]}