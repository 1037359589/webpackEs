{"version":3,"sources":["ReactServerRenderingTransaction.js"],"names":[],"mappings":";;;;;;;;;;;;AAYA,YAAY,CAAC;;AAEb,IAAI,WAAW,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;AAC3C,IAAI,aAAa,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC;AAC/C,IAAI,WAAW,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;;AAE3C,IAAI,MAAM,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC;AACxC,IAAI,aAAa,GAAG,OAAO,CAAC,wBAAwB,CAAC;;;;;;AAAC,AAMtD,IAAI,qBAAqB,GAAG;;;;AAI1B,YAAU,EAAE,YAAY;AACtB,QAAI,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC;GAC9B;;AAED,OAAK,EAAE,aAAa;CACrB;;;;;;;AAAC,AAOF,IAAI,oBAAoB,GAAG,CAAC,qBAAqB,CAAC;;;;;;AAAC,AAMnD,SAAS,+BAA+B,CAAC,oBAAoB,EAAE;AAC7D,MAAI,CAAC,uBAAuB,EAAE,CAAC;AAC/B,MAAI,CAAC,oBAAoB,GAAG,oBAAoB,CAAC;AACjD,MAAI,CAAC,eAAe,GAAG,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;AACrD,MAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;CAC/B;;AAED,IAAI,KAAK,GAAG;;;;;;;AAOV,wBAAsB,EAAE,YAAY;AAClC,WAAO,oBAAoB,CAAC;GAC7B;;;;;AAKD,oBAAkB,EAAE,YAAY;AAC9B,WAAO,IAAI,CAAC,eAAe,CAAC;GAC7B;;;;;;AAMD,YAAU,EAAE,YAAY;AACtB,iBAAa,CAAC,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;AAC5C,QAAI,CAAC,eAAe,GAAG,IAAI,CAAC;GAC7B;CACF,CAAC;;AAEF,MAAM,CAAC,+BAA+B,CAAC,SAAS,EAAE,WAAW,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;;AAE5E,WAAW,CAAC,YAAY,CAAC,+BAA+B,CAAC,CAAC;;AAE1D,MAAM,CAAC,OAAO,GAAG,+BAA+B,CAAC","file":"ReactServerRenderingTransaction-compiled.js","sourcesContent":["/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactServerRenderingTransaction\n * @typechecks\n */\n\n'use strict';\n\nvar PooledClass = require('./PooledClass');\nvar CallbackQueue = require('./CallbackQueue');\nvar Transaction = require('./Transaction');\n\nvar assign = require('./Object.assign');\nvar emptyFunction = require('fbjs/lib/emptyFunction');\n\n/**\n * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks\n * during the performing of the transaction.\n */\nvar ON_DOM_READY_QUEUEING = {\n  /**\n   * Initializes the internal `onDOMReady` queue.\n   */\n  initialize: function () {\n    this.reactMountReady.reset();\n  },\n\n  close: emptyFunction\n};\n\n/**\n * Executed within the scope of the `Transaction` instance. Consider these as\n * being member methods, but with an implied ordering while being isolated from\n * each other.\n */\nvar TRANSACTION_WRAPPERS = [ON_DOM_READY_QUEUEING];\n\n/**\n * @class ReactServerRenderingTransaction\n * @param {boolean} renderToStaticMarkup\n */\nfunction ReactServerRenderingTransaction(renderToStaticMarkup) {\n  this.reinitializeTransaction();\n  this.renderToStaticMarkup = renderToStaticMarkup;\n  this.reactMountReady = CallbackQueue.getPooled(null);\n  this.useCreateElement = false;\n}\n\nvar Mixin = {\n  /**\n   * @see Transaction\n   * @abstract\n   * @final\n   * @return {array} Empty list of operation wrap procedures.\n   */\n  getTransactionWrappers: function () {\n    return TRANSACTION_WRAPPERS;\n  },\n\n  /**\n   * @return {object} The queue to collect `onDOMReady` callbacks with.\n   */\n  getReactMountReady: function () {\n    return this.reactMountReady;\n  },\n\n  /**\n   * `PooledClass` looks for this, and will invoke this before allowing this\n   * instance to be reused.\n   */\n  destructor: function () {\n    CallbackQueue.release(this.reactMountReady);\n    this.reactMountReady = null;\n  }\n};\n\nassign(ReactServerRenderingTransaction.prototype, Transaction.Mixin, Mixin);\n\nPooledClass.addPoolingTo(ReactServerRenderingTransaction);\n\nmodule.exports = ReactServerRenderingTransaction;"]}