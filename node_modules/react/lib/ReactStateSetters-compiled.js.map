{"version":3,"sources":["ReactStateSetters.js"],"names":[],"mappings":";;;;;;;;;;;AAWA,YAAY,CAAC;;AAEb,IAAI,iBAAiB,GAAG;;;;;;;;;;;AAWtB,mBAAiB,EAAE,UAAU,SAAS,EAAE,kBAAkB,EAAE;AAC1D,WAAO,UAAU,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE;AACjC,UAAI,YAAY,GAAG,kBAAkB,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AACxE,UAAI,YAAY,EAAE;AAChB,iBAAS,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;OAClC;KACF,CAAC;GACH;;;;;;;;;;;;;AAaD,sBAAoB,EAAE,UAAU,SAAS,EAAE,GAAG,EAAE;;AAE9C,QAAI,KAAK,GAAG,SAAS,CAAC,YAAY,KAAK,SAAS,CAAC,YAAY,GAAG,EAAE,CAAA,AAAC,CAAC;AACpE,WAAO,KAAK,CAAC,GAAG,CAAC,KAAK,KAAK,CAAC,GAAG,CAAC,GAAG,oBAAoB,CAAC,SAAS,EAAE,GAAG,CAAC,CAAA,AAAC,CAAC;GAC1E;CACF,CAAC;;AAEF,SAAS,oBAAoB,CAAC,SAAS,EAAE,GAAG,EAAE;;;;AAI5C,MAAI,YAAY,GAAG,EAAE,CAAC;AACtB,SAAO,SAAS,cAAc,CAAC,KAAK,EAAE;AACpC,gBAAY,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;AAC1B,aAAS,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;GAClC,CAAC;CACH;;AAED,iBAAiB,CAAC,KAAK,GAAG;;;;;;;;;;;;;;;;;AAiBxB,mBAAiB,EAAE,UAAU,kBAAkB,EAAE;AAC/C,WAAO,iBAAiB,CAAC,iBAAiB,CAAC,IAAI,EAAE,kBAAkB,CAAC,CAAC;GACtE;;;;;;;;;;;;;;;;;AAiBD,sBAAoB,EAAE,UAAU,GAAG,EAAE;AACnC,WAAO,iBAAiB,CAAC,oBAAoB,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;GAC1D;CACF,CAAC;;AAEF,MAAM,CAAC,OAAO,GAAG,iBAAiB,CAAC","file":"ReactStateSetters-compiled.js","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactStateSetters\n */\n\n'use strict';\n\nvar ReactStateSetters = {\n  /**\n   * Returns a function that calls the provided function, and uses the result\n   * of that to set the component's state.\n   *\n   * @param {ReactCompositeComponent} component\n   * @param {function} funcReturningState Returned callback uses this to\n   *                                      determine how to update state.\n   * @return {function} callback that when invoked uses funcReturningState to\n   *                    determined the object literal to setState.\n   */\n  createStateSetter: function (component, funcReturningState) {\n    return function (a, b, c, d, e, f) {\n      var partialState = funcReturningState.call(component, a, b, c, d, e, f);\n      if (partialState) {\n        component.setState(partialState);\n      }\n    };\n  },\n\n  /**\n   * Returns a single-argument callback that can be used to update a single\n   * key in the component's state.\n   *\n   * Note: this is memoized function, which makes it inexpensive to call.\n   *\n   * @param {ReactCompositeComponent} component\n   * @param {string} key The key in the state that you should update.\n   * @return {function} callback of 1 argument which calls setState() with\n   *                    the provided keyName and callback argument.\n   */\n  createStateKeySetter: function (component, key) {\n    // Memoize the setters.\n    var cache = component.__keySetters || (component.__keySetters = {});\n    return cache[key] || (cache[key] = createStateKeySetter(component, key));\n  }\n};\n\nfunction createStateKeySetter(component, key) {\n  // Partial state is allocated outside of the function closure so it can be\n  // reused with every call, avoiding memory allocation when this function\n  // is called.\n  var partialState = {};\n  return function stateKeySetter(value) {\n    partialState[key] = value;\n    component.setState(partialState);\n  };\n}\n\nReactStateSetters.Mixin = {\n  /**\n   * Returns a function that calls the provided function, and uses the result\n   * of that to set the component's state.\n   *\n   * For example, these statements are equivalent:\n   *\n   *   this.setState({x: 1});\n   *   this.createStateSetter(function(xValue) {\n   *     return {x: xValue};\n   *   })(1);\n   *\n   * @param {function} funcReturningState Returned callback uses this to\n   *                                      determine how to update state.\n   * @return {function} callback that when invoked uses funcReturningState to\n   *                    determined the object literal to setState.\n   */\n  createStateSetter: function (funcReturningState) {\n    return ReactStateSetters.createStateSetter(this, funcReturningState);\n  },\n\n  /**\n   * Returns a single-argument callback that can be used to update a single\n   * key in the component's state.\n   *\n   * For example, these statements are equivalent:\n   *\n   *   this.setState({x: 1});\n   *   this.createStateKeySetter('x')(1);\n   *\n   * Note: this is memoized function, which makes it inexpensive to call.\n   *\n   * @param {string} key The key in the state that you should update.\n   * @return {function} callback of 1 argument which calls setState() with\n   *                    the provided keyName and callback argument.\n   */\n  createStateKeySetter: function (key) {\n    return ReactStateSetters.createStateKeySetter(this, key);\n  }\n};\n\nmodule.exports = ReactStateSetters;"]}