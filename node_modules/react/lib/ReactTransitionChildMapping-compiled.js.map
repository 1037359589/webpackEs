{"version":3,"sources":["ReactTransitionChildMapping.js"],"names":[],"mappings":";;;;;;;;;;;;AAYA,YAAY,CAAC;;AAEb,IAAI,eAAe,GAAG,OAAO,CAAC,mBAAmB,CAAC,CAAC;;AAEnD,IAAI,2BAA2B,GAAG;;;;;;;;AAQhC,iBAAe,EAAE,UAAU,QAAQ,EAAE;AACnC,QAAI,CAAC,QAAQ,EAAE;AACb,aAAO,QAAQ,CAAC;KACjB;AACD,WAAO,eAAe,CAAC,QAAQ,CAAC,CAAC;GAClC;;;;;;;;;;;;;;;;;;;AAmBD,oBAAkB,EAAE,UAAU,IAAI,EAAE,IAAI,EAAE;AACxC,QAAI,GAAG,IAAI,IAAI,EAAE,CAAC;AAClB,QAAI,GAAG,IAAI,IAAI,EAAE,CAAC;;AAElB,aAAS,cAAc,CAAC,GAAG,EAAE;AAC3B,UAAI,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;AAC5B,eAAO,IAAI,CAAC,GAAG,CAAC,CAAC;OAClB,MAAM;AACL,eAAO,IAAI,CAAC,GAAG,CAAC,CAAC;OAClB;KACF;;;;AAAA,AAID,QAAI,eAAe,GAAG,EAAE,CAAC;;AAEzB,QAAI,WAAW,GAAG,EAAE,CAAC;AACrB,SAAK,IAAI,OAAO,IAAI,IAAI,EAAE;AACxB,UAAI,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE;AAChC,YAAI,WAAW,CAAC,MAAM,EAAE;AACtB,yBAAe,CAAC,OAAO,CAAC,GAAG,WAAW,CAAC;AACvC,qBAAW,GAAG,EAAE,CAAC;SAClB;OACF,MAAM;AACL,mBAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;OAC3B;KACF;;AAED,QAAI,CAAC,CAAC;AACN,QAAI,YAAY,GAAG,EAAE,CAAC;AACtB,SAAK,IAAI,OAAO,IAAI,IAAI,EAAE;AACxB,UAAI,eAAe,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE;AAC3C,aAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,eAAe,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACpD,cAAI,cAAc,GAAG,eAAe,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;AACjD,sBAAY,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,cAAc,CAAC,cAAc,CAAC,CAAC;SAC5E;OACF;AACD,kBAAY,CAAC,OAAO,CAAC,GAAG,cAAc,CAAC,OAAO,CAAC,CAAC;KACjD;;;AAAA,AAGD,SAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACvC,kBAAY,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,GAAG,cAAc,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;KAC/D;;AAED,WAAO,YAAY,CAAC;GACrB;CACF,CAAC;;AAEF,MAAM,CAAC,OAAO,GAAG,2BAA2B,CAAC","file":"ReactTransitionChildMapping-compiled.js","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @typechecks static-only\n * @providesModule ReactTransitionChildMapping\n */\n\n'use strict';\n\nvar flattenChildren = require('./flattenChildren');\n\nvar ReactTransitionChildMapping = {\n  /**\n   * Given `this.props.children`, return an object mapping key to child. Just\n   * simple syntactic sugar around flattenChildren().\n   *\n   * @param {*} children `this.props.children`\n   * @return {object} Mapping of key to child\n   */\n  getChildMapping: function (children) {\n    if (!children) {\n      return children;\n    }\n    return flattenChildren(children);\n  },\n\n  /**\n   * When you're adding or removing children some may be added or removed in the\n   * same render pass. We want to show *both* since we want to simultaneously\n   * animate elements in and out. This function takes a previous set of keys\n   * and a new set of keys and merges them with its best guess of the correct\n   * ordering. In the future we may expose some of the utilities in\n   * ReactMultiChild to make this easy, but for now React itself does not\n   * directly have this concept of the union of prevChildren and nextChildren\n   * so we implement it here.\n   *\n   * @param {object} prev prev children as returned from\n   * `ReactTransitionChildMapping.getChildMapping()`.\n   * @param {object} next next children as returned from\n   * `ReactTransitionChildMapping.getChildMapping()`.\n   * @return {object} a key set that contains all keys in `prev` and all keys\n   * in `next` in a reasonable order.\n   */\n  mergeChildMappings: function (prev, next) {\n    prev = prev || {};\n    next = next || {};\n\n    function getValueForKey(key) {\n      if (next.hasOwnProperty(key)) {\n        return next[key];\n      } else {\n        return prev[key];\n      }\n    }\n\n    // For each key of `next`, the list of keys to insert before that key in\n    // the combined list\n    var nextKeysPending = {};\n\n    var pendingKeys = [];\n    for (var prevKey in prev) {\n      if (next.hasOwnProperty(prevKey)) {\n        if (pendingKeys.length) {\n          nextKeysPending[prevKey] = pendingKeys;\n          pendingKeys = [];\n        }\n      } else {\n        pendingKeys.push(prevKey);\n      }\n    }\n\n    var i;\n    var childMapping = {};\n    for (var nextKey in next) {\n      if (nextKeysPending.hasOwnProperty(nextKey)) {\n        for (i = 0; i < nextKeysPending[nextKey].length; i++) {\n          var pendingNextKey = nextKeysPending[nextKey][i];\n          childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);\n        }\n      }\n      childMapping[nextKey] = getValueForKey(nextKey);\n    }\n\n    // Finally, add the keys which didn't appear before any key in `next`\n    for (i = 0; i < pendingKeys.length; i++) {\n      childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);\n    }\n\n    return childMapping;\n  }\n};\n\nmodule.exports = ReactTransitionChildMapping;"]}