{"version":3,"sources":["ReactUpdates.js"],"names":[],"mappings":"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","file":"ReactUpdates-compiled.js","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ReactUpdates\n */\n\n'use strict';\n\nvar CallbackQueue = require('./CallbackQueue');\nvar PooledClass = require('./PooledClass');\nvar ReactPerf = require('./ReactPerf');\nvar ReactReconciler = require('./ReactReconciler');\nvar Transaction = require('./Transaction');\n\nvar assign = require('./Object.assign');\nvar invariant = require('fbjs/lib/invariant');\n\nvar dirtyComponents = [];\nvar asapCallbackQueue = CallbackQueue.getPooled();\nvar asapEnqueued = false;\n\nvar batchingStrategy = null;\n\nfunction ensureInjected() {\n  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching ' + 'strategy') : invariant(false) : undefined;\n}\n\nvar NESTED_UPDATES = {\n  initialize: function () {\n    this.dirtyComponentsLength = dirtyComponents.length;\n  },\n  close: function () {\n    if (this.dirtyComponentsLength !== dirtyComponents.length) {\n      // Additional updates were enqueued by componentDidUpdate handlers or\n      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run\n      // these new updates so that if A's componentDidUpdate calls setState on\n      // B, B will update before the callback A's updater provided when calling\n      // setState.\n      dirtyComponents.splice(0, this.dirtyComponentsLength);\n      flushBatchedUpdates();\n    } else {\n      dirtyComponents.length = 0;\n    }\n  }\n};\n\nvar UPDATE_QUEUEING = {\n  initialize: function () {\n    this.callbackQueue.reset();\n  },\n  close: function () {\n    this.callbackQueue.notifyAll();\n  }\n};\n\nvar TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];\n\nfunction ReactUpdatesFlushTransaction() {\n  this.reinitializeTransaction();\n  this.dirtyComponentsLength = null;\n  this.callbackQueue = CallbackQueue.getPooled();\n  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled( /* forceHTML */false);\n}\n\nassign(ReactUpdatesFlushTransaction.prototype, Transaction.Mixin, {\n  getTransactionWrappers: function () {\n    return TRANSACTION_WRAPPERS;\n  },\n\n  destructor: function () {\n    this.dirtyComponentsLength = null;\n    CallbackQueue.release(this.callbackQueue);\n    this.callbackQueue = null;\n    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);\n    this.reconcileTransaction = null;\n  },\n\n  perform: function (method, scope, a) {\n    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`\n    // with this transaction's wrappers around it.\n    return Transaction.Mixin.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);\n  }\n});\n\nPooledClass.addPoolingTo(ReactUpdatesFlushTransaction);\n\nfunction batchedUpdates(callback, a, b, c, d, e) {\n  ensureInjected();\n  batchingStrategy.batchedUpdates(callback, a, b, c, d, e);\n}\n\n/**\n * Array comparator for ReactComponents by mount ordering.\n *\n * @param {ReactComponent} c1 first component you're comparing\n * @param {ReactComponent} c2 second component you're comparing\n * @return {number} Return value usable by Array.prototype.sort().\n */\nfunction mountOrderComparator(c1, c2) {\n  return c1._mountOrder - c2._mountOrder;\n}\n\nfunction runBatchedUpdates(transaction) {\n  var len = transaction.dirtyComponentsLength;\n  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\\'s stored dirty-components length (%s) to ' + 'match dirty-components array length (%s).', len, dirtyComponents.length) : invariant(false) : undefined;\n\n  // Since reconciling a component higher in the owner hierarchy usually (not\n  // always -- see shouldComponentUpdate()) will reconcile children, reconcile\n  // them before their children by sorting the array.\n  dirtyComponents.sort(mountOrderComparator);\n\n  for (var i = 0; i < len; i++) {\n    // If a component is unmounted before pending changes apply, it will still\n    // be here, but we assume that it has cleared its _pendingCallbacks and\n    // that performUpdateIfNecessary is a noop.\n    var component = dirtyComponents[i];\n\n    // If performUpdateIfNecessary happens to enqueue any new updates, we\n    // shouldn't execute the callbacks until the next render happens, so\n    // stash the callbacks first\n    var callbacks = component._pendingCallbacks;\n    component._pendingCallbacks = null;\n\n    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction);\n\n    if (callbacks) {\n      for (var j = 0; j < callbacks.length; j++) {\n        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());\n      }\n    }\n  }\n}\n\nvar flushBatchedUpdates = function () {\n  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents\n  // array and perform any updates enqueued by mount-ready handlers (i.e.,\n  // componentDidUpdate) but we need to check here too in order to catch\n  // updates enqueued by setState callbacks and asap calls.\n  while (dirtyComponents.length || asapEnqueued) {\n    if (dirtyComponents.length) {\n      var transaction = ReactUpdatesFlushTransaction.getPooled();\n      transaction.perform(runBatchedUpdates, null, transaction);\n      ReactUpdatesFlushTransaction.release(transaction);\n    }\n\n    if (asapEnqueued) {\n      asapEnqueued = false;\n      var queue = asapCallbackQueue;\n      asapCallbackQueue = CallbackQueue.getPooled();\n      queue.notifyAll();\n      CallbackQueue.release(queue);\n    }\n  }\n};\nflushBatchedUpdates = ReactPerf.measure('ReactUpdates', 'flushBatchedUpdates', flushBatchedUpdates);\n\n/**\n * Mark a component as needing a rerender, adding an optional callback to a\n * list of functions which will be executed once the rerender occurs.\n */\nfunction enqueueUpdate(component) {\n  ensureInjected();\n\n  // Various parts of our code (such as ReactCompositeComponent's\n  // _renderValidatedComponent) assume that calls to render aren't nested;\n  // verify that that's the case. (This is called by each top-level update\n  // function, like setProps, setState, forceUpdate, etc.; creation and\n  // destruction of top-level components is guarded in ReactMount.)\n\n  if (!batchingStrategy.isBatchingUpdates) {\n    batchingStrategy.batchedUpdates(enqueueUpdate, component);\n    return;\n  }\n\n  dirtyComponents.push(component);\n}\n\n/**\n * Enqueue a callback to be run at the end of the current batching cycle. Throws\n * if no updates are currently being performed.\n */\nfunction asap(callback, context) {\n  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\\'t enqueue an asap callback in a context where' + 'updates are not being batched.') : invariant(false) : undefined;\n  asapCallbackQueue.enqueue(callback, context);\n  asapEnqueued = true;\n}\n\nvar ReactUpdatesInjection = {\n  injectReconcileTransaction: function (ReconcileTransaction) {\n    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : invariant(false) : undefined;\n    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;\n  },\n\n  injectBatchingStrategy: function (_batchingStrategy) {\n    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : invariant(false) : undefined;\n    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : invariant(false) : undefined;\n    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : invariant(false) : undefined;\n    batchingStrategy = _batchingStrategy;\n  }\n};\n\nvar ReactUpdates = {\n  /**\n   * React references `ReactReconcileTransaction` using this property in order\n   * to allow dependency injection.\n   *\n   * @internal\n   */\n  ReactReconcileTransaction: null,\n\n  batchedUpdates: batchedUpdates,\n  enqueueUpdate: enqueueUpdate,\n  flushBatchedUpdates: flushBatchedUpdates,\n  injection: ReactUpdatesInjection,\n  asap: asap\n};\n\nmodule.exports = ReactUpdates;"]}