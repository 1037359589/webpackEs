{"version":3,"sources":["ResponderSyntheticEvent.js"],"names":[],"mappings":";;;;;;;;;;;;AAYA,YAAY,CAAC;;AAEb,IAAI,cAAc,GAAG,OAAO,CAAC,kBAAkB,CAAC;;;;;;;AAAC,AAOjD,IAAI,uBAAuB,GAAG;AAC5B,cAAY,EAAE,UAAU,WAAW,EAAE;AACnC,WAAO,IAAI;AAAC,GACb;CACF;;;;;;;;AAAC,AAQF,SAAS,uBAAuB,CAAC,cAAc,EAAE,cAAc,EAAE,WAAW,EAAE,iBAAiB,EAAE;AAC/F,gBAAc,CAAC,IAAI,CAAC,IAAI,EAAE,cAAc,EAAE,cAAc,EAAE,WAAW,EAAE,iBAAiB,CAAC,CAAC;CAC3F;;AAED,cAAc,CAAC,YAAY,CAAC,uBAAuB,EAAE,uBAAuB,CAAC,CAAC;;AAE9E,MAAM,CAAC,OAAO,GAAG,uBAAuB,CAAC","file":"ResponderSyntheticEvent-compiled.js","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule ResponderSyntheticEvent\n * @typechecks static-only\n */\n\n'use strict';\n\nvar SyntheticEvent = require('./SyntheticEvent');\n\n/**\n * `touchHistory` isn't actually on the native event, but putting it in the\n * interface will ensure that it is cleaned up when pooled/destroyed. The\n * `ResponderEventPlugin` will populate it appropriately.\n */\nvar ResponderEventInterface = {\n  touchHistory: function (nativeEvent) {\n    return null; // Actually doesn't even look at the native event.\n  }\n};\n\n/**\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {string} dispatchMarker Marker identifying the event target.\n * @param {object} nativeEvent Native event.\n * @extends {SyntheticEvent}\n */\nfunction ResponderSyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {\n  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);\n}\n\nSyntheticEvent.augmentClass(ResponderSyntheticEvent, ResponderEventInterface);\n\nmodule.exports = ResponderSyntheticEvent;"]}