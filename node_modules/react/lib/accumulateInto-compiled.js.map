{"version":3,"sources":["accumulateInto.js"],"names":[],"mappings":";;;;;;;;;;;AAWA,YAAY,CAAC;;AAEb,IAAI,SAAS,GAAG,OAAO,CAAC,oBAAoB,CAAC;;;;;;;;;;;;;;;;AAAC,AAgB9C,SAAS,cAAc,CAAC,OAAO,EAAE,IAAI,EAAE;AACrC,IAAE,IAAI,IAAI,IAAI,CAAA,AAAC,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,GAAG,SAAS,CAAC,KAAK,EAAE,uEAAuE,CAAC,GAAG,SAAS,CAAC,KAAK,CAAC,GAAG,SAAS,CAAC;AACnL,MAAI,OAAO,IAAI,IAAI,EAAE;AACnB,WAAO,IAAI,CAAC;GACb;;;;AAAA,AAID,MAAI,cAAc,GAAG,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;AAC5C,MAAI,WAAW,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;;AAEtC,MAAI,cAAc,IAAI,WAAW,EAAE;AACjC,WAAO,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;AAClC,WAAO,OAAO,CAAC;GAChB;;AAED,MAAI,cAAc,EAAE;AAClB,WAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACnB,WAAO,OAAO,CAAC;GAChB;;AAED,MAAI,WAAW,EAAE;;AAEf,WAAO,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;GAC/B;;AAED,SAAO,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;CACxB;;AAED,MAAM,CAAC,OAAO,GAAG,cAAc,CAAC","file":"accumulateInto-compiled.js","sourcesContent":["/**\n * Copyright 2014-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule accumulateInto\n */\n\n'use strict';\n\nvar invariant = require('fbjs/lib/invariant');\n\n/**\n *\n * Accumulates items that must not be null or undefined into the first one. This\n * is used to conserve memory by avoiding array allocations, and thus sacrifices\n * API cleanness. Since `current` can be null before being passed in and not\n * null after this function, make sure to assign it back to `current`:\n *\n * `a = accumulateInto(a, b);`\n *\n * This API should be sparingly used. Try `accumulate` for something cleaner.\n *\n * @return {*|array<*>} An accumulation of items.\n */\n\nfunction accumulateInto(current, next) {\n  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : invariant(false) : undefined;\n  if (current == null) {\n    return next;\n  }\n\n  // Both are not empty. Warning: Never call x.concat(y) when you are not\n  // certain that x is an Array (x could be a string with concat method).\n  var currentIsArray = Array.isArray(current);\n  var nextIsArray = Array.isArray(next);\n\n  if (currentIsArray && nextIsArray) {\n    current.push.apply(current, next);\n    return current;\n  }\n\n  if (currentIsArray) {\n    current.push(next);\n    return current;\n  }\n\n  if (nextIsArray) {\n    // A bit too dangerous to mutate `next`.\n    return [current].concat(next);\n  }\n\n  return [current, next];\n}\n\nmodule.exports = accumulateInto;"]}