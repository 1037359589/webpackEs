{"version":3,"sources":["cloneWithProps.js"],"names":[],"mappings":";;;;;;;;;;;;AAYA,YAAY,CAAC;;AAEb,IAAI,YAAY,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC;AAC7C,IAAI,mBAAmB,GAAG,OAAO,CAAC,uBAAuB,CAAC,CAAC;;AAE3D,IAAI,KAAK,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC;AACtC,IAAI,OAAO,GAAG,OAAO,CAAC,kBAAkB,CAAC,CAAC;;AAE1C,IAAI,aAAa,GAAG,KAAK,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;;AAE9C,IAAI,iBAAiB,GAAG,KAAK;;;;;;;;;;;;AAAC,AAY9B,SAAS,cAAc,CAAC,KAAK,EAAE,KAAK,EAAE;AACpC,MAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,EAAE;AACzC,WAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,GAAG,OAAO,CAAC,iBAAiB,EAAE,qCAAqC,GAAG,wCAAwC,CAAC,GAAG,SAAS,CAAC;AACjK,qBAAiB,GAAG,IAAI,CAAC;AACzB,WAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,GAAG,OAAO,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,kEAAkE,GAAG,mEAAmE,GAAG,+BAA+B,CAAC,GAAG,SAAS,CAAC;GACrP;;AAED,MAAI,QAAQ,GAAG,mBAAmB,CAAC,UAAU,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,CAAC;;;AAAC,AAGlE,MAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,aAAa,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,cAAc,CAAC,aAAa,CAAC,EAAE;AACxF,YAAQ,CAAC,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC;GAC1C;;;;AAAA,AAID,SAAO,YAAY,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;CACzD;;AAED,MAAM,CAAC,OAAO,GAAG,cAAc,CAAC","file":"cloneWithProps-compiled.js","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @typechecks static-only\n * @providesModule cloneWithProps\n */\n\n'use strict';\n\nvar ReactElement = require('./ReactElement');\nvar ReactPropTransferer = require('./ReactPropTransferer');\n\nvar keyOf = require('fbjs/lib/keyOf');\nvar warning = require('fbjs/lib/warning');\n\nvar CHILDREN_PROP = keyOf({ children: null });\n\nvar didDeprecatedWarn = false;\n\n/**\n * Sometimes you want to change the props of a child passed to you. Usually\n * this is to add a CSS class.\n *\n * @param {ReactElement} child child element you'd like to clone\n * @param {object} props props you'd like to modify. className and style will be\n * merged automatically.\n * @return {ReactElement} a clone of child with props merged in.\n * @deprecated\n */\nfunction cloneWithProps(child, props) {\n  if (process.env.NODE_ENV !== 'production') {\n    process.env.NODE_ENV !== 'production' ? warning(didDeprecatedWarn, 'cloneWithProps(...) is deprecated. ' + 'Please use React.cloneElement instead.') : undefined;\n    didDeprecatedWarn = true;\n    process.env.NODE_ENV !== 'production' ? warning(!child.ref, 'You are calling cloneWithProps() on a child with a ref. This is ' + 'dangerous because you\\'re creating a new child which will not be ' + 'added as a ref to its parent.') : undefined;\n  }\n\n  var newProps = ReactPropTransferer.mergeProps(props, child.props);\n\n  // Use `child.props.children` if it is provided.\n  if (!newProps.hasOwnProperty(CHILDREN_PROP) && child.props.hasOwnProperty(CHILDREN_PROP)) {\n    newProps.children = child.props.children;\n  }\n\n  // The current API doesn't retain _owner, which is why this\n  // doesn't use ReactElement.cloneAndReplaceProps.\n  return ReactElement.createElement(child.type, newProps);\n}\n\nmodule.exports = cloneWithProps;"]}