{"version":3,"sources":["getEventKey.js"],"names":[],"mappings":";;;;;;;;;;;;AAYA,YAAY,CAAC;;AAEb,IAAI,gBAAgB,GAAG,OAAO,CAAC,oBAAoB,CAAC;;;;;;AAAC,AAMrD,IAAI,YAAY,GAAG;AACjB,OAAK,EAAE,QAAQ;AACf,YAAU,EAAE,GAAG;AACf,QAAM,EAAE,WAAW;AACnB,MAAI,EAAE,SAAS;AACf,SAAO,EAAE,YAAY;AACrB,QAAM,EAAE,WAAW;AACnB,OAAK,EAAE,QAAQ;AACf,OAAK,EAAE,IAAI;AACX,QAAM,EAAE,aAAa;AACrB,QAAM,EAAE,aAAa;AACrB,UAAQ,EAAE,YAAY;AACtB,mBAAiB,EAAE,cAAc;CAClC;;;;;;;AAAC,AAOF,IAAI,cAAc,GAAG;AACnB,GAAC,EAAE,WAAW;AACd,GAAC,EAAE,KAAK;AACR,IAAE,EAAE,OAAO;AACX,IAAE,EAAE,OAAO;AACX,IAAE,EAAE,OAAO;AACX,IAAE,EAAE,SAAS;AACb,IAAE,EAAE,KAAK;AACT,IAAE,EAAE,OAAO;AACX,IAAE,EAAE,UAAU;AACd,IAAE,EAAE,QAAQ;AACZ,IAAE,EAAE,GAAG;AACP,IAAE,EAAE,QAAQ;AACZ,IAAE,EAAE,UAAU;AACd,IAAE,EAAE,KAAK;AACT,IAAE,EAAE,MAAM;AACV,IAAE,EAAE,WAAW;AACf,IAAE,EAAE,SAAS;AACb,IAAE,EAAE,YAAY;AAChB,IAAE,EAAE,WAAW;AACf,IAAE,EAAE,QAAQ;AACZ,IAAE,EAAE,QAAQ;AACZ,KAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI;AAChE,KAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK;AACnE,KAAG,EAAE,SAAS;AACd,KAAG,EAAE,YAAY;AACjB,KAAG,EAAE,MAAM;CACZ;;;;;;AAAC,AAMF,SAAS,WAAW,CAAC,WAAW,EAAE;AAChC,MAAI,WAAW,CAAC,GAAG,EAAE;;;;;;AAMnB,QAAI,GAAG,GAAG,YAAY,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,WAAW,CAAC,GAAG,CAAC;AAC3D,QAAI,GAAG,KAAK,cAAc,EAAE;AAC1B,aAAO,GAAG,CAAC;KACZ;GACF;;;AAAA,AAGD,MAAI,WAAW,CAAC,IAAI,KAAK,UAAU,EAAE;AACnC,QAAI,QAAQ,GAAG,gBAAgB,CAAC,WAAW,CAAC;;;;AAAC,AAI7C,WAAO,QAAQ,KAAK,EAAE,GAAG,OAAO,GAAG,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;GAClE;AACD,MAAI,WAAW,CAAC,IAAI,KAAK,SAAS,IAAI,WAAW,CAAC,IAAI,KAAK,OAAO,EAAE;;;AAGlE,WAAO,cAAc,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,cAAc,CAAC;GAC9D;AACD,SAAO,EAAE,CAAC;CACX;;AAED,MAAM,CAAC,OAAO,GAAG,WAAW,CAAC","file":"getEventKey-compiled.js","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule getEventKey\n * @typechecks static-only\n */\n\n'use strict';\n\nvar getEventCharCode = require('./getEventCharCode');\n\n/**\n * Normalization of deprecated HTML5 `key` values\n * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names\n */\nvar normalizeKey = {\n  'Esc': 'Escape',\n  'Spacebar': ' ',\n  'Left': 'ArrowLeft',\n  'Up': 'ArrowUp',\n  'Right': 'ArrowRight',\n  'Down': 'ArrowDown',\n  'Del': 'Delete',\n  'Win': 'OS',\n  'Menu': 'ContextMenu',\n  'Apps': 'ContextMenu',\n  'Scroll': 'ScrollLock',\n  'MozPrintableKey': 'Unidentified'\n};\n\n/**\n * Translation from legacy `keyCode` to HTML5 `key`\n * Only special keys supported, all others depend on keyboard layout or browser\n * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names\n */\nvar translateToKey = {\n  8: 'Backspace',\n  9: 'Tab',\n  12: 'Clear',\n  13: 'Enter',\n  16: 'Shift',\n  17: 'Control',\n  18: 'Alt',\n  19: 'Pause',\n  20: 'CapsLock',\n  27: 'Escape',\n  32: ' ',\n  33: 'PageUp',\n  34: 'PageDown',\n  35: 'End',\n  36: 'Home',\n  37: 'ArrowLeft',\n  38: 'ArrowUp',\n  39: 'ArrowRight',\n  40: 'ArrowDown',\n  45: 'Insert',\n  46: 'Delete',\n  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',\n  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',\n  144: 'NumLock',\n  145: 'ScrollLock',\n  224: 'Meta'\n};\n\n/**\n * @param {object} nativeEvent Native browser event.\n * @return {string} Normalized `key` property.\n */\nfunction getEventKey(nativeEvent) {\n  if (nativeEvent.key) {\n    // Normalize inconsistent values reported by browsers due to\n    // implementations of a working draft specification.\n\n    // FireFox implements `key` but returns `MozPrintableKey` for all\n    // printable characters (normalized to `Unidentified`), ignore it.\n    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;\n    if (key !== 'Unidentified') {\n      return key;\n    }\n  }\n\n  // Browser does not implement `key`, polyfill as much of it as we can.\n  if (nativeEvent.type === 'keypress') {\n    var charCode = getEventCharCode(nativeEvent);\n\n    // The enter-key is technically both printable and non-printable and can\n    // thus be captured by `keypress`, no other non-printable key should.\n    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);\n  }\n  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {\n    // While user keyboard layout determines the actual meaning of each\n    // `keyCode` value, almost all function keys have a universal value.\n    return translateToKey[nativeEvent.keyCode] || 'Unidentified';\n  }\n  return '';\n}\n\nmodule.exports = getEventKey;"]}