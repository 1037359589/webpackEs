{"version":3,"sources":["es6-object-concise-method-visitors-test.js"],"names":[],"mappings":"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","file":"es6-object-concise-method-visitors-test-compiled.js","sourcesContent":["/**\n * Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @emails dmitrys@fb.com\n */\n\n/*jshint evil:true*/\n\nrequire('mock-modules').autoMockOff();\n\ndescribe('es6-object-concise-method-visitors', function() {\n  var transformFn;\n  var conciseMethodVisitors;\n  var restParamVisitors;\n  var visitors;\n\n  beforeEach(function() {\n    require('mock-modules').dumpCache();\n    conciseMethodVisitors = require('../es6-object-concise-method-visitors').visitorList;\n    restParamVisitors = require('../es6-rest-param-visitors').visitorList;\n    transformFn = require('../../src/jstransform').transform;\n    visitors = conciseMethodVisitors.concat(restParamVisitors);\n  });\n\n  function transform(code) {\n    return transformFn(visitors, code).code;\n  }\n\n  function expectTransform(code, result) {\n    expect(transform(code)).toEqual(result);\n  }\n\n  // Functional tests.\n\n  it('should transform concise method and return 42', function() {\n    /*global foo*/\n    var code = transform([\n      'var foo = {',\n      '  bar(x) {',\n      '    return x;',\n      '  }',\n      '};'\n    ].join('\\n'));\n\n    eval(code);\n    expect(foo.bar(42)).toEqual(42);\n  });\n\n  it('should transform concise method with literal property', function() {\n    var code = transform([\n      'var foo = {',\n      '  \"bar 1\"(x) {',\n      '    return x;',\n      '  }',\n      '};'\n    ].join('\\n'));\n\n    eval(code);\n    expect(foo['bar 1'](42)).toEqual(42);\n  });\n\n\n  it('should work with rest params', function() {\n    var code = transform([\n      '({',\n      '  init(x, ...rest) {',\n      '    return rest.concat(x);',\n      '  }',\n      '}).init(1, 2, 3);'\n    ].join('\\n'));\n\n    expect(eval(code)).toEqual([2, 3, 1]);\n  });\n\n  // Source code tests.\n  it('should transform concise methods', function() {\n\n    // Should transform simple concise method.\n    expectTransform(\n      'var foo = {bar() {}};',\n      'var foo = {bar:function() {}};'\n    );\n\n    // Should transform inner objects.\n    expectTransform(\n      '({bar(x) { return {baz(y) {}}; }});',\n      '({bar:function(x) { return {baz:function(y) {}}; }});'\n    );\n  });\n\n  it('should preserve generators', function() {\n    // Identifier properties\n    expectTransform(\n      'var foo = {*bar(x) {yield x;}};',\n      'var foo = {bar:function*(x) {yield x;}};'\n    );\n\n    // Literal properties\n    expectTransform(\n      'var foo = {*\"abc\"(x) {yield x;}, *42(x) {yield x;}};',\n      'var foo = {\"abc\":function*(x) {yield x;}, 42:function*(x) {yield x;}};'\n    );\n\n    // Dynamic properties\n    expectTransform(\n      'var foo = {*[a+b](x) {yield x;}}',\n      'var foo = {[a+b]:function*(x) {yield x;}}'\n    );\n  });\n\n  it('should handle reserved words', function() {\n    expectTransform(\n      '({delete(x) {}})',\n      '({\"delete\":function(x) {}})'\n    );\n  });\n});\n\n\n"]}