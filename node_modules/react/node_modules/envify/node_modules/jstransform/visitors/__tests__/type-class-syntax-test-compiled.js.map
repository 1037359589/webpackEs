{"version":3,"sources":["type-class-syntax-test.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAmBA,OAAO,CAAC,cAAc,CAAC,CAAC,WAAW,EAAE,CAAC;;AAEtC,QAAQ,CAAC,0BAA0B,EAAE,YAAW;AAC9C,MAAI,mBAAmB,CAAC;AACxB,MAAI,WAAW,CAAC;AAChB,MAAI,kBAAkB,CAAC;AACvB,MAAI,WAAW,CAAC;;AAEhB,YAAU,CAAC,YAAW;AACpB,WAAO,CAAC,cAAc,CAAC,CAAC,SAAS,EAAE,CAAC;;AAEpC,uBAAmB,GACjB,OAAO,CAAC,uBAAuB,CAAC,CAAC,WAAW,CAAC;AAC/C,sBAAkB,GAAG,OAAO,CAAC,mBAAmB,CAAC,CAAC,WAAW,CAAC;AAC9D,eAAW,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;;AAErC,eAAW,GAAG,mBAAmB,CAAC;GACnC,CAAC,CAAC;;AAEH,WAAS,SAAS,CAAC,IAAI,EAAE,QAAQ,EAAE;AACjC,YAAQ,GAAG,QAAQ,GAAG,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,WAAW,CAAC;;AAEjE,QAAI,GAAG,WAAW,CAAC,SAAS,CAC1B,kBAAkB,EAClB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAChB,CAAC,IAAI,CAAC;;AAEP,WAAO,WAAW,CAAC,SAAS,CAC1B,QAAQ,EACR,IAAI,CACL,CAAC,IAAI,CAAC;GACR;;AAED,UAAQ,CAAC,wBAAwB,EAAE,MAAM;AACvC,MAAE,CAAC,gCAAgC,EAAE,MAAM;AACzC,UAAI,IAAI,GAAG,SAAS,CAAC,CACnB,aAAa,EACb,2BAA2B,EAC3B,oBAAoB,EACpB,KAAK,EACL,GAAG,EACH,EAAE,EACF,mBAAmB,EACnB,2BAA2B,EAC3B,oBAAoB,EACpB,KAAK,EACL,GAAG,CACJ,CAAC,CAAC;AACH,UAAI,CAAC,IAAI,CAAC,CAAC;AACX,YAAM,CAAC,AAAC,IAAI,GAAG,EAAE,CAAE,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AACzC,YAAM,CAAC,AAAC,IAAI,GAAG,EAAE,CAAE,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;KAC1C,CAAC,CAAC;;AAEH,MAAE,CAAC,mCAAmC,EAAE,MAAM;AAC5C,UAAI,IAAI,GAAG,SAAS,CAAC,CACnB,aAAa,EACb,2CAA2C,EAC3C,8BAA8B,EAC9B,KAAK,EACL,GAAG,EACH,EAAE,EACF,mBAAmB,EACnB,2CAA2C,EAC3C,8BAA8B,EAC9B,KAAK,EACL,GAAG,CACJ,CAAC,CAAC;AACH,UAAI,CAAC,IAAI,CAAC,CAAC;AACX,YAAM,CAAC,AAAC,IAAI,GAAG,EAAE,CAAE,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;AAC1D,YAAM,CAAC,AAAC,IAAI,GAAG,EAAE,CAAE,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;KAC3D,CAAC,CAAC;;AAEH,MAAE,CAAC,uCAAuC,EAAE,MAAM;AAChD,UAAI,IAAI,GAAG,SAAS,CAAC,CACnB,aAAa,EACb,yCAAyC,EACzC,oBAAoB,EACpB,KAAK,EACL,GAAG,EACH,EAAE,EACF,mBAAmB,EACnB,yCAAyC,EACzC,oBAAoB,EACpB,KAAK,EACL,GAAG,CACJ,CAAC,CAAC;AACH,UAAI,CAAC,IAAI,CAAC,CAAC;;AAEX,UAAI,QAAQ,GAAG,UAAS,KAAK,EAAE;AAC7B,eAAO,KAAK,GAAG,EAAE,GAAG,CAAC,CAAC;OACvB,CAAC;AACF,YAAM,CAAC,AAAC,IAAI,GAAG,EAAE,CAAE,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AACrD,YAAM,CAAC,AAAC,IAAI,GAAG,EAAE,CAAE,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;KACtD,CAAC,CAAC;;AAEH,MAAE,CAAC,sDAAsD,EAAE,MAAM;AAC/D,UAAI,IAAI,GAAG,SAAS,CAAC,CACnB,aAAa,EACb,qCAAqC,EACrC,8BAA8B,EAC9B,KAAK,EACL,GAAG,EACH,EAAE,EACF,mBAAmB,EACnB,qCAAqC,EACrC,8BAA8B,EAC9B,KAAK,EACL,GAAG,CACJ,CAAC,CAAC;AACH,UAAI,CAAC,IAAI,CAAC,CAAC;AACX,YAAM,CAAC,AAAC,IAAI,GAAG,EAAE,CAAE,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;AAC1D,YAAM,CAAC,AAAC,IAAI,GAAG,EAAE,CAAE,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;KAC3D,CAAC,CAAC;;AAEH,MAAE,CAAC,iDAAiD,EAAE,MAAM;AAC1D,UAAI,iBAAiB,GACnB,OAAO,CAAC,4BAA4B,CAAC,CAAC,WAAW,CAAC;;AAEpD,UAAI,IAAI,GAAG,SAAS,CAAC,CACnB,aAAa,EACb,sCAAsC,EACtC,4BAA4B,EAC5B,KAAK,EACL,GAAG,EACH,EAAE,EACF,mBAAmB,EACnB,sCAAsC,EACtC,4BAA4B,EAC5B,KAAK,EACL,GAAG,CACJ,EAAE,iBAAiB,CAAC,CAAC;AACtB,UAAI,CAAC,IAAI,CAAC,CAAC;AACX,YAAM,CAAC,AAAC,IAAI,GAAG,EAAE,CAAE,OAAO,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;AAChE,YAAM,CAAC,AAAC,IAAI,GAAG,EAAE,CAAE,OAAO,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;KACjE,CAAC,CAAC;GACJ,CAAC,CAAC;;AAEH,UAAQ,CAAC,yBAAyB,EAAE,MAAM;AACxC,MAAE,CAAC,4BAA4B,EAAE,MAAM;AACrC,UAAI,IAAI,GAAG,SAAS,CAAC,CACnB,aAAa,EACb,0CAA0C,EAC1C,2CAA2C,EAC3C,KAAK,EACL,GAAG,EACH,EAAE,EACF,mBAAmB,EACnB,0CAA0C,EAC1C,2CAA2C,EAC3C,KAAK,EACL,GAAG,CACJ,CAAC,CAAC;AACH,UAAI,CAAC,IAAI,CAAC,CAAC;AACX,YAAM,CAAC,AAAC,IAAI,GAAG,EAAE,CAAE,OAAO,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AAC3C,YAAM,CAAC,AAAC,IAAI,GAAG,EAAE,CAAE,OAAO,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;KAC5C,CAAC,CAAC;GACJ,CAAC,CAAC;;AAEH,UAAQ,CAAC,4BAA4B,EAAE,MAAM;AAC3C,MAAE,CAAC,0CAA0C,EAAE,MAAM;AACnD,UAAI,IAAI,GAAG,SAAS,CAAC,CACnB,gBAAgB,EAChB,qBAAqB,EACrB,oBAAoB,EACpB,KAAK,EACL,GAAG,EACH,EAAE,CAOH,CAAC,CAAC;;;;;;;;AACH,UAAI,CAAC,IAAI,CAAC,CAAC;AACX,YAAM,CAAC,AAAC,IAAI,GAAG,EAAE,CAAE,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC;;AAAC,KAE1C,CAAC,CAAC;;AAEH,MAAE,CAAC,+CAA+C,EAAE,MAAM;AACxD,UAAI,IAAI,GAAG,SAAS,CAAC,CACnB,kBAAkB,EAClB,qBAAqB,EACrB,oBAAoB,EACpB,KAAK,EACL,GAAG,EACH,EAAE,CAOH,CAAC,CAAC;;;;;;;;AACH,UAAI,CAAC,IAAI,CAAC,CAAC;AACX,YAAM,CAAC,AAAC,IAAI,GAAG,EAAE,CAAE,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC;;AAAC,KAE1C,CAAC,CAAC;;AAEH,MAAE,CAAC,2CAA2C,EAAE,MAAM;AACpD,UAAI,IAAI,GAAG,SAAS,CAAC,CACnB,gBAAgB,EAChB,wBAAwB,EACxB,oBAAoB,EACpB,KAAK,EACL,GAAG,EACH,EAAE,CAOH,CAAC,CAAC;;;;;;;;AACH,UAAI,CAAC,IAAI,CAAC,CAAC;AACX,YAAM,CAAC,AAAC,IAAI,GAAG,EAAE,CAAE,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC;;AAAC,KAE1C,CAAC,CAAC;;AAEH,MAAE,CAAC,+CAA+C,EAAE,MAAM;AACxD,UAAI,IAAI,GAAG,SAAS,CAAC,CACnB,kBAAkB,EAClB,0BAA0B,EAC1B,oBAAoB,EACpB,KAAK,EACL,GAAG,EACH,EAAE,CAOH,CAAC,CAAC;;;;;;;;AACH,UAAI,CAAC,IAAI,CAAC,CAAC;AACX,YAAM,CAAC,AAAC,IAAI,GAAG,EAAE,CAAE,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC;;AAAC,KAE1C,CAAC,CAAC;GACJ,CAAC,CAAC;;AAEH,UAAQ,CAAC,4BAA4B,EAAE,MAAM;AAC3C,MAAE,CAAC,8BAA8B,EAAE,MAAM;AACvC,UAAI,IAAI,GAAG,SAAS,CAAC,CACnB,aAAa,EACb,aAAa,EACb,GAAG,CACJ,CAAC,CAAC;AACH,UAAI,CAAC,IAAI,CAAC,CAAC;AACX,YAAM,CAAC,AAAC,IAAI,GAAG,EAAE,CAAE,KAAK,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;KAC9C,CAAC,CAAC;;AAEH,MAAE,CAAC,2CAA2C,EAAE,MAAM;AACpD,UAAI,IAAI,GAAG,SAAS,CAAC,CACnB,aAAa,EACb,aAAa,EACb,aAAa,EACb,GAAG,CACJ,CAAC,CAAC;AACH,UAAI,CAAC,IAAI,CAAC,CAAC;AACX,YAAM,CAAC,AAAC,IAAI,GAAG,EAAE,CAAE,KAAK,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;AAC7C,YAAM,CAAC,AAAC,IAAI,GAAG,EAAE,CAAE,KAAK,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;KAC9C,CAAC,CAAC;;AAEH,MAAE,CAAC,yCAAyC,EAAE,MAAM;AAClD,UAAI,IAAI,GAAG,SAAS,CAAC,CACnB,aAAa,EACb,gBAAgB,EAChB,aAAa,EACb,gBAAgB,EAChB,aAAa,EACb,gBAAgB,EAChB,GAAG,CACJ,CAAC,CAAC;AACH,UAAI,CAAC,IAAI,CAAC,CAAC;AACX,YAAM,CAAC,AAAC,IAAI,GAAG,EAAE,CAAE,KAAK,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;AAC7C,YAAM,CAAC,AAAC,IAAI,GAAG,EAAE,CAAE,KAAK,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;KAC9C,CAAC,CAAC;GACJ,CAAC,CAAC;CACJ,CAAC,CAAC","file":"type-class-syntax-test-compiled.js","sourcesContent":["/**\n * Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*jshint evil:true*/\n/*jshint -W117*/\n\nrequire('mock-modules').autoMockOff();\n\ndescribe('static type class syntax', function() {\n  var classSyntaxVisitors;\n  var visitorList;\n  var flowSyntaxVisitors;\n  var jstransform;\n\n  beforeEach(function() {\n    require('mock-modules').dumpCache();\n\n    classSyntaxVisitors =\n      require('../es6-class-visitors').visitorList;\n    flowSyntaxVisitors = require('../type-syntax.js').visitorList;\n    jstransform = require('jstransform');\n\n    visitorList = classSyntaxVisitors;\n  });\n\n  function transform(code, visitors) {\n    visitors = visitors ? visitorList.concat(visitors) : visitorList;\n\n    code = jstransform.transform(\n      flowSyntaxVisitors,\n      code.join('\\n')\n    ).code;\n\n    return jstransform.transform(\n      visitors,\n      code\n    ).code;\n  }\n\n  describe('param type annotations', () => {\n    it('strips single param annotation', () => {\n      var code = transform([\n        'class Foo {',\n        '  method1(param1: bool) {',\n        '    return param1;',\n        '  }',\n        '}',\n        '',\n        'var Bar = class {',\n        '  method1(param1: bool) {',\n        '    return param1;',\n        '  }',\n        '}'\n      ]);\n      eval(code);\n      expect((new Foo()).method1(42)).toBe(42);\n      expect((new Bar()).method1(42)).toBe(42);\n    });\n\n    it('strips multiple param annotations', () => {\n      var code = transform([\n        'class Foo {',\n        '  method1(param1: bool, param2: number) {',\n        '    return [param1, param2];',\n        '  }',\n        '}',\n        '',\n        'var Bar = class {',\n        '  method1(param1: bool, param2: number) {',\n        '    return [param1, param2];',\n        '  }',\n        '}'\n      ]);\n      eval(code);\n      expect((new Foo()).method1(true, 42)).toEqual([true, 42]);\n      expect((new Bar()).method1(true, 42)).toEqual([true, 42]);\n    });\n\n    it('strips higher-order param annotations', () => {\n      var code = transform([\n        'class Foo {',\n        '  method1(param1: (_:bool) => number) {',\n        '    return param1;',\n        '  }',\n        '}',\n        '',\n        'var Bar = class {',\n        '  method1(param1: (_:bool) => number) {',\n        '    return param1;',\n        '  }',\n        '}'\n      ]);\n      eval(code);\n\n      var callback = function(param) {\n        return param ? 42 : 0;\n      };\n      expect((new Foo()).method1(callback)).toBe(callback);\n      expect((new Bar()).method1(callback)).toBe(callback);\n    });\n\n    it('strips annotated params next to non-annotated params', () => {\n      var code = transform([\n        'class Foo {',\n        '  method1(param1, param2: number) {',\n        '    return [param1, param2];',\n        '  }',\n        '}',\n        '',\n        'var Bar = class {',\n        '  method1(param1, param2: number) {',\n        '    return [param1, param2];',\n        '  }',\n        '}'\n      ]);\n      eval(code);\n      expect((new Foo()).method1('p1', 42)).toEqual(['p1', 42]);\n      expect((new Bar()).method1('p1', 42)).toEqual(['p1', 42]);\n    });\n\n    it('strips annotated params before a rest parameter', () => {\n      var restParamVisitors =\n        require('../es6-rest-param-visitors').visitorList;\n\n      var code = transform([\n        'class Foo {',\n        '  method1(param1: number, ...args) {',\n        '    return [param1, args];',\n        '  }',\n        '}',\n        '',\n        'var Bar = class {',\n        '  method1(param1: number, ...args) {',\n        '    return [param1, args];',\n        '  }',\n        '}'\n      ], restParamVisitors);\n      eval(code);\n      expect((new Foo()).method1(42, 43, 44)).toEqual([42, [43, 44]]);\n      expect((new Bar()).method1(42, 43, 44)).toEqual([42, [43, 44]]);\n    });\n  });\n\n  describe('return type annotations', () => {\n    it('strips method return types', () => {\n      var code = transform([\n        'class Foo {',\n        '  method1(param1:number): () => number {',\n        '    return function() { return param1; };',\n        '  }',\n        '}',\n        '',\n        'var Bar = class {',\n        '  method1(param1:number): () => number {',\n        '    return function() { return param1; };',\n        '  }',\n        '}'\n      ]);\n      eval(code);\n      expect((new Foo()).method1(42)()).toBe(42);\n      expect((new Bar()).method1(42)()).toBe(42);\n    });\n  });\n\n  describe('parametric type annotation', () => {\n    it('strips parametric class type annotations', () => {\n      var code = transform([\n        'class Foo<T> {',\n        '  method1(param1) {',\n        '    return param1;',\n        '  }',\n        '}',\n        '',\n        // TODO: Need to add support to esprima for this\n        // 'var Bar = class<T> {',\n        // '  method1(param1) {',\n        // '    return param1;',\n        // '  }',\n        // '}'\n      ]);\n      eval(code);\n      expect((new Foo()).method1(42)).toBe(42);\n      // expect((new Bar()).method1(42)).toBe(42);\n    });\n\n    it('strips multi-parameter class type annotations', () => {\n      var code = transform([\n        'class Foo<T,S> {',\n        '  method1(param1) {',\n        '    return param1;',\n        '  }',\n        '}',\n        '',\n        // TODO: Need to add support to esprima for this\n        // 'var Bar = class<T> {',\n        // '  method1(param1) {',\n        // '    return param1;',\n        // '  }',\n        // '}'\n      ]);\n      eval(code);\n      expect((new Foo()).method1(42)).toBe(42);\n      // expect(bar(42)).toBe(42);\n    });\n\n    it('strips parametric method type annotations', () => {\n      var code = transform([\n        'class Foo<T> {',\n        '  method1<T>(param1) {',\n        '    return param1;',\n        '  }',\n        '}',\n        '',\n        // TODO: Need to add support to esprima for this\n        // 'var Bar = class<T> {',\n        // '  method1<T>(param1) {',\n        // '    return param1;',\n        // '  }',\n        // '}'\n      ]);\n      eval(code);\n      expect((new Foo()).method1(42)).toBe(42);\n      // expect((new Bar()).method1(42)).toBe(42);\n    });\n\n    it('strips multi-parameter class type annotations', () => {\n      var code = transform([\n        'class Foo<T,S> {',\n        '  method1<T,S>(param1) {',\n        '    return param1;',\n        '  }',\n        '}',\n        '',\n        // TODO: Need to add support to esprima for this\n        // 'var Bar = class<T> {',\n        // '  method1(param1) {',\n        // '    return param1;',\n        // '  }',\n        // '}'\n      ]);\n      eval(code);\n      expect((new Foo()).method1(42)).toBe(42);\n      // expect(bar(42)).toBe(42);\n    });\n  });\n\n  describe('class property annotations', () => {\n    it('strips single class property', () => {\n      var code = transform([\n        'class Foo {',\n        '  prop1: T;',\n        '}'\n      ]);\n      eval(code);\n      expect((new Foo()).prop1).toEqual(undefined);\n    });\n\n    it('strips multiple adjacent class properties', () => {\n      var code = transform([\n        'class Foo {',\n        '  prop1: T;',\n        '  prop2: U;',\n        '}'\n      ]);\n      eval(code);\n      expect((new Foo()).prop1).toEqual(undefined);\n      expect((new Foo()).prop2).toEqual(undefined);\n    });\n\n    it('strips class properties between methods', () => {\n      var code = transform([\n        'class Foo {',\n        '  method1() {}',\n        '  prop1: T;',\n        '  method2() {}',\n        '  prop2: U;',\n        '  method3() {}',\n        '}'\n      ]);\n      eval(code);\n      expect((new Foo()).prop1).toEqual(undefined);\n      expect((new Foo()).prop2).toEqual(undefined);\n    });\n  });\n});\n"]}