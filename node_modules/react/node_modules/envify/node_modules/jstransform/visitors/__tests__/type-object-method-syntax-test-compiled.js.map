{"version":3,"sources":["type-object-method-syntax-test.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAmBA,OAAO,CAAC,cAAc,CAAC,CAAC,WAAW,EAAE,CAAC;;AAEtC,QAAQ,CAAC,kCAAkC,EAAE,YAAW;AACtD,MAAI,kBAAkB,CAAC;AACvB,MAAI,WAAW,CAAC;AAChB,MAAI,WAAW,CAAC;;AAEhB,YAAU,CAAC,YAAW;AACpB,WAAO,CAAC,cAAc,CAAC,CAAC,SAAS,EAAE,CAAC;;AAEpC,sBAAkB,GAAG,OAAO,CAAC,mBAAmB,CAAC,CAAC,WAAW,CAAC;AAC9D,eAAW,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;AACrC,qBAAiB,GACf,OAAO,CAAC,uCAAuC,CAAC,CAAC;;AAEnD,eAAW,GAAG,iBAAiB,CAAC,WAAW,CAAC;GAC7C,CAAC,CAAC;;AAEH,WAAS,SAAS,CAAC,IAAI,EAAE,QAAQ,EAAE;AACjC,YAAQ,GAAG,QAAQ,GAAG,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,WAAW;;;AAAC,AAGjE,QAAI,GAAG,WAAW,CAAC,SAAS,CAC1B,kBAAkB,EAClB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAChB,CAAC,IAAI,CAAC;;AAEP,QAAI,GAAG,WAAW,CAAC,SAAS,CAC1B,QAAQ,EACR,IAAI,CACL,CAAC,IAAI,CAAC;;AAEP,WAAO,IAAI,CAAC;GACb;;AAED,UAAQ,CAAC,wBAAwB,EAAE,MAAM;AACvC,MAAE,CAAC,gCAAgC,EAAE,MAAM;AACzC,UAAI,IAAI,GAAG,SAAS,CAAC,CACnB,aAAa,EACb,uBAAuB,EACvB,oBAAoB,EACpB,KAAK,EACL,IAAI,CACL,CAAC,CAAC;AACH,UAAI,CAAC,IAAI,CAAC,CAAC;AACX,YAAM,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;KAC9B,CAAC,CAAC;;AAEH,MAAE,CAAC,mCAAmC,EAAE,MAAM;AAC5C,UAAI,IAAI,GAAG,SAAS,CAAC,CACnB,aAAa,EACb,uCAAuC,EACvC,8BAA8B,EAC9B,KAAK,EACL,IAAI,CACL,CAAC,CAAC;AACH,UAAI,CAAC,IAAI,CAAC,CAAC;AACX,YAAM,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;KAC/C,CAAC,CAAC;;AAEH,MAAE,CAAC,uCAAuC,EAAE,MAAM;AAChD,UAAI,IAAI,GAAG,SAAS,CAAC,CACnB,aAAa,EACb,qCAAqC,EACrC,oBAAoB,EACpB,KAAK,EACL,IAAI,CACL,CAAC,CAAC;AACH,UAAI,CAAC,IAAI,CAAC,CAAC;;AAEX,UAAI,QAAQ,GAAG,UAAS,KAAK,EAAE;AAC7B,eAAO,KAAK,GAAG,EAAE,GAAG,CAAC,CAAC;OACvB,CAAC;AACF,YAAM,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;KAC1C,CAAC,CAAC;;AAEH,MAAE,CAAC,sDAAsD,EAAE,MAAM;AAC/D,UAAI,IAAI,GAAG,SAAS,CAAC,CACnB,aAAa,EACb,iCAAiC,EACjC,8BAA8B,EAC9B,KAAK,EACL,GAAG,CACJ,CAAC,CAAC;AACH,UAAI,CAAC,IAAI,CAAC,CAAC;AACX,YAAM,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;KAC/C,CAAC,CAAC;;AAEH,MAAE,CAAC,iDAAiD,EAAE,MAAM;AAC1D,UAAI,iBAAiB,GACnB,OAAO,CAAC,4BAA4B,CAAC,CAAC,WAAW,CAAC;;AAEpD,UAAI,IAAI,GAAG,SAAS,CAAC,CACnB,aAAa,EACb,kCAAkC,EAClC,4BAA4B,EAC5B,KAAK,EACL,GAAG,CACJ,EAAE,iBAAiB,CAAC,CAAC;AACtB,UAAI,CAAC,IAAI,CAAC,CAAC;AACX,YAAM,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;KACrD,CAAC,CAAC;;AAEH,MAAE,CAAC,iCAAiC,EAAE,MAAM;AAC1C,UAAI,iBAAiB,GACnB,OAAO,CAAC,4BAA4B,CAAC,CAAC,WAAW,CAAC;;AAEpD,UAAI,IAAI,GAAG,SAAS,CAAC,CACnB,aAAa,EACb,6DAA6D,EAC7D,4BAA4B,EAC5B,KAAK,EACL,GAAG,CACJ,EAAE,iBAAiB,CAAC,CAAC;AACtB,UAAI,CAAC,IAAI,CAAC,CAAC;AACX,YAAM,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;KACrD,CAAC,CAAC;GACJ,CAAC,CAAC;;AAEH,UAAQ,CAAC,yBAAyB,EAAE,MAAM;AACxC,MAAE,CAAC,8BAA8B,EAAE,MAAM;AACvC,UAAI,IAAI,GAAG,SAAS,CAAC,CACnB,aAAa,EACb,sCAAsC,EACtC,2CAA2C,EAC3C,KAAK,EACL,GAAG,CACJ,CAAC,CAAC;AACH,UAAI,CAAC,IAAI,CAAC,CAAC;AACX,YAAM,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;KAChC,CAAC,CAAC;GACJ,CAAC,CAAC;;AAEH,UAAQ,CAAC,4BAA4B,EAAE,MAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAgC5C,CAAC,CAAC;CACJ,CAAC,CAAC","file":"type-object-method-syntax-test-compiled.js","sourcesContent":["/**\n * Copyright 2013 Facebook, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*jshint evil:true*/\n/*jshint -W117*/\n\nrequire('mock-modules').autoMockOff();\n\ndescribe('static type object-method syntax', function() {\n  var flowSyntaxVisitors;\n  var jstransform;\n  var visitorList;\n\n  beforeEach(function() {\n    require('mock-modules').dumpCache();\n\n    flowSyntaxVisitors = require('../type-syntax.js').visitorList;\n    jstransform = require('jstransform');\n    objMethodVisitors =\n      require('../es6-object-concise-method-visitors');\n\n    visitorList = objMethodVisitors.visitorList;\n  });\n\n  function transform(code, visitors) {\n    visitors = visitors ? visitorList.concat(visitors) : visitorList;\n\n    // We run the flow transform first\n    code = jstransform.transform(\n      flowSyntaxVisitors,\n      code.join('\\n')\n    ).code;\n\n    code = jstransform.transform(\n      visitors,\n      code\n    ).code;\n\n    return code;\n  }\n\n  describe('param type annotations', () => {\n    it('strips single param annotation', () => {\n      var code = transform([\n        'var foo = {',\n        '  bar(param1: bool) {',\n        '    return param1;',\n        '  }',\n        '};',\n      ]);\n      eval(code);\n      expect(foo.bar(42)).toBe(42);\n    });\n\n    it('strips multiple param annotations', () => {\n      var code = transform([\n        'var foo = {',\n        '  bar(param1: bool, param2: number) {',\n        '    return [param1, param2];',\n        '  }',\n        '};'\n      ]);\n      eval(code);\n      expect(foo.bar(true, 42)).toEqual([true, 42]);\n    });\n\n    it('strips higher-order param annotations', () => {\n      var code = transform([\n        'var foo = {',\n        '  bar(param1: (_:bool) => number) {',\n        '    return param1;',\n        '  }',\n        '};'\n      ]);\n      eval(code);\n\n      var callback = function(param) {\n        return param ? 42 : 0;\n      };\n      expect(foo.bar(callback)).toBe(callback);\n    });\n\n    it('strips annotated params next to non-annotated params', () => {\n      var code = transform([\n        'var foo = {',\n        '  bar(param1, param2: number) {',\n        '    return [param1, param2];',\n        '  }',\n        '}',\n      ]);\n      eval(code);\n      expect(foo.bar('p1', 42)).toEqual(['p1', 42]);\n    });\n\n    it('strips annotated params before a rest parameter', () => {\n      var restParamVisitors =\n        require('../es6-rest-param-visitors').visitorList;\n\n      var code = transform([\n        'var foo = {',\n        '  bar(param1: number, ...args) {',\n        '    return [param1, args];',\n        '  }',\n        '}',\n      ], restParamVisitors);\n      eval(code);\n      expect(foo.bar(42, 43, 44)).toEqual([42, [43, 44]]);\n    });\n\n    it('strips annotated rest parameter', () => {\n      var restParamVisitors =\n        require('../es6-rest-param-visitors').visitorList;\n\n      var code = transform([\n        'var foo = {',\n        '  bar(param1: number, ...args: Array<number>): Array<any> {',\n        '    return [param1, args];',\n        '  }',\n        '}',\n      ], restParamVisitors);\n      eval(code);\n      expect(foo.bar(42, 43, 44)).toEqual([42, [43, 44]]);\n    });\n  });\n\n  describe('return type annotations', () => {\n    it('strips function return types', () => {\n      var code = transform([\n        'var foo = {',\n        '  bar(param1:number): () => number {',\n        '    return function() { return param1; };',\n        '  }',\n        '}',\n      ]);\n      eval(code);\n      expect(foo.bar(42)()).toBe(42);\n    });\n  });\n\n  describe('parametric type annotation', () => {\n    // TODO: Fix esprima parsing for these cases\n    /*\n    it('strips parametric type annotations', () => {\n      // TODO: Doesnt parse\n      var code = transform([\n        'var foo = {',\n        '  bar<T>(param1) {',\n        '    return param1;',\n        '  }',\n        '}',\n      ]);\n      eval(code);\n      expect(foo.bar(42)).toBe(42);\n    });\n\n    it('strips multi-parameter type annotations', () => {\n      // TODO: Doesnt parse\n      var restParamVisitors =\n        require('../es6-rest-param-visitors').visitorList;\n\n      var code = transform([\n        'var foo = {',\n        '  bar<T, S>(param1) {',\n        '    return param1;',\n        '  }',\n        '}',\n      ], restParamVisitors);\n      eval(code);\n      expect(foo.bar(42)).toBe(42);\n    });\n    */\n  });\n});\n"]}