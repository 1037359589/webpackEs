{"version":3,"sources":["visitors.js"],"names":[],"mappings":"AAAA,IAAI,MAAM,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC,MAAM,CAAA;AAC1C,IAAI,KAAK,GAAG,OAAO,CAAC,uBAAuB,CAAC,CAAA;;AAE5C,SAAS,MAAM,CAAC,IAAI,EAAE;AACpB,MAAI,IAAI,GAAI,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAA;AAC9D,MAAI,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAA;;AAExC,WAAS,eAAe,CAAC,QAAQ,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE;AACpD,QAAI,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAA;;AAEnD,SAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACpC,UAAI,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAA;AACxB,UAAI,KAAK,KAAK,SAAS,EAAE;AACvB,kBAAU,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC,CAAA;AAC9B,eAAO,KAAK,CAAA;OACb;KACF;;AAED,QAAI,KAAK,EAAE;AACT,gBAAU,CAAC,IAAI,EAAE,KAAK,EAAE,SAAS,CAAC,CAAA;KACnC;;AAED,WAAO,KAAK,CAAA;GACb;;AAED,WAAS,UAAU,CAAC,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE;AACtC,SAAK,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAA;AACnC,SAAK,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,CAAA;AAC1C,SAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAA;GACjC;;AAED,iBAAe,CAAC,IAAI,GAAG,UAAS,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE;AACjD,WACE,IAAI,CAAC,IAAI,KAAK,MAAM,CAAC,gBAAgB,IAClC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,MAAM,CAAC,oBAAoB,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,IAAI,CAAA,AAAC,IACxE,IAAI,CAAC,QAAQ,CAAC,IAAI,MAAM,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC,UAAU,CAAA,AAAC,IAC3E,IAAI,CAAC,MAAM,CAAC,QAAQ,KAAK,KAAK,IAC9B,IAAI,CAAC,MAAM,CAAC,IAAI,KAAK,MAAM,CAAC,gBAAgB,IAC5C,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,KAAK,MAAM,CAAC,UAAU,IAC7C,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,KAAK,SAAS,IACrC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,KAAK,MAAM,CAAC,UAAU,IAC/C,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,KAAK,KAAK,CACvC;GACF,CAAA;;AAED,SAAO,CAAC,eAAe,CAAC,CAAA;CACzB;;AAED,MAAM,CAAC,OAAO,GAAG,MAAM,CAAA","file":"visitors-compiled.js","sourcesContent":["var Syntax = require('jstransform').Syntax\nvar utils = require('jstransform/src/utils')\n\nfunction create(envs) {\n  var args  = [].concat(envs[0]._ || []).concat(envs[1]._ || [])\n  var purge = args.indexOf('purge') !== -1\n\n  function visitProcessEnv(traverse, node, path, state) {\n    var key = node.property.name || node.property.value\n\n    for (var i = 0; i < envs.length; i++) {\n      var value = envs[i][key]\n      if (value !== undefined) {\n        replaceEnv(node, state, value)\n        return false\n      }\n    }\n\n    if (purge) {\n      replaceEnv(node, state, undefined)\n    }\n\n    return false\n  }\n\n  function replaceEnv(node, state, value) {\n    utils.catchup(node.range[0], state)\n    utils.append(JSON.stringify(value), state)\n    utils.move(node.range[1], state)\n  }\n\n  visitProcessEnv.test = function(node, path, state) {\n    return (\n      node.type === Syntax.MemberExpression\n      && !(path[0].type === Syntax.AssignmentExpression && path[0].left === node)\n      && node.property.type === (node.computed ? Syntax.Literal : Syntax.Identifier)\n      && node.object.computed === false\n      && node.object.type === Syntax.MemberExpression\n      && node.object.object.type === Syntax.Identifier\n      && node.object.object.name === 'process'\n      && node.object.property.type === Syntax.Identifier\n      && node.object.property.name === 'env'\n    )\n  }\n\n  return [visitProcessEnv]\n}\n\nmodule.exports = create\n"]}