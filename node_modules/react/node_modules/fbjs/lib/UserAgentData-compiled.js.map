{"version":3,"sources":["UserAgentData.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAsBA,YAAY,CAAC;;AAEb,IAAI,QAAQ,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;;AAEvC,IAAI,OAAO,GAAG,SAAS,CAAC;;AAExB,IAAI,YAAY,GAAG;AACjB,UAAQ,EAAE,UAAU;CACrB;;;;;AAAC,AAKF,SAAS,mBAAmB,CAAC,IAAI,EAAE;AACjC,SAAO,YAAY,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC;CACnC;;;;;;;AAAA,AAOD,SAAS,iBAAiB,CAAC,OAAO,EAAE;AAClC,MAAI,CAAC,OAAO,EAAE;AACZ,WAAO;AACL,WAAK,EAAE,EAAE;AACT,WAAK,EAAE,EAAE;KACV,CAAC;GACH;AACD,MAAI,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AAC/B,SAAO;AACL,SAAK,EAAE,KAAK,CAAC,CAAC,CAAC;AACf,SAAK,EAAE,KAAK,CAAC,CAAC,CAAC;GAChB,CAAC;CACH;;;;;;AAAA,AAMD,IAAI,MAAM,GAAG,IAAI,QAAQ,EAAE,CAAC;AAC5B,IAAI,OAAO,GAAG,MAAM,CAAC,SAAS,EAAE;;;AAAC,AAGjC,IAAI,kBAAkB,GAAG,iBAAiB,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;AACpE,IAAI,MAAM,GAAG;AACX,qBAAmB,EAAE,OAAO,CAAC,GAAG,CAAC,YAAY,IAAI,OAAO;AACxD,oBAAkB,EAAE,OAAO,CAAC,OAAO,CAAC,OAAO,IAAI,OAAO;AACtD,qBAAmB,EAAE,kBAAkB,CAAC,KAAK,IAAI,OAAO;AACxD,aAAW,EAAE,OAAO,CAAC,OAAO,CAAC,IAAI,IAAI,OAAO;AAC5C,gBAAc,EAAE,OAAO,CAAC,OAAO,CAAC,KAAK,IAAI,OAAO;AAChD,YAAU,EAAE,OAAO,CAAC,MAAM,CAAC,KAAK,IAAI,OAAO;AAC3C,YAAU,EAAE,OAAO,CAAC,MAAM,CAAC,IAAI,IAAI,OAAO;AAC1C,eAAa,EAAE,OAAO,CAAC,MAAM,CAAC,OAAO,IAAI,OAAO;AAChD,sBAAoB,EAAE,OAAO,CAAC,GAAG,CAAC,YAAY,IAAI,OAAO;AACzD,cAAY,EAAE,mBAAmB,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,OAAO;AAC7D,iBAAe,EAAE,OAAO,CAAC,EAAE,CAAC,OAAO,IAAI,OAAO;AAC9C,qBAAmB,EAAE,OAAO,CAAC,EAAE,CAAC,OAAO,IAAI,OAAO;CACnD,CAAC;;AAEF,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC","file":"UserAgentData-compiled.js","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule UserAgentData\n */\n\n/**\n * Usage note:\n * This module makes a best effort to export the same data we would internally.\n * At Facebook we use a server-generated module that does the parsing and\n * exports the data for the client to use. We can't rely on a server-side\n * implementation in open source so instead we make use of an open source\n * library to do the heavy lifting and then make some adjustments as necessary.\n * It's likely there will be some differences. Some we can smooth over.\n * Others are going to be harder.\n */\n\n'use strict';\n\nvar UAParser = require('ua-parser-js');\n\nvar UNKNOWN = 'Unknown';\n\nvar PLATFORM_MAP = {\n  'Mac OS': 'Mac OS X'\n};\n\n/**\n * Convert from UAParser platform name to what we expect.\n */\nfunction convertPlatformName(name) {\n  return PLATFORM_MAP[name] || name;\n}\n\n/**\n * Get the version number in parts. This is very naive. We actually get major\n * version as a part of UAParser already, which is generally good enough, but\n * let's get the minor just in case.\n */\nfunction getBrowserVersion(version) {\n  if (!version) {\n    return {\n      major: '',\n      minor: ''\n    };\n  }\n  var parts = version.split('.');\n  return {\n    major: parts[0],\n    minor: parts[1]\n  };\n}\n\n/**\n * Get the UA data fom UAParser and then convert it to the format we're\n * expecting for our APIS.\n */\nvar parser = new UAParser();\nvar results = parser.getResult();\n\n// Do some conversion first.\nvar browserVersionData = getBrowserVersion(results.browser.version);\nvar uaData = {\n  browserArchitecture: results.cpu.architecture || UNKNOWN,\n  browserFullVersion: results.browser.version || UNKNOWN,\n  browserMinorVersion: browserVersionData.minor || UNKNOWN,\n  browserName: results.browser.name || UNKNOWN,\n  browserVersion: results.browser.major || UNKNOWN,\n  deviceName: results.device.model || UNKNOWN,\n  engineName: results.engine.name || UNKNOWN,\n  engineVersion: results.engine.version || UNKNOWN,\n  platformArchitecture: results.cpu.architecture || UNKNOWN,\n  platformName: convertPlatformName(results.os.name) || UNKNOWN,\n  platformVersion: results.os.version || UNKNOWN,\n  platformFullVersion: results.os.version || UNKNOWN\n};\n\nmodule.exports = uaData;"]}