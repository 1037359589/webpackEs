{"version":3,"sources":["VersionRange.js"],"names":[],"mappings":"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","file":"VersionRange-compiled.js","sourcesContent":["/**\n * Copyright 2013-2015, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule VersionRange\n */\n\n'use strict';\n\nvar _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\nvar invariant = require('./invariant');\n\nvar componentRegex = /\\./;\nvar orRegex = /\\|\\|/;\nvar rangeRegex = /\\s+\\-\\s+/;\nvar modifierRegex = /^(<=|<|=|>=|~>|~|>|)?\\s*(.+)/;\nvar numericRegex = /^(\\d*)(.*)/;\n\n/**\n * Splits input `range` on \"||\" and returns true if any subrange matches\n * `version`.\n *\n * @param {string} range\n * @param {string} version\n * @returns {boolean}\n */\nfunction checkOrExpression(range, version) {\n  var expressions = range.split(orRegex);\n\n  if (expressions.length > 1) {\n    return expressions.some(function (range) {\n      return VersionRange.contains(range, version);\n    });\n  } else {\n    range = expressions[0].trim();\n    return checkRangeExpression(range, version);\n  }\n}\n\n/**\n * Splits input `range` on \" - \" (the surrounding whitespace is required) and\n * returns true if version falls between the two operands.\n *\n * @param {string} range\n * @param {string} version\n * @returns {boolean}\n */\nfunction checkRangeExpression(range, version) {\n  var expressions = range.split(rangeRegex);\n\n  !(expressions.length > 0 && expressions.length <= 2) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'the \"-\" operator expects exactly 2 operands') : invariant(false) : undefined;\n\n  if (expressions.length === 1) {\n    return checkSimpleExpression(expressions[0], version);\n  } else {\n    var _expressions = _slicedToArray(expressions, 2);\n\n    var startVersion = _expressions[0];\n    var endVersion = _expressions[1];\n\n    !(isSimpleVersion(startVersion) && isSimpleVersion(endVersion)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'operands to the \"-\" operator must be simple (no modifiers)') : invariant(false) : undefined;\n\n    return checkSimpleExpression('>=' + startVersion, version) && checkSimpleExpression('<=' + endVersion, version);\n  }\n}\n\n/**\n * Checks if `range` matches `version`. `range` should be a \"simple\" range (ie.\n * not a compound range using the \" - \" or \"||\" operators).\n *\n * @param {string} range\n * @param {string} version\n * @returns {boolean}\n */\nfunction checkSimpleExpression(range, version) {\n  range = range.trim();\n  if (range === '') {\n    return true;\n  }\n\n  var versionComponents = version.split(componentRegex);\n\n  var _getModifierAndComponents = getModifierAndComponents(range);\n\n  var modifier = _getModifierAndComponents.modifier;\n  var rangeComponents = _getModifierAndComponents.rangeComponents;\n\n  switch (modifier) {\n    case '<':\n      return checkLessThan(versionComponents, rangeComponents);\n    case '<=':\n      return checkLessThanOrEqual(versionComponents, rangeComponents);\n    case '>=':\n      return checkGreaterThanOrEqual(versionComponents, rangeComponents);\n    case '>':\n      return checkGreaterThan(versionComponents, rangeComponents);\n    case '~':\n    case '~>':\n      return checkApproximateVersion(versionComponents, rangeComponents);\n    default:\n      return checkEqual(versionComponents, rangeComponents);\n  }\n}\n\n/**\n * Checks whether `a` is less than `b`.\n *\n * @param {array<string>} a\n * @param {array<string>} b\n * @returns {boolean}\n */\nfunction checkLessThan(a, b) {\n  return compareComponents(a, b) === -1;\n}\n\n/**\n * Checks whether `a` is less than or equal to `b`.\n *\n * @param {array<string>} a\n * @param {array<string>} b\n * @returns {boolean}\n */\nfunction checkLessThanOrEqual(a, b) {\n  var result = compareComponents(a, b);\n  return result === -1 || result === 0;\n}\n\n/**\n * Checks whether `a` is equal to `b`.\n *\n * @param {array<string>} a\n * @param {array<string>} b\n * @returns {boolean}\n */\nfunction checkEqual(a, b) {\n  return compareComponents(a, b) === 0;\n}\n\n/**\n * Checks whether `a` is greater than or equal to `b`.\n *\n * @param {array<string>} a\n * @param {array<string>} b\n * @returns {boolean}\n */\nfunction checkGreaterThanOrEqual(a, b) {\n  var result = compareComponents(a, b);\n  return result === 1 || result === 0;\n}\n\n/**\n * Checks whether `a` is greater than `b`.\n *\n * @param {array<string>} a\n * @param {array<string>} b\n * @returns {boolean}\n */\nfunction checkGreaterThan(a, b) {\n  return compareComponents(a, b) === 1;\n}\n\n/**\n * Checks whether `a` is \"reasonably close\" to `b` (as described in\n * https://www.npmjs.org/doc/misc/semver.html). For example, if `b` is \"1.3.1\"\n * then \"reasonably close\" is defined as \">= 1.3.1 and < 1.4\".\n *\n * @param {array<string>} a\n * @param {array<string>} b\n * @returns {boolean}\n */\nfunction checkApproximateVersion(a, b) {\n  var lowerBound = b.slice();\n  var upperBound = b.slice();\n\n  if (upperBound.length > 1) {\n    upperBound.pop();\n  }\n  var lastIndex = upperBound.length - 1;\n  var numeric = parseInt(upperBound[lastIndex], 10);\n  if (isNumber(numeric)) {\n    upperBound[lastIndex] = numeric + 1 + '';\n  }\n\n  return checkGreaterThanOrEqual(a, lowerBound) && checkLessThan(a, upperBound);\n}\n\n/**\n * Extracts the optional modifier (<, <=, =, >=, >, ~, ~>) and version\n * components from `range`.\n *\n * For example, given `range` \">= 1.2.3\" returns an object with a `modifier` of\n * `\">=\"` and `components` of `[1, 2, 3]`.\n *\n * @param {string} range\n * @returns {object}\n */\nfunction getModifierAndComponents(range) {\n  var rangeComponents = range.split(componentRegex);\n  var matches = rangeComponents[0].match(modifierRegex);\n  !matches ? process.env.NODE_ENV !== 'production' ? invariant(false, 'expected regex to match but it did not') : invariant(false) : undefined;\n\n  return {\n    modifier: matches[1],\n    rangeComponents: [matches[2]].concat(rangeComponents.slice(1))\n  };\n}\n\n/**\n * Determines if `number` is a number.\n *\n * @param {mixed} number\n * @returns {boolean}\n */\nfunction isNumber(number) {\n  return !isNaN(number) && isFinite(number);\n}\n\n/**\n * Tests whether `range` is a \"simple\" version number without any modifiers\n * (\">\", \"~\" etc).\n *\n * @param {string} range\n * @returns {boolean}\n */\nfunction isSimpleVersion(range) {\n  return !getModifierAndComponents(range).modifier;\n}\n\n/**\n * Zero-pads array `array` until it is at least `length` long.\n *\n * @param {array} array\n * @param {number} length\n */\nfunction zeroPad(array, length) {\n  for (var i = array.length; i < length; i++) {\n    array[i] = '0';\n  }\n}\n\n/**\n * Normalizes `a` and `b` in preparation for comparison by doing the following:\n *\n * - zero-pads `a` and `b`\n * - marks any \"x\", \"X\" or \"*\" component in `b` as equivalent by zero-ing it out\n *   in both `a` and `b`\n * - marks any final \"*\" component in `b` as a greedy wildcard by zero-ing it\n *   and all of its successors in `a`\n *\n * @param {array<string>} a\n * @param {array<string>} b\n * @returns {array<array<string>>}\n */\nfunction normalizeVersions(a, b) {\n  a = a.slice();\n  b = b.slice();\n\n  zeroPad(a, b.length);\n\n  // mark \"x\" and \"*\" components as equal\n  for (var i = 0; i < b.length; i++) {\n    var matches = b[i].match(/^[x*]$/i);\n    if (matches) {\n      b[i] = a[i] = '0';\n\n      // final \"*\" greedily zeros all remaining components\n      if (matches[0] === '*' && i === b.length - 1) {\n        for (var j = i; j < a.length; j++) {\n          a[j] = '0';\n        }\n      }\n    }\n  }\n\n  zeroPad(b, a.length);\n\n  return [a, b];\n}\n\n/**\n * Returns the numerical -- not the lexicographical -- ordering of `a` and `b`.\n *\n * For example, `10-alpha` is greater than `2-beta`.\n *\n * @param {string} a\n * @param {string} b\n * @returns {number} -1, 0 or 1 to indicate whether `a` is less than, equal to,\n * or greater than `b`, respectively\n */\nfunction compareNumeric(a, b) {\n  var aPrefix = a.match(numericRegex)[1];\n  var bPrefix = b.match(numericRegex)[1];\n  var aNumeric = parseInt(aPrefix, 10);\n  var bNumeric = parseInt(bPrefix, 10);\n\n  if (isNumber(aNumeric) && isNumber(bNumeric) && aNumeric !== bNumeric) {\n    return compare(aNumeric, bNumeric);\n  } else {\n    return compare(a, b);\n  }\n}\n\n/**\n * Returns the ordering of `a` and `b`.\n *\n * @param {string|number} a\n * @param {string|number} b\n * @returns {number} -1, 0 or 1 to indicate whether `a` is less than, equal to,\n * or greater than `b`, respectively\n */\nfunction compare(a, b) {\n  !(typeof a === typeof b) ? process.env.NODE_ENV !== 'production' ? invariant(false, '\"a\" and \"b\" must be of the same type') : invariant(false) : undefined;\n\n  if (a > b) {\n    return 1;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 0;\n  }\n}\n\n/**\n * Compares arrays of version components.\n *\n * @param {array<string>} a\n * @param {array<string>} b\n * @returns {number} -1, 0 or 1 to indicate whether `a` is less than, equal to,\n * or greater than `b`, respectively\n */\nfunction compareComponents(a, b) {\n  var _normalizeVersions = normalizeVersions(a, b);\n\n  var _normalizeVersions2 = _slicedToArray(_normalizeVersions, 2);\n\n  var aNormalized = _normalizeVersions2[0];\n  var bNormalized = _normalizeVersions2[1];\n\n  for (var i = 0; i < bNormalized.length; i++) {\n    var result = compareNumeric(aNormalized[i], bNormalized[i]);\n    if (result) {\n      return result;\n    }\n  }\n\n  return 0;\n}\n\nvar VersionRange = {\n  /**\n   * Checks whether `version` satisfies the `range` specification.\n   *\n   * We support a subset of the expressions defined in\n   * https://www.npmjs.org/doc/misc/semver.html:\n   *\n   *    version   Must match version exactly\n   *    =version  Same as just version\n   *    >version  Must be greater than version\n   *    >=version Must be greater than or equal to version\n   *    <version  Must be less than version\n   *    <=version Must be less than or equal to version\n   *    ~version  Must be at least version, but less than the next significant\n   *              revision above version:\n   *              \"~1.2.3\" is equivalent to \">= 1.2.3 and < 1.3\"\n   *    ~>version Equivalent to ~version\n   *    1.2.x     Must match \"1.2.x\", where \"x\" is a wildcard that matches\n   *              anything\n   *    1.2.*     Similar to \"1.2.x\", but \"*\" in the trailing position is a\n   *              \"greedy\" wildcard, so will match any number of additional\n   *              components:\n   *              \"1.2.*\" will match \"1.2.1\", \"1.2.1.1\", \"1.2.1.1.1\" etc\n   *    *         Any version\n   *    \"\"        (Empty string) Same as *\n   *    v1 - v2   Equivalent to \">= v1 and <= v2\"\n   *    r1 || r2  Passes if either r1 or r2 are satisfied\n   *\n   * @param {string} range\n   * @param {string} version\n   * @returns {boolean}\n   */\n  contains: function (range, version) {\n    return checkOrExpression(range.trim(), version.trim());\n  }\n};\n\nmodule.exports = VersionRange;"]}