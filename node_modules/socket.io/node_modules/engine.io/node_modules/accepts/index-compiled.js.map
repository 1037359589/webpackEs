{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["var Negotiator = require('negotiator')\nvar mime = require('mime-types')\n\nvar slice = [].slice\n\nmodule.exports = Accepts\n\nfunction Accepts(req) {\n  if (!(this instanceof Accepts))\n    return new Accepts(req)\n\n  this.headers = req.headers\n  this.negotiator = Negotiator(req)\n}\n\n/**\n * Check if the given `type(s)` is acceptable, returning\n * the best match when true, otherwise `undefined`, in which\n * case you should respond with 406 \"Not Acceptable\".\n *\n * The `type` value may be a single mime type string\n * such as \"application/json\", the extension name\n * such as \"json\" or an array `[\"json\", \"html\", \"text/plain\"]`. When a list\n * or array is given the _best_ match, if any is returned.\n *\n * Examples:\n *\n *     // Accept: text/html\n *     this.types('html');\n *     // => \"html\"\n *\n *     // Accept: text/*, application/json\n *     this.types('html');\n *     // => \"html\"\n *     this.types('text/html');\n *     // => \"text/html\"\n *     this.types('json', 'text');\n *     // => \"json\"\n *     this.types('application/json');\n *     // => \"application/json\"\n *\n *     // Accept: text/*, application/json\n *     this.types('image/png');\n *     this.types('png');\n *     // => undefined\n *\n *     // Accept: text/*;q=.5, application/json\n *     this.types(['html', 'json']);\n *     this.types('html', 'json');\n *     // => \"json\"\n *\n * @param {String|Array} type(s)...\n * @return {String|Array|Boolean}\n * @api public\n */\n\nAccepts.prototype.type =\nAccepts.prototype.types = function (types) {\n  if (!Array.isArray(types)) types = slice.call(arguments);\n  var n = this.negotiator;\n  if (!types.length) return n.mediaTypes();\n  if (!this.headers.accept) return types[0];\n  var mimes = types.map(extToMime);\n  var accepts = n.mediaTypes(mimes.filter(validMime));\n  var first = accepts[0];\n  if (!first) return false;\n  return types[mimes.indexOf(first)];\n}\n\n/**\n * Return accepted encodings or best fit based on `encodings`.\n *\n * Given `Accept-Encoding: gzip, deflate`\n * an array sorted by quality is returned:\n *\n *     ['gzip', 'deflate']\n *\n * @param {String|Array} encoding(s)...\n * @return {String|Array}\n * @api public\n */\n\nAccepts.prototype.encoding =\nAccepts.prototype.encodings = function (encodings) {\n  if (!Array.isArray(encodings)) encodings = slice.call(arguments);\n  var n = this.negotiator;\n  if (!encodings.length) return n.encodings();\n  return n.encodings(encodings)[0] || false;\n}\n\n/**\n * Return accepted charsets or best fit based on `charsets`.\n *\n * Given `Accept-Charset: utf-8, iso-8859-1;q=0.2, utf-7;q=0.5`\n * an array sorted by quality is returned:\n *\n *     ['utf-8', 'utf-7', 'iso-8859-1']\n *\n * @param {String|Array} charset(s)...\n * @return {String|Array}\n * @api public\n */\n\nAccepts.prototype.charset =\nAccepts.prototype.charsets = function (charsets) {\n  if (!Array.isArray(charsets)) charsets = [].slice.call(arguments);\n  var n = this.negotiator;\n  if (!charsets.length) return n.charsets();\n  if (!this.headers['accept-charset']) return charsets[0];\n  return n.charsets(charsets)[0] || false;\n}\n\n/**\n * Return accepted languages or best fit based on `langs`.\n *\n * Given `Accept-Language: en;q=0.8, es, pt`\n * an array sorted by quality is returned:\n *\n *     ['es', 'pt', 'en']\n *\n * @param {String|Array} lang(s)...\n * @return {Array|String}\n * @api public\n */\n\nAccepts.prototype.lang =\nAccepts.prototype.langs =\nAccepts.prototype.language =\nAccepts.prototype.languages = function (langs) {\n  if (!Array.isArray(langs)) langs = slice.call(arguments);\n  var n = this.negotiator;\n  if (!langs.length) return n.languages();\n  if (!this.headers['accept-language']) return langs[0];\n  return n.languages(langs)[0] || false;\n}\n\n/**\n * Convert extnames to mime.\n *\n * @param {String} type\n * @return {String}\n * @api private\n */\n\nfunction extToMime(type) {\n  if (~type.indexOf('/')) return type;\n  return mime.lookup(type);\n}\n\n/**\n * Check if mime is valid.\n *\n * @param {String} type\n * @return {String}\n * @api private\n */\n\nfunction validMime(type) {\n  return typeof type === 'string';\n}\n"]}