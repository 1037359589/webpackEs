{"version":3,"sources":["request.js"],"names":[],"mappings":"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","file":"request-compiled.js","sourcesContent":["/*!\n * express\n * Copyright(c) 2009-2013 TJ Holowaychuk\n * Copyright(c) 2013 Roman Shtylman\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar accepts = require('accepts');\nvar deprecate = require('depd')('express');\nvar isIP = require('net').isIP;\nvar typeis = require('type-is');\nvar http = require('http');\nvar fresh = require('fresh');\nvar parseRange = require('range-parser');\nvar parse = require('parseurl');\nvar proxyaddr = require('proxy-addr');\n\n/**\n * Request prototype.\n */\n\nvar req = exports = module.exports = {\n  __proto__: http.IncomingMessage.prototype\n};\n\n/**\n * Return request header.\n *\n * The `Referrer` header field is special-cased,\n * both `Referrer` and `Referer` are interchangeable.\n *\n * Examples:\n *\n *     req.get('Content-Type');\n *     // => \"text/plain\"\n *\n *     req.get('content-type');\n *     // => \"text/plain\"\n *\n *     req.get('Something');\n *     // => undefined\n *\n * Aliased as `req.header()`.\n *\n * @param {String} name\n * @return {String}\n * @public\n */\n\nreq.get =\nreq.header = function header(name) {\n  var lc = name.toLowerCase();\n\n  switch (lc) {\n    case 'referer':\n    case 'referrer':\n      return this.headers.referrer\n        || this.headers.referer;\n    default:\n      return this.headers[lc];\n  }\n};\n\n/**\n * To do: update docs.\n *\n * Check if the given `type(s)` is acceptable, returning\n * the best match when true, otherwise `undefined`, in which\n * case you should respond with 406 \"Not Acceptable\".\n *\n * The `type` value may be a single MIME type string\n * such as \"application/json\", an extension name\n * such as \"json\", a comma-delimited list such as \"json, html, text/plain\",\n * an argument list such as `\"json\", \"html\", \"text/plain\"`,\n * or an array `[\"json\", \"html\", \"text/plain\"]`. When a list\n * or array is given, the _best_ match, if any is returned.\n *\n * Examples:\n *\n *     // Accept: text/html\n *     req.accepts('html');\n *     // => \"html\"\n *\n *     // Accept: text/*, application/json\n *     req.accepts('html');\n *     // => \"html\"\n *     req.accepts('text/html');\n *     // => \"text/html\"\n *     req.accepts('json, text');\n *     // => \"json\"\n *     req.accepts('application/json');\n *     // => \"application/json\"\n *\n *     // Accept: text/*, application/json\n *     req.accepts('image/png');\n *     req.accepts('png');\n *     // => undefined\n *\n *     // Accept: text/*;q=.5, application/json\n *     req.accepts(['html', 'json']);\n *     req.accepts('html', 'json');\n *     req.accepts('html, json');\n *     // => \"json\"\n *\n * @param {String|Array} type(s)\n * @return {String|Array|Boolean}\n * @public\n */\n\nreq.accepts = function(){\n  var accept = accepts(this);\n  return accept.types.apply(accept, arguments);\n};\n\n/**\n * Check if the given `encoding`s are accepted.\n *\n * @param {String} ...encoding\n * @return {String|Array}\n * @public\n */\n\nreq.acceptsEncodings = function(){\n  var accept = accepts(this);\n  return accept.encodings.apply(accept, arguments);\n};\n\nreq.acceptsEncoding = deprecate.function(req.acceptsEncodings,\n  'req.acceptsEncoding: Use acceptsEncodings instead');\n\n/**\n * Check if the given `charset`s are acceptable,\n * otherwise you should respond with 406 \"Not Acceptable\".\n *\n * @param {String} ...charset\n * @return {String|Array}\n * @public\n */\n\nreq.acceptsCharsets = function(){\n  var accept = accepts(this);\n  return accept.charsets.apply(accept, arguments);\n};\n\nreq.acceptsCharset = deprecate.function(req.acceptsCharsets,\n  'req.acceptsCharset: Use acceptsCharsets instead');\n\n/**\n * Check if the given `lang`s are acceptable,\n * otherwise you should respond with 406 \"Not Acceptable\".\n *\n * @param {String} ...lang\n * @return {String|Array}\n * @public\n */\n\nreq.acceptsLanguages = function(){\n  var accept = accepts(this);\n  return accept.languages.apply(accept, arguments);\n};\n\nreq.acceptsLanguage = deprecate.function(req.acceptsLanguages,\n  'req.acceptsLanguage: Use acceptsLanguages instead');\n\n/**\n * Parse Range header field,\n * capping to the given `size`.\n *\n * Unspecified ranges such as \"0-\" require\n * knowledge of your resource length. In\n * the case of a byte range this is of course\n * the total number of bytes. If the Range\n * header field is not given `null` is returned,\n * `-1` when unsatisfiable, `-2` when syntactically invalid.\n *\n * NOTE: remember that ranges are inclusive, so\n * for example \"Range: users=0-3\" should respond\n * with 4 users when available, not 3.\n *\n * @param {Number} size\n * @return {Array}\n * @public\n */\n\nreq.range = function(size){\n  var range = this.get('Range');\n  if (!range) return;\n  return parseRange(size, range);\n};\n\n/**\n * Return the value of param `name` when present or `defaultValue`.\n *\n *  - Checks route placeholders, ex: _/user/:id_\n *  - Checks body params, ex: id=12, {\"id\":12}\n *  - Checks query string params, ex: ?id=12\n *\n * To utilize request bodies, `req.body`\n * should be an object. This can be done by using\n * the `bodyParser()` middleware.\n *\n * @param {String} name\n * @param {Mixed} [defaultValue]\n * @return {String}\n * @public\n */\n\nreq.param = function param(name, defaultValue) {\n  var params = this.params || {};\n  var body = this.body || {};\n  var query = this.query || {};\n\n  var args = arguments.length === 1\n    ? 'name'\n    : 'name, default';\n  deprecate('req.param(' + args + '): Use req.params, req.body, or req.query instead');\n\n  if (null != params[name] && params.hasOwnProperty(name)) return params[name];\n  if (null != body[name]) return body[name];\n  if (null != query[name]) return query[name];\n\n  return defaultValue;\n};\n\n/**\n * Check if the incoming request contains the \"Content-Type\"\n * header field, and it contains the give mime `type`.\n *\n * Examples:\n *\n *      // With Content-Type: text/html; charset=utf-8\n *      req.is('html');\n *      req.is('text/html');\n *      req.is('text/*');\n *      // => true\n *\n *      // When Content-Type is application/json\n *      req.is('json');\n *      req.is('application/json');\n *      req.is('application/*');\n *      // => true\n *\n *      req.is('html');\n *      // => false\n *\n * @param {String|Array} types...\n * @return {String|false|null}\n * @public\n */\n\nreq.is = function is(types) {\n  var arr = types;\n\n  // support flattened arguments\n  if (!Array.isArray(types)) {\n    arr = new Array(arguments.length);\n    for (var i = 0; i < arr.length; i++) {\n      arr[i] = arguments[i];\n    }\n  }\n\n  return typeis(this, arr);\n};\n\n/**\n * Return the protocol string \"http\" or \"https\"\n * when requested with TLS. When the \"trust proxy\"\n * setting trusts the socket address, the\n * \"X-Forwarded-Proto\" header field will be trusted\n * and used if present.\n *\n * If you're running behind a reverse proxy that\n * supplies https for you this may be enabled.\n *\n * @return {String}\n * @public\n */\n\ndefineGetter(req, 'protocol', function protocol(){\n  var proto = this.connection.encrypted\n    ? 'https'\n    : 'http';\n  var trust = this.app.get('trust proxy fn');\n\n  if (!trust(this.connection.remoteAddress, 0)) {\n    return proto;\n  }\n\n  // Note: X-Forwarded-Proto is normally only ever a\n  //       single value, but this is to be safe.\n  proto = this.get('X-Forwarded-Proto') || proto;\n  return proto.split(/\\s*,\\s*/)[0];\n});\n\n/**\n * Short-hand for:\n *\n *    req.protocol == 'https'\n *\n * @return {Boolean}\n * @public\n */\n\ndefineGetter(req, 'secure', function secure(){\n  return this.protocol === 'https';\n});\n\n/**\n * Return the remote address from the trusted proxy.\n *\n * The is the remote address on the socket unless\n * \"trust proxy\" is set.\n *\n * @return {String}\n * @public\n */\n\ndefineGetter(req, 'ip', function ip(){\n  var trust = this.app.get('trust proxy fn');\n  return proxyaddr(this, trust);\n});\n\n/**\n * When \"trust proxy\" is set, trusted proxy addresses + client.\n *\n * For example if the value were \"client, proxy1, proxy2\"\n * you would receive the array `[\"client\", \"proxy1\", \"proxy2\"]`\n * where \"proxy2\" is the furthest down-stream and \"proxy1\" and\n * \"proxy2\" were trusted.\n *\n * @return {Array}\n * @public\n */\n\ndefineGetter(req, 'ips', function ips() {\n  var trust = this.app.get('trust proxy fn');\n  var addrs = proxyaddr.all(this, trust);\n  return addrs.slice(1).reverse();\n});\n\n/**\n * Return subdomains as an array.\n *\n * Subdomains are the dot-separated parts of the host before the main domain of\n * the app. By default, the domain of the app is assumed to be the last two\n * parts of the host. This can be changed by setting \"subdomain offset\".\n *\n * For example, if the domain is \"tobi.ferrets.example.com\":\n * If \"subdomain offset\" is not set, req.subdomains is `[\"ferrets\", \"tobi\"]`.\n * If \"subdomain offset\" is 3, req.subdomains is `[\"tobi\"]`.\n *\n * @return {Array}\n * @public\n */\n\ndefineGetter(req, 'subdomains', function subdomains() {\n  var hostname = this.hostname;\n\n  if (!hostname) return [];\n\n  var offset = this.app.get('subdomain offset');\n  var subdomains = !isIP(hostname)\n    ? hostname.split('.').reverse()\n    : [hostname];\n\n  return subdomains.slice(offset);\n});\n\n/**\n * Short-hand for `url.parse(req.url).pathname`.\n *\n * @return {String}\n * @public\n */\n\ndefineGetter(req, 'path', function path() {\n  return parse(this).pathname;\n});\n\n/**\n * Parse the \"Host\" header field to a hostname.\n *\n * When the \"trust proxy\" setting trusts the socket\n * address, the \"X-Forwarded-Host\" header field will\n * be trusted.\n *\n * @return {String}\n * @public\n */\n\ndefineGetter(req, 'hostname', function hostname(){\n  var trust = this.app.get('trust proxy fn');\n  var host = this.get('X-Forwarded-Host');\n\n  if (!host || !trust(this.connection.remoteAddress, 0)) {\n    host = this.get('Host');\n  }\n\n  if (!host) return;\n\n  // IPv6 literal support\n  var offset = host[0] === '['\n    ? host.indexOf(']') + 1\n    : 0;\n  var index = host.indexOf(':', offset);\n\n  return index !== -1\n    ? host.substring(0, index)\n    : host;\n});\n\n// TODO: change req.host to return host in next major\n\ndefineGetter(req, 'host', deprecate.function(function host(){\n  return this.hostname;\n}, 'req.host: Use req.hostname instead'));\n\n/**\n * Check if the request is fresh, aka\n * Last-Modified and/or the ETag\n * still match.\n *\n * @return {Boolean}\n * @public\n */\n\ndefineGetter(req, 'fresh', function(){\n  var method = this.method;\n  var s = this.res.statusCode;\n\n  // GET or HEAD for weak freshness validation only\n  if ('GET' != method && 'HEAD' != method) return false;\n\n  // 2xx or 304 as per rfc2616 14.26\n  if ((s >= 200 && s < 300) || 304 == s) {\n    return fresh(this.headers, (this.res._headers || {}));\n  }\n\n  return false;\n});\n\n/**\n * Check if the request is stale, aka\n * \"Last-Modified\" and / or the \"ETag\" for the\n * resource has changed.\n *\n * @return {Boolean}\n * @public\n */\n\ndefineGetter(req, 'stale', function stale(){\n  return !this.fresh;\n});\n\n/**\n * Check if the request was an _XMLHttpRequest_.\n *\n * @return {Boolean}\n * @public\n */\n\ndefineGetter(req, 'xhr', function xhr(){\n  var val = this.get('X-Requested-With') || '';\n  return val.toLowerCase() === 'xmlhttprequest';\n});\n\n/**\n * Helper function for creating a getter on an object.\n *\n * @param {Object} obj\n * @param {String} name\n * @param {Function} getter\n * @private\n */\nfunction defineGetter(obj, name, getter) {\n  Object.defineProperty(obj, name, {\n    configurable: true,\n    enumerable: true,\n    get: getter\n  });\n};\n"]}