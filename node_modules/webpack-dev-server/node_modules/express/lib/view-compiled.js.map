{"version":3,"sources":["view.js"],"names":[],"mappings":"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","file":"view-compiled.js","sourcesContent":["/*!\n * express\n * Copyright(c) 2009-2013 TJ Holowaychuk\n * Copyright(c) 2013 Roman Shtylman\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar debug = require('debug')('express:view');\nvar path = require('path');\nvar fs = require('fs');\nvar utils = require('./utils');\n\n/**\n * Module variables.\n * @private\n */\n\nvar dirname = path.dirname;\nvar basename = path.basename;\nvar extname = path.extname;\nvar join = path.join;\nvar resolve = path.resolve;\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = View;\n\n/**\n * Initialize a new `View` with the given `name`.\n *\n * Options:\n *\n *   - `defaultEngine` the default template engine name\n *   - `engines` template engine require() cache\n *   - `root` root path for view lookup\n *\n * @param {string} name\n * @param {object} options\n * @public\n */\n\nfunction View(name, options) {\n  var opts = options || {};\n\n  this.defaultEngine = opts.defaultEngine;\n  this.ext = extname(name);\n  this.name = name;\n  this.root = opts.root;\n\n  if (!this.ext && !this.defaultEngine) {\n    throw new Error('No default engine was specified and no extension was provided.');\n  }\n\n  var fileName = name;\n\n  if (!this.ext) {\n    // get extension from default engine name\n    this.ext = this.defaultEngine[0] !== '.'\n      ? '.' + this.defaultEngine\n      : this.defaultEngine;\n\n    fileName += this.ext;\n  }\n\n  if (!opts.engines[this.ext]) {\n    // load engine\n    opts.engines[this.ext] = require(this.ext.substr(1)).__express;\n  }\n\n  // store loaded engine\n  this.engine = opts.engines[this.ext];\n\n  // lookup path\n  this.path = this.lookup(fileName);\n}\n\n/**\n * Lookup view by the given `name`\n *\n * @param {string} name\n * @private\n */\n\nView.prototype.lookup = function lookup(name) {\n  var path;\n  var roots = [].concat(this.root);\n\n  debug('lookup \"%s\"', name);\n\n  for (var i = 0; i < roots.length && !path; i++) {\n    var root = roots[i];\n\n    // resolve the path\n    var loc = resolve(root, name);\n    var dir = dirname(loc);\n    var file = basename(loc);\n\n    // resolve the file\n    path = this.resolve(dir, file);\n  }\n\n  return path;\n};\n\n/**\n * Render with the given options.\n *\n * @param {object} options\n * @param {function} callback\n * @private\n */\n\nView.prototype.render = function render(options, callback) {\n  debug('render \"%s\"', this.path);\n  this.engine(this.path, options, callback);\n};\n\n/**\n * Resolve the file within the given directory.\n *\n * @param {string} dir\n * @param {string} file\n * @private\n */\n\nView.prototype.resolve = function resolve(dir, file) {\n  var ext = this.ext;\n\n  // <path>.<ext>\n  var path = join(dir, file);\n  var stat = tryStat(path);\n\n  if (stat && stat.isFile()) {\n    return path;\n  }\n\n  // <path>/index.<ext>\n  path = join(dir, basename(file, ext), 'index' + ext);\n  stat = tryStat(path);\n\n  if (stat && stat.isFile()) {\n    return path;\n  }\n};\n\n/**\n * Return a stat, maybe.\n *\n * @param {string} path\n * @return {fs.Stats}\n * @private\n */\n\nfunction tryStat(path) {\n  debug('stat \"%s\"', path);\n\n  try {\n    return fs.statSync(path);\n  } catch (e) {\n    return undefined;\n  }\n}\n"]}