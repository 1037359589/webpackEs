{"version":3,"sources":["array-flatten.js"],"names":[],"mappings":"AAAA,YAAY;;;;;AAAA;AAKZ,MAAM,CAAC,OAAO,GAAG,YAAY;;;;;;;;;;AAAA,AAU7B,SAAS,gBAAgB,CAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE;AAC/C,OAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACrC,QAAI,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,CAAA;;AAEpB,QAAI,KAAK,GAAG,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;AACrC,sBAAgB,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,GAAG,CAAC,CAAC,CAAA;KAC3C,MAAM;AACL,YAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;KACnB;GACF;;AAED,SAAO,MAAM,CAAA;CACd;;;;;;;;;AAAA,AASD,SAAS,cAAc,CAAE,KAAK,EAAE,MAAM,EAAE;AACtC,OAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACrC,QAAI,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,CAAA;;AAEpB,QAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;AACxB,oBAAc,CAAC,KAAK,EAAE,MAAM,CAAC,CAAA;KAC9B,MAAM;AACL,YAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;KACnB;GACF;;AAED,SAAO,MAAM,CAAA;CACd;;;;;;;;;AAAA,AASD,SAAS,YAAY,CAAE,KAAK,EAAE,KAAK,EAAE;AACnC,MAAI,KAAK,IAAI,IAAI,EAAE;AACjB,WAAO,cAAc,CAAC,KAAK,EAAE,EAAE,CAAC,CAAA;GACjC;;AAED,SAAO,gBAAgB,CAAC,KAAK,EAAE,EAAE,EAAE,KAAK,CAAC,CAAA;CAC1C","file":"array-flatten-compiled.js","sourcesContent":["'use strict'\n\n/**\n * Expose `arrayFlatten`.\n */\nmodule.exports = arrayFlatten\n\n/**\n * Recursive flatten function with depth.\n *\n * @param  {Array}  array\n * @param  {Array}  result\n * @param  {Number} depth\n * @return {Array}\n */\nfunction flattenWithDepth (array, result, depth) {\n  for (var i = 0; i < array.length; i++) {\n    var value = array[i]\n\n    if (depth > 0 && Array.isArray(value)) {\n      flattenWithDepth(value, result, depth - 1)\n    } else {\n      result.push(value)\n    }\n  }\n\n  return result\n}\n\n/**\n * Recursive flatten function. Omitting depth is slightly faster.\n *\n * @param  {Array} array\n * @param  {Array} result\n * @return {Array}\n */\nfunction flattenForever (array, result) {\n  for (var i = 0; i < array.length; i++) {\n    var value = array[i]\n\n    if (Array.isArray(value)) {\n      flattenForever(value, result)\n    } else {\n      result.push(value)\n    }\n  }\n\n  return result\n}\n\n/**\n * Flatten an array, with the ability to define a depth.\n *\n * @param  {Array}  array\n * @param  {Number} depth\n * @return {Array}\n */\nfunction arrayFlatten (array, depth) {\n  if (depth == null) {\n    return flattenForever(array, [])\n  }\n\n  return flattenWithDepth(array, [], depth)\n}\n"]}