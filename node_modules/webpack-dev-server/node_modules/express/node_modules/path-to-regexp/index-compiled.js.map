{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["/**\n * Expose `pathtoRegexp`.\n */\n\nmodule.exports = pathtoRegexp;\n\n/**\n * Match matching groups in a regular expression.\n */\nvar MATCHING_GROUP_REGEXP = /\\((?!\\?)/g;\n\n/**\n * Normalize the given path string,\n * returning a regular expression.\n *\n * An empty array should be passed,\n * which will contain the placeholder\n * key names. For example \"/user/:id\" will\n * then contain [\"id\"].\n *\n * @param  {String|RegExp|Array} path\n * @param  {Array} keys\n * @param  {Object} options\n * @return {RegExp}\n * @api private\n */\n\nfunction pathtoRegexp(path, keys, options) {\n  options = options || {};\n  keys = keys || [];\n  var strict = options.strict;\n  var end = options.end !== false;\n  var flags = options.sensitive ? '' : 'i';\n  var extraOffset = 0;\n  var keysOffset = keys.length;\n  var i = 0;\n  var name = 0;\n  var m;\n\n  if (path instanceof RegExp) {\n    while (m = MATCHING_GROUP_REGEXP.exec(path.source)) {\n      keys.push({\n        name: name++,\n        optional: false,\n        offset: m.index\n      });\n    }\n\n    return path;\n  }\n\n  if (Array.isArray(path)) {\n    // Map array parts into regexps and return their source. We also pass\n    // the same keys and options instance into every generation to get\n    // consistent matching groups before we join the sources together.\n    path = path.map(function (value) {\n      return pathtoRegexp(value, keys, options).source;\n    });\n\n    return new RegExp('(?:' + path.join('|') + ')', flags);\n  }\n\n  path = ('^' + path + (strict ? '' : path[path.length - 1] === '/' ? '?' : '/?'))\n    .replace(/\\/\\(/g, '/(?:')\n    .replace(/([\\/\\.])/g, '\\\\$1')\n    .replace(/(\\\\\\/)?(\\\\\\.)?:(\\w+)(\\(.*?\\))?(\\*)?(\\?)?/g, function (match, slash, format, key, capture, star, optional, offset) {\n      slash = slash || '';\n      format = format || '';\n      capture = capture || '([^\\\\/' + format + ']+?)';\n      optional = optional || '';\n\n      keys.push({\n        name: key,\n        optional: !!optional,\n        offset: offset + extraOffset\n      });\n\n      var result = ''\n        + (optional ? '' : slash)\n        + '(?:'\n        + format + (optional ? slash : '') + capture\n        + (star ? '((?:[\\\\/' + format + '].+?)?)' : '')\n        + ')'\n        + optional;\n\n      extraOffset += result.length - match.length;\n\n      return result;\n    })\n    .replace(/\\*/g, function (star, index) {\n      var len = keys.length\n\n      while (len-- > keysOffset && keys[len].offset > index) {\n        keys[len].offset += 3; // Replacement length minus asterisk length.\n      }\n\n      return '(.*)';\n    });\n\n  // This is a workaround for handling unnamed matching groups.\n  while (m = MATCHING_GROUP_REGEXP.exec(path)) {\n    var escapeCount = 0;\n    var index = m.index;\n\n    while (path.charAt(--index) === '\\\\') {\n      escapeCount++;\n    }\n\n    // It's possible to escape the bracket.\n    if (escapeCount % 2 === 1) {\n      continue;\n    }\n\n    if (keysOffset + i === keys.length || keys[keysOffset + i].offset > m.index) {\n      keys.splice(keysOffset + i, 0, {\n        name: name++, // Unnamed matching groups must be consistently linear.\n        optional: false,\n        offset: m.index\n      });\n    }\n\n    i++;\n  }\n\n  // If the path is non-ending, match until the end or a slash.\n  path += (end ? '$' : (path[path.length - 1] === '/' ? '' : '(?=\\\\/|$)'));\n\n  return new RegExp(path, flags);\n};\n"]}