{"version":3,"sources":["cell.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,IAAI,OAAO,GAAG,OAAO,CAAC,WAAW,CAAC;IAC9B,MAAM,GAAI,OAAO,CAAC,UAAU,CAAC,CAAC;;AAElC,IAAI,IAAI,GAAG,UAAS,KAAK,EAAE;AACzB,MAAI,CAAC,IAAI,GAAO,KAAK,CAAC,CAAC,CAAC,CAAC;AACzB,MAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;;AAEzB,MAAI,CAAC,SAAS,GAAG;AACf,YAAQ,EAAE,IAAI,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,wBAAwB,CAAC;AAC9D,YAAQ,EAAE,IAAI,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,wBAAwB,CAAC;GAC/D,CAAC;CACH,CAAC;;AAEF,IAAI,CAAC,SAAS,CAAC,OAAO,GAAG,UAAS,SAAS,EAAE;AAC3C,MAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,OAAO,IAAI,CAAC,CAAC;CACxC,CAAC;;AAEF,IAAI,CAAC,SAAS,CAAC,QAAQ,GAAG,UAAS,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE;AACpE,MAAI,CAAC,KAAK,CAAC,UAAU,EAAE,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;CAC3D,CAAC;;AAEF,IAAI,CAAC,SAAS,CAAC,QAAQ,GAAG,UAAS,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE;AACpE,MAAI,CAAC,KAAK,CAAC,UAAU,EAAE,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;CAC3D,CAAC;;AAEF,IAAI,CAAC,SAAS,CAAC,KAAK,GAAG,YAAW;AAChC,MAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,IAAI,IAAI,MAAM,EAAE,CAAC;AAC5C,MAAI,CAAC,QAAQ,EAAE,CAAC;AAChB,SAAO,IAAI,CAAC,OAAO,CAAC;CACrB,CAAC;;AAEF,IAAI,CAAC,SAAS,CAAC,KAAK,GAAG,UAAS,SAAS,EAAE,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE;AAC5E,MAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,OAAO,EAAE,UAAS,GAAG,EAAE,GAAG,EAAE;AAChE,QAAI,GAAG,EAAE,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,GAAG,GAAG,CAAC,OAAO,CAAC;AAC3D,YAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;AACjC,QAAI,CAAC,QAAQ,EAAE,CAAC;GACjB,EAAE,IAAI,CAAC,CAAC;CACV,CAAC;;AAEF,IAAI,CAAC,SAAS,CAAC,QAAQ,GAAG,YAAW;AACnC,MAAI,GAAG,GAAI,IAAI,CAAC,SAAS,CAAC,QAAQ;MAC9B,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC;;AAEnC,MAAI,CAAC,IAAI,CAAC,OAAO,IAAI,GAAG,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,KAAK,CAAC,EAAE,OAAO;AAC9D,MAAI,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC;AACzC,MAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;AACrB,MAAI,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;CACrB,CAAC;;AAEF,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC","file":"cell-compiled.js","sourcesContent":["'use strict';\n\nvar Functor = require('./functor'),\n    Pledge  = require('./pledge');\n\nvar Cell = function(tuple) {\n  this._ext     = tuple[0];\n  this._session = tuple[1];\n\n  this._functors = {\n    incoming: new Functor(this._session, 'processIncomingMessage'),\n    outgoing: new Functor(this._session, 'processOutgoingMessage')\n  };\n};\n\nCell.prototype.pending = function(direction) {\n  this._functors[direction].pending += 1;\n};\n\nCell.prototype.incoming = function(error, message, callback, context) {\n  this._exec('incoming', error, message, callback, context);\n};\n\nCell.prototype.outgoing = function(error, message, callback, context) {\n  this._exec('outgoing', error, message, callback, context);\n};\n\nCell.prototype.close = function() {\n  this._closed = this._closed || new Pledge();\n  this._doClose();\n  return this._closed;\n};\n\nCell.prototype._exec = function(direction, error, message, callback, context) {\n  this._functors[direction].call(error, message, function(err, msg) {\n    if (err) err.message = this._ext.name + ': ' + err.message;\n    callback.call(context, err, msg);\n    this._doClose();\n  }, this);\n};\n\nCell.prototype._doClose = function() {\n  var fin  = this._functors.incoming,\n      fout = this._functors.outgoing;\n\n  if (!this._closed || fin.pending + fout.pending !== 0) return;\n  if (this._session) this._session.close();\n  this._session = null;\n  this._closed.done();\n};\n\nmodule.exports = Cell;\n"]}