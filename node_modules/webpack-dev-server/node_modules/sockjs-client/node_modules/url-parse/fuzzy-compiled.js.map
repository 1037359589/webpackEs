{"version":3,"sources":["fuzzy.js"],"names":[],"mappings":"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","file":"fuzzy-compiled.js","sourcesContent":["'use strict';\n\nvar URL = require('./')\n  , url = new URL('');\n\n/**\n * A dictionary with all kind of different options that should generate a valid\n * and parse-able URL.\n *\n * @type {Object}\n * @api private\n */\nvar combinations = {};\n\ncombinations.protocol = [\n  'http:',\n  'https:',\n  'ws:',\n  'wss:',\n  'blob:'/*,\n  ''*/\n];\ncombinations.username = ['foo', 'bar'];\ncombinations.password = combinations.username;\ncombinations.hostname = [\n  'example.com',\n  'www.example.com',\n  'travel.travel',\n  'sub.sub.sub.domain.nl',\n  'xn--n3h.com',\n  'localhost',\n  '127.0.0.1',\n  '255.255.255.255'/*,\n  '3ffe:6a88:85a3:08d3:1319:8a2e:0370:7344',\n  '2001:2353::1428:57ab',\n  '2001:2353:0::0:1428:57ab',\n  '2001:2353:0:0:0:0:1428:57ab',\n  '2001:2353:0000:0000:0000::1428:57ab',\n  '2001:2353:0000:0000:0000:0000:1428:57ab',\n  '2001:2353:02de::0e13',\n  '2001:2353:2de::e13'*/\n];\ncombinations.port = ['8080', '844', '3340'];\ncombinations.pathname = [\n  '/',\n  '/bar',\n  '/bar/',\n  '/foo/bar',\n  '/foo.bar/foo',\n  '/fav.ico',\n  '/@3rd-Eden',\n  '/a/b/c/d/e/f/g/j/1/d/4/'\n];\ncombinations.query = ['foo=bar',\n  'foo[]=bar&foo[]=foo',\n  'email=foo@bar.travel',\n  'q='\n];\ncombinations.hash = [\n  'name',\n  'moo-with-longer-name',\n  '/what/about/slashes?querystring',\n  '?querystring',\n  '!/google/urls',\n  'use:foo@',\n  'http://'\n];\n\n/**\n * Get a random item from the given array.\n *\n * @param {String} name Name of the array we want to have a random item returned.\n * @returns {Mixed}\n * @api private\n */\nfunction get(name) {\n  var data = combinations[name];\n\n  return data[Math.floor(Math.random() * data.length)];\n}\n\n/**\n * Return a random boolean.\n *\n * @returns {Boolean}\n * @api private\n */\nfunction yep() {\n  return !!Math.round(Math.random() * 1);\n}\n\n/**\n * Generate the actual URL.\n *\n * @returns {Object} specification\n * @api public\n */\nmodule.exports = function generate() {\n  var spec = {}\n    , key;\n\n  spec.protocol = get('protocol');\n  spec.hostname = get('hostname');\n  spec.pathname = get('pathname');\n\n  if (yep()) spec.port = get('port');\n  if (yep()) spec.query = '?'+ get('query');\n  if (yep()) spec.hash = '#'+ get('hash');\n  if (yep()) {\n    spec.username = get('username');\n    spec.password = get('password');\n  }\n\n  for (key in combinations) {\n    url[key] = '';\n  }\n\n  for (key in spec) {\n    url[key] = spec[key];\n  }\n\n  spec.href = url.toString();\n  return spec;\n};\n"]}