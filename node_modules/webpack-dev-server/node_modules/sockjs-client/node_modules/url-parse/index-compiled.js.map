{"version":3,"sources":["index.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,IAAI,QAAQ,GAAG,OAAO,CAAC,eAAe,CAAC;IACnC,SAAS,GAAG,OAAO,CAAC,aAAa,CAAC;IAClC,EAAE,GAAG,OAAO,CAAC,gBAAgB,CAAC;IAC9B,UAAU,GAAG,WAAW;;;;;;;;;;;;;;AAAC,AAc7B,IAAI,YAAY,GAAG,CACjB,CAAC,GAAG,EAAE,MAAM,CAAC;AACb,CAAC,GAAG,EAAE,OAAO,CAAC;AACd,CAAC,IAAI,EAAE,UAAU,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AAC3B,CAAC,GAAG,EAAE,UAAU,CAAC;AACjB,CAAC,GAAG,EAAE,MAAM,EAAE,CAAC,CAAC;AAChB,CAAC,GAAG,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC;AAC9B,CAAC,UAAU,EAAE,MAAM,CAAC;AACpB,CAAC,GAAG,EAAE,UAAU,EAAE,SAAS,EAAE,CAAC,EAAE,CAAC;AAAC,CACnC;;;;;;;;;;;;;AAAC,AAaF,SAAS,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE;AACtC,MAAI,EAAE,IAAI,YAAY,GAAG,CAAA,AAAC,EAAE;AAC1B,WAAO,IAAI,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;GAC3C;;AAED,MAAI,QAAQ,GAAG,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC;MACnC,KAAK;MAAE,WAAW;MAAE,KAAK;MAAE,GAAG;MAC9B,IAAI,GAAG,OAAO,QAAQ;MACtB,GAAG,GAAG,IAAI;MACV,CAAC,GAAG,CAAC;;;;;;;;;;;;;AAAC,AAaV,MAAI,QAAQ,KAAK,IAAI,IAAI,QAAQ,KAAK,IAAI,EAAE;AAC1C,UAAM,GAAG,QAAQ,CAAC;AAClB,YAAQ,GAAG,IAAI,CAAC;GACjB;;AAED,MAAI,MAAM,IAAI,UAAU,KAAK,OAAO,MAAM,EAAE;AAC1C,UAAM,GAAG,EAAE,CAAC,KAAK,CAAC;GACnB;;AAED,UAAQ,GAAG,SAAS,CAAC,QAAQ,CAAC,CAAC;;AAE/B,SAAO,CAAC,GAAG,YAAY,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACnC,eAAW,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;AAC9B,SAAK,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;AACvB,OAAG,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;;AAErB,QAAI,KAAK,KAAK,KAAK,EAAE;AACnB,SAAG,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC;KACpB,MAAM,IAAI,QAAQ,KAAK,OAAO,KAAK,EAAE;AACpC,UAAI,EAAE,KAAK,GAAG,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA,AAAC,EAAE;AACrC,YAAI,QAAQ,KAAK,OAAO,WAAW,CAAC,CAAC,CAAC,EAAE;AACtC,aAAG,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;AACnC,iBAAO,GAAG,OAAO,CAAC,KAAK,CAAC,KAAK,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;SACjD,MAAM;AACL,aAAG,CAAC,GAAG,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;AAChC,iBAAO,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;SACnC;OACF;KACF,MAAM,IAAI,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;AACtC,SAAG,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;AACpB,aAAO,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,OAAO,CAAC,MAAM,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;KAC9D;;AAED,OAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,KAAK,WAAW,CAAC,CAAC,CAAC,IAAK,MAAM,KAAK,GAAG,IAAI,QAAQ,AAAC,GAAG,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,EAAE,CAAA,AAAC;;;;;;AAAC,AAMnG,QAAI,WAAW,CAAC,CAAC,CAAC,EAAE;AAClB,SAAG,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE,CAAC;KACnC;GACF;;;;;;;AAAA,AAOD,MAAI,MAAM,EAAE,GAAG,CAAC,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;;;;;;;AAAA,AAO1C,MAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAE;AACrC,OAAG,CAAC,IAAI,GAAG,GAAG,CAAC,QAAQ,CAAC;AACxB,OAAG,CAAC,IAAI,GAAG,EAAE,CAAC;GACf;;;;;AAAA,AAKD,KAAG,CAAC,QAAQ,GAAG,GAAG,CAAC,QAAQ,GAAG,EAAE,CAAC;AACjC,MAAI,GAAG,CAAC,IAAI,EAAE;AACZ,eAAW,GAAG,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AAClC,OAAG,CAAC,QAAQ,GAAG,WAAW,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;AACpC,OAAG,CAAC,QAAQ,GAAG,WAAW,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;GACrC;;;;;AAAA,AAKD,KAAG,CAAC,IAAI,GAAG,GAAG,CAAC,QAAQ,EAAE,CAAC;CAC3B;;;;;;;;;;;AAAA,AAWD,GAAG,CAAC,SAAS,CAAC,GAAG,GAAG,SAAS,GAAG,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,EAAE;AAChD,MAAI,GAAG,GAAG,IAAI,CAAC;;AAEf,MAAI,OAAO,KAAK,IAAI,EAAE;AACpB,QAAI,QAAQ,KAAK,OAAO,KAAK,IAAI,KAAK,CAAC,MAAM,EAAE;AAC7C,WAAK,GAAG,CAAC,EAAE,IAAI,EAAE,CAAC,KAAK,CAAA,CAAE,KAAK,CAAC,CAAC;KACjC;;AAED,OAAG,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;GACnB,MAAM,IAAI,MAAM,KAAK,IAAI,EAAE;AAC1B,OAAG,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;;AAElB,QAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,EAAE;AAClC,SAAG,CAAC,IAAI,GAAG,GAAG,CAAC,QAAQ,CAAC;AACxB,SAAG,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;KAChB,MAAM,IAAI,KAAK,EAAE;AAChB,SAAG,CAAC,IAAI,GAAG,GAAG,CAAC,QAAQ,GAAE,GAAG,GAAE,KAAK,CAAC;KACrC;GACF,MAAM,IAAI,UAAU,KAAK,IAAI,EAAE;AAC9B,OAAG,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;;AAElB,QAAI,GAAG,CAAC,IAAI,EAAE,KAAK,IAAI,GAAG,GAAE,GAAG,CAAC,IAAI,CAAC;AACrC,OAAG,CAAC,IAAI,GAAG,KAAK,CAAC;GAClB,MAAM,IAAI,MAAM,KAAK,IAAI,EAAE;AAC1B,OAAG,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;;AAElB,QAAI,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;AACvB,WAAK,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AACzB,SAAG,CAAC,QAAQ,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;AACxB,SAAG,CAAC,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;KACrB;GACF,MAAM;AACL,OAAG,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;GACnB;;AAED,KAAG,CAAC,IAAI,GAAG,GAAG,CAAC,QAAQ,EAAE,CAAC;AAC1B,SAAO,GAAG,CAAC;CACZ;;;;;;;;;AAAC,AASF,GAAG,CAAC,SAAS,CAAC,QAAQ,GAAG,SAAS,QAAQ,CAAC,SAAS,EAAE;AACpD,MAAI,CAAC,SAAS,IAAI,UAAU,KAAK,OAAO,SAAS,EAAE,SAAS,GAAG,EAAE,CAAC,SAAS,CAAC;;AAE5E,MAAI,KAAK;MACL,GAAG,GAAG,IAAI;MACV,MAAM,GAAG,GAAG,CAAC,QAAQ,GAAE,IAAI,CAAC;;AAEhC,MAAI,GAAG,CAAC,QAAQ,EAAE;AAChB,UAAM,IAAI,GAAG,CAAC,QAAQ,CAAC;AACvB,QAAI,GAAG,CAAC,QAAQ,EAAE,MAAM,IAAI,GAAG,GAAE,GAAG,CAAC,QAAQ,CAAC;AAC9C,UAAM,IAAI,GAAG,CAAC;GACf;;AAED,QAAM,IAAI,GAAG,CAAC,QAAQ,CAAC;AACvB,MAAI,GAAG,CAAC,IAAI,EAAE,MAAM,IAAI,GAAG,GAAE,GAAG,CAAC,IAAI,CAAC;;AAEtC,QAAM,IAAI,GAAG,CAAC,QAAQ,CAAC;;AAEvB,OAAK,GAAG,QAAQ,KAAK,OAAO,GAAG,CAAC,KAAK,GAAG,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,KAAK,CAAC;AACzE,MAAI,KAAK,EAAE,MAAM,IAAI,GAAG,KAAK,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,GAAG,GAAE,KAAK,GAAG,KAAK,CAAC;;AAElE,MAAI,GAAG,CAAC,IAAI,EAAE,MAAM,IAAI,GAAG,CAAC,IAAI,CAAC;;AAEjC,SAAO,MAAM,CAAC;CACf;;;;;;AAAC,AAMF,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC;AACZ,GAAG,CAAC,QAAQ,GAAG,SAAS,CAAC;AACzB,MAAM,CAAC,OAAO,GAAG,GAAG,CAAC","file":"index-compiled.js","sourcesContent":["'use strict';\n\nvar required = require('requires-port')\n  , lolcation = require('./lolcation')\n  , qs = require('querystringify')\n  , relativere = /^\\/(?!\\/)/;\n\n/**\n * These are the parse instructions for the URL parsers, it informs the parser\n * about:\n *\n * 0. The char it Needs to parse, if it's a string it should be done using\n *    indexOf, RegExp using exec and NaN means set as current value.\n * 1. The property we should set when parsing this value.\n * 2. Indication if it's backwards or forward parsing, when set as number it's\n *    the value of extra chars that should be split off.\n * 3. Inherit from location if non existing in the parser.\n * 4. `toLowerCase` the resulting value.\n */\nvar instructions = [\n  ['#', 'hash'],                        // Extract from the back.\n  ['?', 'query'],                       // Extract from the back.\n  ['//', 'protocol', 2, 1, 1],          // Extract from the front.\n  ['/', 'pathname'],                    // Extract from the back.\n  ['@', 'auth', 1],                     // Extract from the front.\n  [NaN, 'host', undefined, 1, 1],       // Set left over value.\n  [/\\:(\\d+)$/, 'port'],                 // RegExp the back.\n  [NaN, 'hostname', undefined, 1, 1]    // Set left over.\n];\n\n/**\n * The actual URL instance. Instead of returning an object we've opted-in to\n * create an actual constructor as it's much more memory efficient and\n * faster and it pleases my CDO.\n *\n * @constructor\n * @param {String} address URL we want to parse.\n * @param {Boolean|function} parser Parser for the query string.\n * @param {Object} location Location defaults for relative paths.\n * @api public\n */\nfunction URL(address, location, parser) {\n  if (!(this instanceof URL)) {\n    return new URL(address, location, parser);\n  }\n\n  var relative = relativere.test(address)\n    , parse, instruction, index, key\n    , type = typeof location\n    , url = this\n    , i = 0;\n\n  //\n  // The following if statements allows this module two have compatibility with\n  // 2 different API:\n  //\n  // 1. Node.js's `url.parse` api which accepts a URL, boolean as arguments\n  //    where the boolean indicates that the query string should also be parsed.\n  //\n  // 2. The `URL` interface of the browser which accepts a URL, object as\n  //    arguments. The supplied object will be used as default values / fall-back\n  //    for relative paths.\n  //\n  if ('object' !== type && 'string' !== type) {\n    parser = location;\n    location = null;\n  }\n\n  if (parser && 'function' !== typeof parser) {\n    parser = qs.parse;\n  }\n\n  location = lolcation(location);\n\n  for (; i < instructions.length; i++) {\n    instruction = instructions[i];\n    parse = instruction[0];\n    key = instruction[1];\n\n    if (parse !== parse) {\n      url[key] = address;\n    } else if ('string' === typeof parse) {\n      if (~(index = address.indexOf(parse))) {\n        if ('number' === typeof instruction[2]) {\n          url[key] = address.slice(0, index);\n          address = address.slice(index + instruction[2]);\n        } else {\n          url[key] = address.slice(index);\n          address = address.slice(0, index);\n        }\n      }\n    } else if (index = parse.exec(address)) {\n      url[key] = index[1];\n      address = address.slice(0, address.length - index[0].length);\n    }\n\n    url[key] = url[key] || (instruction[3] || ('port' === key && relative) ? location[key] || '' : '');\n\n    //\n    // Hostname, host and protocol should be lowercased so they can be used to\n    // create a proper `origin`.\n    //\n    if (instruction[4]) {\n      url[key] = url[key].toLowerCase();\n    }\n  }\n\n  //\n  // Also parse the supplied query string in to an object. If we're supplied\n  // with a custom parser as function use that instead of the default build-in\n  // parser.\n  //\n  if (parser) url.query = parser(url.query);\n\n  //\n  // We should not add port numbers if they are already the default port number\n  // for a given protocol. As the host also contains the port number we're going\n  // override it with the hostname which contains no port number.\n  //\n  if (!required(url.port, url.protocol)) {\n    url.host = url.hostname;\n    url.port = '';\n  }\n\n  //\n  // Parse down the `auth` for the username and password.\n  //\n  url.username = url.password = '';\n  if (url.auth) {\n    instruction = url.auth.split(':');\n    url.username = instruction[0] || '';\n    url.password = instruction[1] || '';\n  }\n\n  //\n  // The href is just the compiled result.\n  //\n  url.href = url.toString();\n}\n\n/**\n * This is convenience method for changing properties in the URL instance to\n * insure that they all propagate correctly.\n *\n * @param {String} prop Property we need to adjust.\n * @param {Mixed} value The newly assigned value.\n * @returns {URL}\n * @api public\n */\nURL.prototype.set = function set(part, value, fn) {\n  var url = this;\n\n  if ('query' === part) {\n    if ('string' === typeof value && value.length) {\n      value = (fn || qs.parse)(value);\n    }\n\n    url[part] = value;\n  } else if ('port' === part) {\n    url[part] = value;\n\n    if (!required(value, url.protocol)) {\n      url.host = url.hostname;\n      url[part] = '';\n    } else if (value) {\n      url.host = url.hostname +':'+ value;\n    }\n  } else if ('hostname' === part) {\n    url[part] = value;\n\n    if (url.port) value += ':'+ url.port;\n    url.host = value;\n  } else if ('host' === part) {\n    url[part] = value;\n\n    if (/\\:\\d+/.test(value)) {\n      value = value.split(':');\n      url.hostname = value[0];\n      url.port = value[1];\n    }\n  } else {\n    url[part] = value;\n  }\n\n  url.href = url.toString();\n  return url;\n};\n\n/**\n * Transform the properties back in to a valid and full URL string.\n *\n * @param {Function} stringify Optional query stringify function.\n * @returns {String}\n * @api public\n */\nURL.prototype.toString = function toString(stringify) {\n  if (!stringify || 'function' !== typeof stringify) stringify = qs.stringify;\n\n  var query\n    , url = this\n    , result = url.protocol +'//';\n\n  if (url.username) {\n    result += url.username;\n    if (url.password) result += ':'+ url.password;\n    result += '@';\n  }\n\n  result += url.hostname;\n  if (url.port) result += ':'+ url.port;\n\n  result += url.pathname;\n\n  query = 'object' === typeof url.query ? stringify(url.query) : url.query;\n  if (query) result += '?' !== query.charAt(0) ? '?'+ query : query;\n\n  if (url.hash) result += url.hash;\n\n  return result;\n};\n\n//\n// Expose the URL parser and some additional properties that might be useful for\n// others.\n//\nURL.qs = qs;\nURL.location = lolcation;\nmodule.exports = URL;\n"]}