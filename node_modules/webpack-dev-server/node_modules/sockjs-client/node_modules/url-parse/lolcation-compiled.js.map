{"version":3,"sources":["lolcation.js"],"names":[],"mappings":"AAAA;;;;;;;;;;AAAY,CAAC;AAUb,IAAI,MAAM,GAAG,EAAE,IAAI,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE;IAC9B,GAAG;;;;;;;;;;;;;;AAAC,AAcR,MAAM,CAAC,OAAO,GAAG,SAAS,SAAS,CAAC,GAAG,EAAE;AACvC,KAAG,GAAG,GAAG,IAAI,MAAM,CAAC,QAAQ,IAAI,EAAE,CAAC;AACnC,KAAG,GAAG,GAAG,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC;;AAE3B,MAAI,gBAAgB,GAAG,EAAE;MACrB,IAAI,GAAG,OAAO,GAAG;MACjB,GAAG,CAAC;;AAER,MAAI,OAAO,KAAK,GAAG,CAAC,QAAQ,EAAE;AAC5B,oBAAgB,GAAG,IAAI,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC,CAAC;GACxD,MAAM,IAAI,QAAQ,KAAK,IAAI,EAAE;AAC5B,oBAAgB,GAAG,IAAI,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;AACpC,SAAK,GAAG,IAAI,MAAM,EAAE,OAAO,gBAAgB,CAAC,GAAG,CAAC,CAAC;GAClD,MAAM,IAAI,QAAQ,KAAK,IAAI,EAAE,KAAK,GAAG,IAAI,GAAG,EAAE;AAC7C,QAAI,GAAG,IAAI,MAAM,EAAE,SAAS;AAC5B,oBAAgB,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;GAClC;;AAED,SAAO,gBAAgB,CAAC;CACzB,CAAC","file":"lolcation-compiled.js","sourcesContent":["'use strict';\n\n/**\n * These properties should not be copied or inherited from. This is only needed\n * for all non blob URL's as the a blob URL does not include a hash, only the\n * origin.\n *\n * @type {Object}\n * @private\n */\nvar ignore = { hash: 1, query: 1 }\n  , URL;\n\n/**\n * The location object differs when your code is loaded through a normal page,\n * Worker or through a worker using a blob. And with the blobble begins the\n * trouble as the location object will contain the URL of the blob, not the\n * location of the page where our code is loaded in. The actual origin is\n * encoded in the `pathname` so we can thankfully generate a good \"default\"\n * location from it so we can generate proper relative URL's again.\n *\n * @param {Object} loc Optional default location object.\n * @returns {Object} lolcation object.\n * @api public\n */\nmodule.exports = function lolcation(loc) {\n  loc = loc || global.location || {};\n  URL = URL || require('./');\n\n  var finaldestination = {}\n    , type = typeof loc\n    , key;\n\n  if ('blob:' === loc.protocol) {\n    finaldestination = new URL(unescape(loc.pathname), {});\n  } else if ('string' === type) {\n    finaldestination = new URL(loc, {});\n    for (key in ignore) delete finaldestination[key];\n  } else if ('object' === type) for (key in loc) {\n    if (key in ignore) continue;\n    finaldestination[key] = loc[key];\n  }\n\n  return finaldestination;\n};\n"]}