{"version":3,"sources":["index.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,IAAI,GAAG,GAAG,MAAM,CAAC,SAAS,CAAC,cAAc;;;;;;;;;AAAC,AAS1C,SAAS,WAAW,CAAC,KAAK,EAAE;AAC1B,MAAI,MAAM,GAAG,oBAAoB;MAC7B,MAAM,GAAG,EAAE;MACX,IAAI;;;;;;;AAAC,AAOT,SACE,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EACzB,MAAM,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,kBAAkB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EACjE;;AAEF,SAAO,MAAM,CAAC;CACf;;;;;;;;;;AAAA,AAUD,SAAS,cAAc,CAAC,GAAG,EAAE,MAAM,EAAE;AACnC,QAAM,GAAG,MAAM,IAAI,EAAE,CAAC;;AAEtB,MAAI,KAAK,GAAG,EAAE;;;;;AAAC,AAKf,MAAI,QAAQ,KAAK,OAAO,MAAM,EAAE,MAAM,GAAG,GAAG,CAAC;;AAE7C,OAAK,IAAI,GAAG,IAAI,GAAG,EAAE;AACnB,QAAI,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE;AACtB,WAAK,CAAC,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,GAAE,GAAG,GAAE,kBAAkB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;KACxE;GACF;;AAED,SAAO,KAAK,CAAC,MAAM,GAAG,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;CACrD;;;;;AAAA,AAKD,OAAO,CAAC,SAAS,GAAG,cAAc,CAAC;AACnC,OAAO,CAAC,KAAK,GAAG,WAAW,CAAC","file":"index-compiled.js","sourcesContent":["'use strict';\n\nvar has = Object.prototype.hasOwnProperty;\n\n/**\n * Simple query string parser.\n *\n * @param {String} query The query string that needs to be parsed.\n * @returns {Object}\n * @api public\n */\nfunction querystring(query) {\n  var parser = /([^=?&]+)=([^&]*)/g\n    , result = {}\n    , part;\n\n  //\n  // Little nifty parsing hack, leverage the fact that RegExp.exec increments\n  // the lastIndex property so we can continue executing this loop until we've\n  // parsed all results.\n  //\n  for (;\n    part = parser.exec(query);\n    result[decodeURIComponent(part[1])] = decodeURIComponent(part[2])\n  );\n\n  return result;\n}\n\n/**\n * Transform a query string to an object.\n *\n * @param {Object} obj Object that should be transformed.\n * @param {String} prefix Optional prefix.\n * @returns {String}\n * @api public\n */\nfunction querystringify(obj, prefix) {\n  prefix = prefix || '';\n\n  var pairs = [];\n\n  //\n  // Optionally prefix with a '?' if needed\n  //\n  if ('string' !== typeof prefix) prefix = '?';\n\n  for (var key in obj) {\n    if (has.call(obj, key)) {\n      pairs.push(encodeURIComponent(key) +'='+ encodeURIComponent(obj[key]));\n    }\n  }\n\n  return pairs.length ? prefix + pairs.join('&') : '';\n}\n\n//\n// Expose the module.\n//\nexports.stringify = querystringify;\nexports.parse = querystring;\n"]}