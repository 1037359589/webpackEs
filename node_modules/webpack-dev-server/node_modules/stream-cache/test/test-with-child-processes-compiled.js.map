{"version":3,"sources":["test-with-child-processes.js"],"names":[],"mappings":"AAAA,IAAI,WAAW,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AAChC,IAAI,MAAM,GAAQ,OAAO,CAAC,QAAQ,CAAC,CAAC;AACpC,IAAI,KAAK,GAAS,OAAO,CAAC,eAAe,CAAC,CAAC,KAAK,CAAC;;AAEjD,IAAI,MAAM,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;AAC1B,IAAI,KAAK,GAAI,IAAI,WAAW,EAAE,CAAC;;AAE/B,IAAI,KAAK,GAAG,EAAE,CAAC;AACf,IAAI,UAAU,GAAG,EAAE,CAAC;AACpB,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,UAAS,IAAI,EAAE;AACrC,MAAI,IAAI,GAAW,KAAK,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;AAC9C,YAAU,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;;AAEtB,MAAI,CAAC,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;AACjC,MAAI,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,UAAS,KAAK,EAAE;AACrC,cAAU,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;GAC9B,CAAC,CAAC;CACJ,CAAC,CAAC;;AAEH,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;AAC1B,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAC1B,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;;AAE5B,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,YAAW;AACpC,OAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;;AAE1B,QAAM,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;AAC5B,QAAM,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;CACpB,CAAC,CAAC;;AAEH,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,YAAW;AAC3B,OAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;CAC3B,CAAC,CAAC;;AAEH,OAAO,CAAC,EAAE,CAAC,MAAM,EAAE,YAAW;AAC5B,MAAI,QAAQ,GAAM,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;AACrC,MAAI,WAAW,GAAG,CAAC,YAAY,CAAC,CAAC;;AAEjC,QAAM,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;;AAEzC,MAAG;AACD,UAAM,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;GAC1C,CAAC,OAAO,GAAG,EAAE;AACZ,UAAM,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC;GAC7C;;AAED,MAAG;AACD,UAAM,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;GAC1C,CAAC,OAAO,GAAG,EAAE;AACZ,UAAM,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC;GAC7C;CACF,CAAC,CAAC","file":"test-with-child-processes-compiled.js","sourcesContent":["var StreamCache = require('..');\nvar assert      = require('assert');\nvar spawn       = require('child_process').spawn;\n\nvar source = spawn('cat');\nvar cache  = new StreamCache();\n\nvar dests = {};\nvar dataEvents = {};\n['a', 'b', 'c'].forEach(function(name) {\n  var dest         = dests[name] = spawn('cat');\n  dataEvents[name] = [];\n\n  dest.stdout.setEncoding('utf-8');\n  dest.stdout.on('data', function(chunk) {\n    dataEvents[name].push(chunk);\n  });\n});\n\ncache.pipe(dests.a.stdin);\nsource.stdout.pipe(cache);\nsource.stdin.write('Hello');\n\nsource.stdout.once('data', function() {\n  cache.pipe(dests.b.stdin);\n\n  source.stdin.write('World');\n  source.stdin.end();\n});\n\nsource.on('exit', function() {\n  cache.pipe(dests.c.stdin);\n});\n\nprocess.on('exit', function() {\n  var expected    = ['Hello', 'World'];\n  var alternative = ['HelloWorld'];\n\n  assert.deepEqual(dataEvents.a, expected);\n\n  try{\n    assert.deepEqual(dataEvents.b, expected);\n  } catch (err) {\n    assert.deepEqual(dataEvents.b, alternative);\n  }\n\n  try{\n    assert.deepEqual(dataEvents.c, expected);\n  } catch (err) {\n    assert.deepEqual(dataEvents.c, alternative);\n  }\n});\n"]}