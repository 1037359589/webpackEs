{"version":3,"sources":["custom.js"],"names":[],"mappings":"AAAA,IAAI,GAAG,GAAG,OAAO,CAAC,KAAK,CAAC,CAAA;;AAExB,SAAS,IAAI,CAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE;AACnC,KAAG,CAAC,IAAI,EAAE;AACN,QAAI,EAAM,IAAI;AACd,QAAI,EAAM,IAAI;;AAAA,MAEd,KAAK,EAAK,OAAO,OAAO,IAAI,QAAQ,GAAG,OAAO,GAAG,KAAK;AACtD,WAAO,EAAG,CAAC,CAAC,OAAO,IAAI,OAAO,OAAO,IAAI,QAAQ,GAAG,OAAO,CAAC,OAAO,GAAG,OAAO;;GAEhF,EAAE,KAAK,CAAC,CAAA;CACV;;;AAAA,AAGD,SAAS,WAAW,CAAE,OAAO,EAAE,KAAK,EAAE;AACpC,OAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;AAChB,MAAI,KAAK,CAAC,iBAAiB,EACzB,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,SAAS,CAAC,MAAM,CAAC,CAAA;AACjD,MAAI,CAAC,IAAI,CAAC,IAAI,EAAE,aAAa,EAAE,OAAO,EAAE,KAAK,CAAC,CAAA;CAC/C;;AAED,WAAW,CAAC,SAAS,GAAG,IAAI,KAAK,EAAE,CAAA;;AAEnC,SAAS,WAAW,CAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE;AACxC,MAAI,GAAG,GAAG,UAAU,OAAO,EAAE,KAAK,EAAE;AAClC,QAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,CAAC;;AAAA,AAErC,QAAI,IAAI,IAAI,iBAAiB,EAAE;AAC7B,UAAI,CAAC,IAAI,GAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAA;AAC9B,UAAI,CAAC,IAAI,GAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAA;AAC9B,UAAI,CAAC,KAAK,GAAK,IAAI,CAAC,KAAK,CAAC,KAAK,CAAA;AAC/B,UAAI,CAAC,OAAO,GACV,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAC1B,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,WAAW,GACzC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAA,IACnB,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,GAAG,GAAG,EAAE,CAAA,AAAC,CAAA;KAC1D;AACD,SAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;AAChB,QAAI,KAAK,CAAC,iBAAiB,EACzB,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,SAAS,CAAC,MAAM,CAAC,CAAA;GAClD,CAAA;AACD,KAAG,CAAC,SAAS,GAAG,CAAC,CAAC,KAAK,GAAG,IAAI,KAAK,EAAE,GAAG,IAAI,WAAW,EAAE,CAAA;AACzD,SAAO,GAAG,CAAA;CACX;;AAED,MAAM,CAAC,OAAO,GAAG,UAAU,KAAK,EAAE;AAChC,MAAI,EAAE,GAAG,UAAU,IAAI,EAAE,KAAK,EAAE;AAC9B,WAAO,WAAW,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,CAAC,CAAA;GACvC,CAAA;AACD,SAAO;AACH,eAAW,EAAO,WAAW;AAC7B,mBAAe,EAAG,EAAE,CAAC,iBAAiB,CAAC;AACvC,eAAW,EAAO,EAAE;GACvB,CAAA;CACF,CAAA","file":"custom-compiled.js","sourcesContent":["var prr = require('prr')\n\nfunction init (type, message, cause) {\n  prr(this, {\n      type    : type\n    , name    : type\n      // can be passed just a 'cause'\n    , cause   : typeof message != 'string' ? message : cause\n    , message : !!message && typeof message != 'string' ? message.message : message\n\n  }, 'ewr')\n}\n\n// generic prototype, not intended to be actually used - helpful for `instanceof`\nfunction CustomError (message, cause) {\n  Error.call(this)\n  if (Error.captureStackTrace)\n    Error.captureStackTrace(this, arguments.callee)\n  init.call(this, 'CustomError', message, cause)\n}\n\nCustomError.prototype = new Error()\n\nfunction createError (errno, type, proto) {\n  var err = function (message, cause) {\n    init.call(this, type, message, cause)\n    //TODO: the specificity here is stupid, errno should be available everywhere\n    if (type == 'FilesystemError') {\n      this.code    = this.cause.code\n      this.path    = this.cause.path\n      this.errno   = this.cause.errno\n      this.message =\n        (errno.errno[this.cause.errno]\n          ? errno.errno[this.cause.errno].description\n          : this.cause.message)\n        + (this.cause.path ? ' [' + this.cause.path + ']' : '')\n    }\n    Error.call(this)\n    if (Error.captureStackTrace)\n      Error.captureStackTrace(this, arguments.callee)\n  }\n  err.prototype = !!proto ? new proto() : new CustomError()\n  return err\n}\n\nmodule.exports = function (errno) {\n  var ce = function (type, proto) {\n    return createError(errno, type, proto)\n  }\n  return {\n      CustomError     : CustomError\n    , FilesystemError : ce('FilesystemError')\n    , createError     : ce\n  }\n}\n"]}