{"version":3,"sources":["test.js"],"names":[],"mappings":";;AAEA,IAAI,IAAI,GAAI,OAAO,CAAC,MAAM,CAAC;IACvB,KAAK,GAAG,OAAO,CAAC,IAAI,CAAC,CAAA;;AAEzB,IAAI,CAAC,eAAe,EAAE,UAAU,CAAC,EAAE;AACjC,GAAC,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE,qBAAqB,CAAC,CAAA;AACtC,GAAC,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,EAAE,uBAAuB,CAAC,CAAA;AAC1C,GAAC,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,sBAAsB,CAAC,CAAA;;AAExC,GAAC,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,EAAE,EAAE,QAAQ,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,GAAG,eAAe,CAAC,CAAA;AAC5E,GAAC,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,4BAA4B,CAAC,CAAA;;AAEtE,GAAC,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,gCAAgC,CAAC,CAAA;;AAE9E,GAAC,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,2BAA2B,CAAC,CAAA;;AAElE,GAAC,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,4BAA4B,CAAC,CAAA;AACtE,GAAC,CAAC,GAAG,EAAE,CAAA;CACR,CAAC,CAAA;;AAEF,IAAI,CAAC,eAAe,EAAE,UAAU,CAAC,EAAE;AACjC,MAAI,IAAI,GAAG,KAAK,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAA;AACzC,MAAI,IAAI,GAAG,IAAI,IAAI,CAAC,gBAAgB,CAAC,CAAA;;AAErC,GAAC,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,gBAAgB,EAAE,qBAAqB,CAAC,CAAA;AAC3D,GAAC,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,gBAAgB,EAAE,qBAAqB,CAAC,CAAA;AAC3D,GAAC,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,gBAAgB,EAAE,wBAAwB,CAAC,CAAA;AACjE,GAAC,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,UAAU,CAAC,CAAA;AAC/B,GAAC,CAAC,GAAG,EAAE,CAAA;CACR,CAAC,CAAA","file":"test-compiled.js","sourcesContent":["#!/usr/bin/env node\n\nvar test  = require('tape')\n  , errno = require('./')\n\ntest('sanity checks', function (t) {\n  t.ok(errno.all, 'errno.all not found')\n  t.ok(errno.errno, 'errno.errno not found')\n  t.ok(errno.code, 'errno.code not found')\n\n  t.equal(errno.all.length, 59, 'found ' + errno.all.length + ', expected 59')\n  t.equal(errno.errno['-1'], errno.all[0], 'errno -1 not first element')\n\n  t.equal(errno.code['UNKNOWN'], errno.all[0], 'code UNKNOWN not first element')\n\n  t.equal(errno.errno[1], errno.all[2], 'errno 1 not third element')\n\n  t.equal(errno.code['EOF'], errno.all[2], 'code EOF not third element')\n  t.end()\n})\n\ntest('custom errors', function (t) {\n  var Cust = errno.create('FooNotBarError')\n  var cust = new Cust('foo is not bar')\n\n  t.equal(cust.name, 'FooNotBarError', 'correct custom name')\n  t.equal(cust.type, 'FooNotBarError', 'correct custom type')\n  t.equal(cust.message, 'foo is not bar', 'correct custom message')\n  t.notOk(cust.cause, 'no cause')\n  t.end()\n})\n"]}